<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试入门教程</title>
      <link href="/2020/06/01/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/06/01/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h1><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB。采用五种独特的SQL注入技术，分别是：<br>1.基于布尔的盲注，即可以根据返回页面判断条件真假的注入<br>2.基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断<br>3.基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中 <br>4.联合查询注入，可以使用union的情况下的注入<br>5.堆查询注入，可以同时执行多条语句的执行时的注入<br>Type: boolean-based blind    基于布尔值的盲注<br>Type: error-based    基于报错注入<br>Type: time-based blind    基于时间的盲注<br>Type: UNION query    联合查询注入</p><h2 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h2><p>测试注入：python sqlmap.py -u “url”<br>注数据库：python sqlmap.py -u “url” –dbs<br>注当前数据库：python sqlmap.py -u “url” –current-db<br>注当前数据库用户名：python sqlmap.py -u “url” –current-user<br>注表名：python sqlmap.py -u “url” -D 库名 –tables<br>注列名：python sqlmap.py -u “url” -D 库名 -T 表名 –columns<br>注数据：python sqlmap.py -u “url” -D 库名 -T 表名 -C 列名,列名 –dump<br>查询表条数：python sqlmap.py -u “url” –count -D 当前数据库名<br>Options（选项）： –version 显示程序的版本号并退出<br>-h, –help 显示此帮助消息并退出<br>-v VERBOSE 详细级别：0-6（默认为1）<br>Target（目标）： 以下至少需要设置其中一个选项，设置目标URL<br>-d DIRECT 直接连接到数据库<br>-u URL, –url=URL 目标URL<br>-l LIST 从Burp或WebScarab代理的日志中解析目标<br>-r REQUESTFILE 从一个文件中载入HTTP请求<br>-g GOOGLEDORK 处理Google dork的结果作为目标URL<br>-c CONFIGFILE 从INI配置文件中加载选项<br>Request（请求）： 这些选项可以用来指定如何连接到目标URL。<br>–data=DATA 通过POST发送的数据字符串<br>–cookie=COOKIE HTTP Cookie头<br>–cookie-urlencode URL 编码生成的cookie注入<br>–drop-set-cookie 忽略响应的Set – Cookie头信息<br>–user-agent=AGENT 指定 HTTP User – Agent头<br>–random-agent 使用随机选定的HTTP User – Agent头<br>–referer=REFERER 指定 HTTP Referer头<br>–headers=HEADERS 换行分开，加入其他的HTTP头<br>–auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)<br>–auth-cred=ACRED HTTP身份验证凭据（用户名:密码）<br>–auth-cert=ACERT HTTP认证证书（key_file，cert_file）<br>–proxy=PROXY 使用HTTP代理连接到目标URL<br>–proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）<br>–ignore-proxy 忽略系统默认的HTTP代理<br>–delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒<br>–timeout=TIMEOUT 等待连接超时的时间（默认为30秒）<br>–retries=RETRIES 连接超时后重新连接的时间（默认3）<br>–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式<br>–safe-url=SAFURL 在测试过程中经常访问的url地址<br>–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URL<br>Optimization（优化）： 这些选项可用于优化SqlMap的性能。<br>-o 开启所有优化开关<br>–predict-output 预测常见的查询输出<br>–keep-alive 使用持久的HTTP（S）连接<br>–null-connection 从没有实际的HTTP响应体中检索页面长度<br>–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）<br>Injection（注入）： 这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。<br>-p TESTPARAMETER 可测试的参数（S）<br>–dbms=DBMS 强制后端的DBMS为此值<br>–os=OS 强制后端的DBMS操作系统为这个值<br>–prefix=PREFIX 注入payload字符串前缀<br>–suffix=SUFFIX 注入payload字符串后缀<br>–tamper=TAMPER 使用给定的脚本（S）篡改注入数据<br>Detection（检测）： 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。<br>–level=LEVEL 执行测试的等级（1-5，默认为1）<br>–risk=RISK 执行测试的风险（0-3，默认为1）<br>–string=STRING 查询时有效时在页面匹配字符串<br>–regexp=REGEXP 查询时有效时在页面匹配正则表达式<br>–text-only 仅基于在文本内容比较网页<br>Techniques（技巧）： 这些选项可用于调整具体的SQL注入测试。<br>–technique=TECH SQL注入技术测试（默认BEUST）<br>–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）<br>–union-cols=UCOLS 定列范围用于测试UNION查询注入<br>–union-char=UCHAR 用于暴力猜解列数的字符<br>Fingerprint（指纹）： -f, –fingerprint 执行检查广泛的DBMS版本指纹<br>Enumeration（枚举）： 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己 的SQL语句。<br>-b, –banner 检索数据库管理系统的标识<br>–current-user 检索数据库管理系统当前用户<br>–current-db 检索数据库管理系统当前数据库<br>–is-dba 检测DBMS当前用户是否DBA<br>–users 枚举数据库管理系统用户<br>–passwords 枚举数据库管理系统用户密码哈希<br>–privileges 枚举数据库管理系统用户的权限<br>–roles 枚举数据库管理系统用户的角色<br>–dbs 枚举数据库管理系统数据库<br>–tables 枚举的DBMS数据库中的表<br>–columns 枚举DBMS数据库表列<br>–dump 转储数据库管理系统的数据库中的表项<br>–dump-all 转储所有的DBMS数据库表中的条目<br>–search 搜索列（S），表（S）和/或数据库名称（S）<br>-D DB 要进行枚举的数据库名<br>-T TBL 要进行枚举的数据库表<br>-C COL 要进行枚举的数据库列<br>-U USER 用来进行枚举的数据库用户<br>–exclude-sysdbs 枚举表时排除系统数据库<br>–start=LIMITSTART 第一个查询输出进入检索<br>–stop=LIMITSTOP 最后查询的输出进入检索<br>–first=FIRSTCHAR 第一个查询输出字的字符检索<br>–last=LASTCHAR 最后查询的输出字字符检索<br>–sql-query=QUERY 要执行的SQL语句<br>–sql-shell 提示交互式SQL的shell<br>Brute force（蛮力）： 这些选项可以被用来运行蛮力检查。<br>–common-tables 检查存在共同表<br>–common-columns 检查存在共同列<br>User-defined function injection（用户自定义函数注入）： 这些选项可以用来创建用户自定义函数。<br>–udf-inject 注入用户自定义函数<br>–shared-lib=SHLIB 共享库的本地路径<br>File system access（访问文件系统）： 这些选项可以被用来访问后端数据库管理系统的底层文件系统。<br>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件<br>–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件<br>–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径<br>Operating system access（操作系统访问）： 这些选项可以用于访问后端数据库管理系统的底层操作系统。 –os-cmd=OSCMD 执行操作系统命令<br>–os-shell 交互式的操作系统的shell<br>–os-pwn 获取一个OOB shell，meterpreter或VNC<br>–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC<br>–os-bof 存储过程缓冲区溢出利用<br>–priv-esc 数据库进程用户权限提升<br>–msf-path=MSFPATH Metasploit Framework本地的安装路径<br>–tmp-path=TMPPATH 远程临时文件目录的绝对路径<br>Windows注册表访问：可以被用来访问后端数据库管理系统Windows注册表。<br>–reg-read 读一个Windows注册表项值<br>–reg-add 写一个Windows注册表项值数据<br>–reg-del 删除Windows注册表键值<br>–reg-key=REGKEY Windows注册表键<br>–reg-value=REGVAL Windows注册表项值<br>–reg-data=REGDATA Windows注册表键值数据<br>–reg-type=REGTYPE Windows注册表项值类型<br>General（一般）： 这些选项可以用来设置一些一般的工作参数。<br>-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中<br>-s SESSIONFILE 保存和恢复检索会话文件的所有数据<br>–flush-session 刷新当前目标的会话文件<br>–fresh-queries 忽略在会话文件中存储的查询结果<br>–eta 显示每个输出的预计到达时间<br>–update 更新SqlMap<br>–save file保存选项到INI配置文件<br>–batch 从不询问用户输入，使用所有默认配置。<br>Miscellaneous（杂项）：<br>–beep 发现SQL注入时提醒<br>–check-payload IDS对注入payloads的检测测试<br>–cleanup SqlMap具体的UDF和表清理DBMS<br>–forms 对目标URL的解析和测试形式<br>–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果<br>–page-rank Google dork结果显示网页排名（PR）<br>–parse-errors 从响应页面解析数据库管理系统的错误消息<br>–replicate 复制转储的数据到一个sqlite3数据库<br>–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址<br>–wizard 给初级用户的简单向导界面</p><p>#Nmap<br> Nmap(“Network Mapper(网络映射器)”) 是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个 主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些 主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)， 它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核， 许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息， 管理服务升级计划，以及监视主机和服务的运行。<br> Nmap输出的是扫描目标的列表，以及每个目标的补充信息，至于是哪些信息则依赖于所使用的选项。“所感兴趣的端口表格”是其中的关键。那张表列出端口号，协议，服务名称和状态。状态可能是 open(开放的)，filtered(被过滤的)，closed(关闭的)，或者unfiltered(未被过滤的)。Open(开放的)意味着目标机器上的应用程序正在该端口监听连接/报文。 filtered(被过滤的) 意味着防火墙，过滤器或者其它网络障碍阻止了该端口被访问，Nmap无法得知 它是 open(开放的) 还是 closed(关闭的)。 closed(关闭的) 端口没有应用程序在它上面监听，但是他们随时可能开放。 当端口对Nmap的探测做出响应，但是Nmap无法确定它们是关闭还是开放时，这些端口就被认为是 unfiltered(未被过滤的) 如果Nmap报告状态组合 open|filtered 和 closed|filtered时，那说明Nmap无法确定该端口处于两个状态中的哪一个状态。 当要求进行版本探测时，端口表也可以包含软件的版本信息。当要求进行IP协议扫描时 (-sO)，Nmap提供关于所支持的IP协议而不是正在监听的端口的信息。<br>       除了所感兴趣的端口表，Nmap还能提供关于目标机的进一步信息，包括反向域名，操作系统猜测，设备类型，和MAC地址</p><p>#BurpSuite</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid布局教程</title>
      <link href="/2020/05/07/Grid%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2020/05/07/Grid%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex 布局教程</title>
      <link href="/2020/05/07/Flex%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2020/05/07/Flex%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Flex布局<br>Flex英文为flexiable box,翻译为弹性盒子,Flex布局即弹性布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">/*水平方向，左端对齐*/</span><br><span class="line">flex-direction: row;</span><br><span class="line">/*水平方向，右端对齐*/</span><br><span class="line">    flex-direction: row-reverse;</span><br><span class="line">    /*垂直方向，顶部对齐*/</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    /*垂直方向，底部对齐*/</span><br><span class="line">    flex-direction: column-reverse;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">/*换行*/</span><br><span class="line">flex-wrap:nowrap;</span><br><span class="line">/*不换行,默认*/</span><br><span class="line">    flex-wrap:wrap;</span><br><span class="line">    /*换行,第一行在下方*/</span><br><span class="line">    flex-wrap:wrap-reverse;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*默认，项目左对齐*/</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*项目右对齐*/</span><br><span class="line">    justify-content: flex-end;</span><br><span class="line">    /*项目居中对齐*/</span><br><span class="line">    justify-content: center;</span><br><span class="line">    /*项目两端对齐*/</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    /*每个项目两侧的间隔相等*/</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*纵轴的顶部对齐*/</span><br><span class="line">    align-items: flex-start;</span><br><span class="line">    /*纵轴的底部对齐*/</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">    /*纵轴的中点对齐*/</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*项目的第一行文字的基线对齐*/</span><br><span class="line">    align-items: baseline;</span><br><span class="line">    /*默认对齐方式，如果项目未设置高度或设为auto，将占满整个容器的高度*/</span><br><span class="line">    align-items: stretch;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.item:nth-of-type(2n)&#123;</span><br><span class="line">height: 50px;</span><br><span class="line">padding-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试5&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试6&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试7&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*纵轴的顶部对齐*/</span><br><span class="line">    align-items: flex-start;</span><br><span class="line">    /*纵轴的底部对齐*/</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">    /*纵轴的中点对齐*/</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*项目的第一行文字的基线对齐*/</span><br><span class="line">    align-items: baseline;</span><br><span class="line">    /*默认对齐方式，如果项目未设置高度或设为auto，将占满整个容器的高度*/</span><br><span class="line">    align-items: stretch;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试5&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试6&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试7&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菲利普·卡兹</title>
      <link href="/2020/03/20/%E8%8F%B2%E5%88%A9%E6%99%AE%C2%B7%E5%8D%A1%E5%85%B9/"/>
      <url>/2020/03/20/%E8%8F%B2%E5%88%A9%E6%99%AE%C2%B7%E5%8D%A1%E5%85%B9/</url>
      
        <content type="html"><![CDATA[<p>2000年4月14日，在美国威斯康星州密尔沃基的一家汽车旅馆里，人们发现了一具年轻人的尸体，检查得知这个人的死因是酗酒、饮酒过量导致急性脾出血。死者被发现的时候，手中还握着一个空酒瓶，房间中还有五个空酒瓶。这样一个酒徒的死也许在平时只是地方小报上的一条不起眼的新闻，但这个人的死却在互联网上掀起了轩然大波。无数人在网上发表评论与文章，纪念他的离开，寄托人们的哀思，因为他不是一个普通人，他叫菲利普·卡兹（Philip Katz），几乎全世界的每一台个人电脑上都有用他创造的压缩算法生成的文档，这种文档的后缀是“.zip”，这些文档的的开头都嵌有他姓名的字头缩写字母‘PK’。这位在全世界的电脑中留下痕迹的天才程序员终年仅37岁。<br>菲尔·卡茨毕业于威斯康辛大学密尔沃基分校计算机系。 大学毕业后，菲尔·卡茨开始从事编程工作并寻求开发一种比当时的ARC更好的压缩软件PKARC。PKARC的编程使用了汇编语言，比使用C语言的ARC快得多。PKARC压缩软件因此很快流行开来。<br><img src="/images/28.jpg" alt><br><img src="/images/29.jpg" alt><br><img src="/images/30.jpg" alt><br><img src="/images/31.jpg" alt><br><img src="/images/32.jpg" alt><br><img src="/images/33.jpg" alt><br><img src="/images/34.jpg" alt><br><img src="/images/35.jpg" alt><br><img src="/images/36.jpg" alt><br><img src="/images/37.jpg" alt><br><img src="/images/38.jpg" alt><br><img src="/images/39.jpg" alt><br>那时候互联网还刚刚开始有了雏形，而最流行的是一种使用电话线拨号登陆别人在家里搭建的服务平台——交换信息的电子公告牌（BBS）系统。这种系统有些类似现在的论坛和新闻组，由于站长之间互相转信也成为了一个庞大的信息网络（惠多网）。老一点的玩家可能都有印象，在没有Internet的年代，中国大地上也曾有几十个这样的BBS存在，这种方式不但可以传递文本信息，也可以由用户上传文件到站点的计算机以供其他用户下载。由于电话线的接入速度慢的可怜，通过BBS传输较大文件实在是叫人痛苦的一件事。于是，使用文件压缩技术减小文件的体积并将多个文件压缩到一个封包中就成为了BBS用户的一项必须掌握的技巧。当时的美国BBS上，比较流行的是一种叫做ARC的压缩技术，由于它是一家商业公司开发的压缩技术，使用这种软件进行工作是需要付费的。那时候的菲利普·卡兹是一个沉迷于BBS上的毛头小伙，由于经常混迹于BBS上，对于ARC的收费非常不满的他自己开发了一个程序叫PKARC，这个程序于ARC完全兼容，可以压缩和解压缩ARC文件。这样一来，大批的ARC用户自然转而使用菲利普·卡兹的免费软件。ARC的制作公司一怒之下将菲利普·卡兹告上了法庭，法庭自然判决菲利普·卡兹禁止继续开发和传播PKARC。这种判决并没有磨灭菲利普·卡兹的斗志，而是激起了他要与ARC斗争到底的决心。在虚拟的世界中，自由、平等永远是真正的程序员永久的追求。他放弃了PKARC的开发，发誓要写出一款比ARC更好的压缩软件来打败ARC。这一场官司造就了一名编程天才的横空出世，也造就了一个后来在互联网时代的文件标准。几周以后，后来统治整个BBS世界乃至Internet世界的ZIP格式在菲利普·卡兹手中发出了第一声响亮的啼哭！<br>1985年一家名为SEA（System Enhancement Associates，系统增强伙伴）的小公司开发了一个在MS-DOS平台下的商业压缩软件，名为ARC。当时的软件发行方式与现在略有不同，用户购买了软件，除了得到软件的可执行文件还包括一份C语言的源代码。当时的卡茨与很多用计算机的平民一样，缺乏资金购买大量的商业软件，当时卡茨从网上下载了一份ARC的C语言源代码，并用汇编语言将其全新编写并编译出来。卡茨将这个软件名为：PKARC（Phillip Katz’ ARC）。卡茨制作的新软件PKARC因为是参照源代码编写的，所以完全兼容ARC并且性能上比ARC高。卡茨当时将这个新软件上传到网络上面。显然，卡茨此举造成对SEA公司的侵权。SEA最初希望通过联络卡茨使PKARC成为SEA公司旗下的一款产品，后来卡茨拒绝了。最终，双方对簿公堂，结果是卡茨败诉，卡茨被判以对SEA公司的赔款以及停止发放PKARC。后来，卡茨在研发过程中的PKARC续作也被迫重新改写所有代码，PKARC其实就是下文提及的PKZIP的前身，但卡茨没有从PKARC赚到一分钱<br>1986年，菲尔·卡茨创建了PKWARE公司并又研发出PKPAK。在PKPAK之后，菲尔·卡茨又研发出新一代的产品PKZIP（ZIP），并以共享软件的模式销售。这使他成为最有名的共享软件发明者之一。<br>一鸣惊人，这种名为PKZIP的程序可以将一个或多个文件压缩到一个后缀为“.zip”的文件中，无论从压缩比、压缩速度方面都超过了商业软件ARC。卡兹将PKZIP作为自由软件免费发放，使其如同草原上的星星之火般在全美的各大BBS上蔓延开来，用户以几何级数的增长，各大BBS的站长自发将原来使用ARC格式压缩的文件转换成ZIP格式，卡兹用他天才的头脑和顽强的毅力堂堂正正的击败了ARC，ARC的制作公司在PKZIP的强大攻势下很快就销声匿迹了。用自由软件打败商业公司的传奇故事很快传遍了整个BBS世界，疾恶如仇而又身手不凡的菲利普·卡兹如同数字世界的大侠般仗剑江湖，劫富济贫，以一人之力擎起了压缩软件的大旗。这段被人们津津乐道的传奇故事使菲利普·卡兹成为了很多热衷于编程的年轻人心中的偶像。此后卡兹一直继续着对PKZIP的开发和维护工作，PKZIP建立和统治了DOS时代的压缩标准。直到Windows的诞生，使用卡兹创造的压缩算法的软件Winzip的出现更使ZIP格式成为Internet的传输标准，ZIP格式也成为压缩文档的事实标准<br>2000年4月14日，美国威斯康星州密尔沃基的一家汽车旅馆里,菲尔·卡茨因饮酒过量导致急性脾出血而死<br>可惜，这位天才程序员却从未在ZIP格式身上得到半点好处，坚持信念的结果往往是潦倒的生活，糟糕的个人生活和长期编写软件的巨大压力使卡兹染上了酗酒的恶习，最终断送了他那年轻的生命。他为世界贡献了一个伟大的免费软件，更为重要的是他缔造了一种大众化的压缩格式，然而却过早地离开了这个世界。他的名字也许多年后会被人们忘怀，但他创造的ZIP将在网上生生不息的流传，他的名字缩写嵌在了全世界数以千万的电脑中，他的传奇故事将永远流传</p>]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB入门指南</title>
      <link href="/2020/03/09/MongoDB%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/09/MongoDB%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB?"></a>什么是MongoDB?</h1><p>MongoDB是由C++语言编写的,是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下,添加更多的节点,可以保证服务器性能。<br>MongoDB旨在为WEB应用提供可扩展的高性能数据存储解决方案</p><p>#文档数据库<br>MongoDB中的记录是一个文档，它是由字段和值对组成的数据结构。MongoDB文档类似于JSON对象。字段的值可以包括其他文档、数组和文档数组。<br><img src="/images/48.png" alt><br>使用文档的优点是：</p><ul><li>文档（即对象）在许多编程语言中对应于本机数据类型。</li><li>嵌入式文档和数组减少了对昂贵连接的需求</li><li>动态模式支持流畅的多态性</li></ul><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>MongoDB提供了高性能的数据持久性。<br>对嵌入式数据模型的支持减少了数据库系统上的I/O活动。<br>索引支持更快的查询，并且可以包括来自嵌入式文档和数组的键</p><h2 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h2><p>MongoDB的复制工具(称为副本集)提供：</p><ul><li>自动故障转移和</li><li>数据冗余</li></ul><h1 id="MongoDB-CRUD操作"><a href="#MongoDB-CRUD操作" class="headerlink" title="MongoDB CRUD操作"></a>MongoDB CRUD操作</h1><h2 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h2><h2 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h2><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试宝典</title>
      <link href="/2020/03/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
      <url>/2020/03/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义View教程</title>
      <link href="/2020/03/04/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%95%99%E7%A8%8B/"/>
      <url>/2020/03/04/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Android中有两种坐标系，分别称之为Android坐标系和视图坐标系,而对应的方法获取坐标系的坐标值,以下是作出区别:<br>Android的坐标系是什么样的?<br>屏幕上的默认坐标系如下：<br>注:长方形代指屏幕</p><h2 id="Android坐标系"><a href="#Android坐标系" class="headerlink" title="Android坐标系"></a>Android坐标系</h2><p><img src="/images/43.png" alt><br>O代指原点,X代指X轴,Y代指Y轴,在触控事件中,使用getRawX()和getRawY()方法<br>获取的坐标就是以这个坐标系为标准下的坐标值</p><h2 id="视图坐标系"><a href="#视图坐标系" class="headerlink" title="视图坐标系"></a>视图坐标系</h2><p><img src="/images/44.png" alt><br>O代指原点,X代指X轴,Y代指Y轴,在触控事件中,通过<br>getX()和getY()来获取的坐标值就是视图坐标系中的坐标值<br>以下这图清晰表示所获取的方法用从哪里到哪里,这三个黑色框框代表不同的意思:最外层代指的是屏幕,中间层代指的是ViewGroup,最内层代指的是ViewGroup放置的View<br>所标识的方法可以分两类,一类是View提供的方法,一类是MotionEvent提供的方法<br><img src="/images/45.png" alt><br>View提供的获取的坐标以及距离的方法：<br>getTop() 获取子类View左上角距父View顶部的距离<br>getLeft() 获取子类View左上角距父View左侧的距离<br>getRight() 获取子类View右上角距父View左侧的距离<br>getBottom() 获取子类View右上角距父View顶部的距离<br>MotionEvent提供的方法(get和getRaw的区别)：<br>getX() 触摸点距离所在控件左边的距离,即视图坐标<br>getY() 触摸点距离所在控件顶边的距离,即视图坐标<br>getRawX() 触摸点距离相对于屏幕左边坐标的距离,即绝对坐标<br>getRawY() 触摸点距离相对于屏幕顶边坐标的距离,即绝对坐标</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app入门指南</title>
      <link href="/2020/02/28/uni-app%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/28/uni-app%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>uni-app是一个使用Vue.js开发跨平台应用的前端框架，开发者编写一套代码，可编译到的iOS，安卓，H5，小程序等多个平台<br>首先开发者需先下载安装<br>HBuilderX官网:<a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">https://www.dcloud.io/hbuilderx.html</a><br>在HBuilderX 点击工具栏里的文件 - &gt;新建 - &gt;项目：<br>选择uni-app，输入工程名,点击创建，即可成功创建uni-app<br><img src="/images/39.PNG" alt><br>项目目录<br><img src="/images/40.PNG" alt></p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman安装与使用</title>
      <link href="/2020/02/28/Postman%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/28/Postman%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h1><p>postman在做接口测试方面，发挥着越来越重大的作用，其支持多种请求方式、并可以模拟各种类型的数据请求类型，在实际开发中使用它可以极大的提高开发的效率</p><h1 id="postman其主要功能包括："><a href="#postman其主要功能包括：" class="headerlink" title="postman其主要功能包括："></a>postman其主要功能包括：</h1><ul><li>模拟各种HTTP requests<br>从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …还可以发送文件、送出额外的 header</li><li>Collection 功能（测试集合）<br>Collection 是 requests的集合，在做完一个测试后， 可以把这次的 request 存到特定的 Collection 里面，下次要做同样的测试时，就不需要重新输入<br>一个collection可以包含多条request，如果把一个request当成一个test case，那collection就可以看成是一个test suite<br>通过collection的归类，可以良好的分类测试软件所提供的API<br>Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起来的 Collection</li><li>人性化的Response整理<br>Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都会整理成可以阅读的格式</li><li>内置测试脚本语言<br>Postman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果</li><li>设定变量与环境<br>Postman 可以自由 设定变量与Environment，一般在编辑request，校验response的时候，总会需要重复输入某些字符，比如URL，postman允许设定变量来保存这些值。并且把变量保存在不同的环境中</li></ul><h1 id="官网安装-https-www-getpostman-com"><a href="#官网安装-https-www-getpostman-com" class="headerlink" title="官网安装:https://www.getpostman.com"></a>官网安装:<a href="https://www.getpostman.com" target="_blank" rel="noopener">https://www.getpostman.com</a></h1><p><img src="/images/32.png" alt></p><h1 id="非官方安装："><a href="#非官方安装：" class="headerlink" title="非官方安装："></a>非官方安装：</h1><p>安装（安装到chrome插件）<br>在安装时，最好是通过chrome浏览器打开chrome网上应用店直接添加到chrome插件中<br>进入chrome网上应用店，可以通过谷歌访问助手访问，大体步骤如下：</p><ul><li>打开chrome浏览器的chrome网上应用店，搜索postman</li><li>点击添加至CHROME</li></ul><p>如果是直接从网上先把postman下载安装chrome上去<br><img src="/images/33.png" alt><br>更名：将.crx文件更改文件名为.zip或者.rar，进行解压<br>拷贝：将解压出的文件夹拷贝到你自定义的文件夹中<br>加载程序：在 Chrome 浏览器中选择 “更多工具”—“扩展程序”—“加载已解压的扩展程序”</p><h1 id="Postman主界面"><a href="#Postman主界面" class="headerlink" title="Postman主界面:"></a>Postman主界面:</h1><p><img src="/images/34.png" alt></p><h1 id="请求方式的特点"><a href="#请求方式的特点" class="headerlink" title="请求方式的特点"></a>请求方式的特点</h1><p>在postman中常用的请求方式为get、post、put、patch、delete、head等</p><ul><li>GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）</li><li>POST请求：向指定资源提交数据进行处理请求，数据被包含在请求体中。POST请求可能会导致新的资源的建立、已有资源的修改。（通常用来发送数据）</li><li>HEAD请求：类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li>PUT请求：从客户端向服务器传送的数据取代指定的文档的内容</li><li>DELETE请求：请求服务器删除指定的页面。</li><li>CONNECT请求：能够将连接改为管道方式的代理服务器</li><li>OPTIONS请求：允许客户端查看服务器的性能</li><li>TRACE请求：显示服务器收到的请求，主要用于测试或诊断</li><li>接口调用传参方式：key-value参数形式，Json串传参形式</li><li>key-value参数：把参数拼接在url的后面由?相连，多个参数之间用&amp;相连</li><li>Json串传参：需要在请求的body写中，入Json格式参数<br><img src="/images/35.png" alt></li></ul><h2 id="GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）"><a href="#GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）" class="headerlink" title="GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）"></a>GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）</h2><p><img src="/images/36.png" alt></p><p>##POST请求：向指定资源提交数据进行处理请求，数据被包含在请求体中。POST请求可能会导致新的资源的建立、已有资源的修改。（通常用来发送数据）</p><h2 id="Body：设置POST请求的参数"><a href="#Body：设置POST请求的参数" class="headerlink" title="Body：设置POST请求的参数"></a>Body：设置POST请求的参数</h2><ul><li>form-data： HTTP请求中的multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开</li><li>x-wwww-form-urlencode：HTTP请求中的application/x-www-from-urlencoded，会将表单内的数据转换为键值对</li><li>raw：可以发送任意格式的接口数据，可以text、json、xml、html等</li><li>binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传</li></ul><h2 id="binary：HTTP请求中的相Content-Type-application-octet-stream，只可以发送二进制数据。通常用于文件的上传"><a href="#binary：HTTP请求中的相Content-Type-application-octet-stream，只可以发送二进制数据。通常用于文件的上传" class="headerlink" title="binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传"></a>binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传</h2><p><img src="/images/37.png" alt></p><h2 id="rows可以上传任意格式的文本，可以上传text、json、xml、html等"><a href="#rows可以上传任意格式的文本，可以上传text、json、xml、html等" class="headerlink" title="rows可以上传任意格式的文本，可以上传text、json、xml、html等"></a>rows可以上传任意格式的文本，可以上传text、json、xml、html等</h2><p><img src="/images/38.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax入门指南</title>
      <link href="/2020/02/18/Ajax%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/18/Ajax%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h1><p>AJAX=Asynchronous JavaScript and XML（异步的JavaScript和XML）<br>AJAX不是新的编程语言,而是一种使用现有标准的新方法<br>AJAX是与服务器交换数据并更新部分网页的艺术,在不重新加载整个页面的情况下<br>AJAX不需要任何浏览器插件,但需要用户允许JavaScript在浏览器上执行<br><img src="/images/2.gif" alt><br>XMLHttpRequest是 AJAX 的基础。<br>XMLHttpRequest对象<br>所有现代浏览器均支持XMLHttpRequest对象（IE5 和 IE6 使用 ActiveXObject）<br>XMLHttpRequest用于在后台与服务器交换数据<br>这意味着可以在不重新加载整个网页的情况下,对网页的某部分进行更新<br>为了应对所有的现代浏览器,包括IE5和IE6,请检查浏览器是否支持 XMLHttpRequest对象<br>如果支持,则创建XMLHttpRequest对象。如果不支持,则创建ActiveXObject:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">if (window.XMLHttpRequest)</span><br><span class="line">  &#123;IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">//创建XMLHttpRequest对象的语法:</span><br><span class="line">  xmlhttp=new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">  &#123;code for IE6, IE5</span><br><span class="line">//老版本的 Internet Explorer(IE5和IE6)使用ActiveX对象:</span><br><span class="line">  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>向服务器发送请求<br>将请求发送到服务器,我们使用XMLHttpRequest对象的open()和send()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;ajax.txt&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>请求的网址、请求方法get/post<br>提交请求的内容数据、请求主体等<br>接收响应回来的内容<br>发送Ajax请求的五个步骤:<br>1.创建异步对象。即 XMLHttpRequest 对象。<br>2.设置请求的参数。包括：请求的方法、请求的url。<br>3.发送请求<br>4.注册事件,onreadystatechange事件,状态改变时就会调用在数据完整请求回来的时候才调用，需要写一些判断的逻辑<br>5.获取返回的数据</p><h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function load()&#123;</span><br><span class="line"></span><br><span class="line">            var xmlhttp;</span><br><span class="line">            if(window.XMLHttpRequest)&#123;</span><br><span class="line">      //  (1)创建异步对象</span><br><span class="line">         xmlhttp = new XMLHttpRequest();     </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">// (2)设置请求的参数。包括：请求的方法、请求的url。</span><br><span class="line">      xmlhttp.open(&quot;GET&quot;,&apos;ajax.txt&apos;,true);</span><br><span class="line">//(3)发送请求</span><br><span class="line">      xmlhttp.send();</span><br><span class="line">//(4)注册事件</span><br><span class="line"> onreadystatechange事件,状态改变时就会调用</span><br><span class="line">        //在数据完整请求回来的时候才调用,写一些判断的逻辑</span><br><span class="line">         /* </span><br><span class="line">    readyState</span><br><span class="line">        0: 请求未初始化</span><br><span class="line">        1: 服务器连接已建立</span><br><span class="line">        2: 请求已接收</span><br><span class="line">        3: 请求处理中</span><br><span class="line">        4: 请求已完成，且响应已就绪</span><br><span class="line">    status</span><br><span class="line">        200 OK</span><br><span class="line">        404 Not Found</span><br><span class="line">    */</span><br><span class="line">      xmlhttp.onreadystatechange = function()&#123;</span><br><span class="line">        if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123;</span><br><span class="line">//(5)在注册的事件中,获取返回的内容,并修改页面的显示</span><br><span class="line">            document.getElementById(&quot;Div&quot;).innerHTML = xmlhttp.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;Div&quot;&gt;&lt;h3&gt;修改文本的内容&lt;/h3&gt;&lt;/div&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; onclick=&quot;load()&quot;&gt;修改文本&lt;/button&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="异步-True或False？"><a href="#异步-True或False？" class="headerlink" title="异步-True或False？"></a>异步-True或False？</h2><p>AJAX指的是异步JavaScript和XML（Asynchronous JavaScript and XML）<br>XMLHttpRequest对象如果要用于 AJAX 的话,其 open() 方法的 async 参数必须设置为true:<br>通过AJAX,JavaScript无需等待服务器的响应,而是:<br>1.在等待服务器响应时执行其他脚本<br>2.当响应就绪后对响应进行处理</p><h2 id="PHP与AJAX"><a href="#PHP与AJAX" class="headerlink" title="PHP与AJAX"></a>PHP与AJAX</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    ul li&#123;</span><br><span class="line">       list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;获取 json 数据&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;获取json&quot; id=&apos;ajax&apos;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // 获取的是一个数据</span><br><span class="line">    // document.querySelectorAll(selector)</span><br><span class="line">    //如果要获取多个数据</span><br><span class="line">    document.querySelector(&quot;#ajax&quot;).onclick = function () &#123;</span><br><span class="line">        var ajax = new XMLHttpRequest();</span><br><span class="line">        ajax.open(&apos;get&apos;,&apos;ajax.php&apos;);</span><br><span class="line">        ajax.send();</span><br><span class="line">        ajax.onreadystatechange = function () &#123;</span><br><span class="line">            if (ajax.readyState==4&amp;&amp;ajax.status==200) &#123;</span><br><span class="line">                // json 字符串 是字符串 所以我们可以 通过  responseText获取</span><br><span class="line">                console.log(ajax.responseText);</span><br><span class="line">                // 转化为 js对象</span><br><span class="line">                var Obj = JSON.parse(ajax.responseText);</span><br><span class="line">                console.log(Obj);</span><br><span class="line">                // 拼接ul s</span><br><span class="line">                var str = &apos;&apos;;</span><br><span class="line">                str+=&apos;&lt;ul&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.name+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.age+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.sex+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;ul&gt;&apos;;</span><br><span class="line">               //设置到页面</span><br><span class="line">                document.body.innerHTML = str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>ajax.php:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo  file_get_contents(&apos;package.json&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小明&quot;,</span><br><span class="line">  &quot;age&quot;:&quot;14&quot;,</span><br><span class="line">  &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回json格式"><a href="#返回json格式" class="headerlink" title="返回json格式"></a>返回json格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;select id=&quot;city&quot;&gt;&lt;/select&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;获取&quot; id=&quot;get&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var get = document.getElementById(&quot;get&quot;);</span><br><span class="line">    var city = document.getElementById(&quot;city&quot;);</span><br><span class="line"> </span><br><span class="line">    get.onclick = function () &#123;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseText服务器响应的内容</span><br><span class="line">          //通过eval把传来的json字符串转成对象</span><br><span class="line">          var data = eval(this.responseText);</span><br><span class="line">          var str = &quot;&quot;;</span><br><span class="line">          for(var ix in data) &#123;</span><br><span class="line">            str += &quot;&lt;option value=&apos;&quot; + data[ix].id + &quot;&apos;&gt;&quot; + data[ix].name + &quot;&lt;/option&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          city.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;get&quot;, url, true);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(null);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data = array(</span><br><span class="line">  array(&apos;id&apos; =&gt; 1, &apos;name&apos; =&gt; &apos;上海&apos;),</span><br><span class="line">  array(&apos;id&apos; =&gt; 2, &apos;name&apos; =&gt; &apos;北京&apos;),</span><br><span class="line">  array(&apos;id&apos; =&gt; 3, &apos;name&apos; =&gt; &apos;深圳&apos;),</span><br><span class="line">);</span><br><span class="line">echo json_encode($data);</span><br></pre></td></tr></table></figure><h2 id="返回xml格式"><a href="#返回xml格式" class="headerlink" title="返回xml格式"></a>返回xml格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;news&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;获取&quot; id=&quot;get&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var get = document.getElementById(&quot;get&quot;);</span><br><span class="line">    var news = document.getElementById(&quot;news&quot;);</span><br><span class="line"> </span><br><span class="line">    get.onclick = function () &#123;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseXML服务器响应的内容</span><br><span class="line">          var data = this.responseXML;</span><br><span class="line">          var str = &quot;&quot;;</span><br><span class="line">          var title = data.getElementsByTagName(&quot;title&quot;);</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[0].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[1].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[2].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          news.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;get&quot;, url, true);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(null);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;Content-Type: text/xml;charset=utf-8&apos;);</span><br><span class="line">$xml = &lt;&lt;&lt;EOD</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;news&gt;</span><br><span class="line">  &lt;title&gt;111&lt;/title&gt;</span><br><span class="line">  &lt;title&gt;222&lt;/title&gt;</span><br><span class="line">  &lt;title&gt;333&lt;/title&gt;</span><br><span class="line">&lt;/news&gt;</span><br><span class="line">EOD;</span><br><span class="line">echo $xml;</span><br></pre></td></tr></table></figure><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot; id=&quot;name&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;password&quot; name=&quot;pwd&quot; value=&quot;&quot; id=&quot;pwd&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; name=&quot;sub&quot; value=&quot;提交&quot; id=&quot;sub&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var sub = document.getElementById(&quot;sub&quot;);</span><br><span class="line"></span><br><span class="line">    sub.onclick = function () &#123;</span><br><span class="line">      var name = document.getElementById(&quot;name&quot;).value;</span><br><span class="line">      var pwd = document.getElementById(&quot;pwd&quot;).value;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseText服务器响应的内容</span><br><span class="line">          alert(&quot;服务器响应数据：&quot; + this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;post&quot;, url, true);</span><br><span class="line">      //设置请求头部</span><br><span class="line">      xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(&quot;name=&quot; + name + &quot;&amp;pwd=&quot; + pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name = !empty($_POST[&apos;name&apos;]) ? trim($_POST[&apos;name&apos;]) : &apos;没有数据&apos;;</span><br><span class="line">$pwd = !empty($_POST[&apos;pwd&apos;]) ? trim($_POST[&apos;pwd&apos;]) : &apos;没有数据&apos;;</span><br><span class="line">echo &apos;用户名：&apos;, $name, &apos;密码：&apos;, $pwd;</span><br></pre></td></tr></table></figure><h1 id="封装原生Ajax请求"><a href="#封装原生Ajax请求" class="headerlink" title="封装原生Ajax请求"></a>封装原生Ajax请求</h1><h2 id="封装get请求"><a href="#封装get请求" class="headerlink" title="封装get请求"></a>封装get请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  &#123;String&#125; url  请求后台的地址</span><br><span class="line"> *  &#123;Function&#125; callback  请求成之后，返回数据成功，并且调用此方法，这个方法接受一个参数就是后台返回的数据。</span><br><span class="line"> *function ajaxPost(url, data, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;POST&apos;, url, true);</span><br><span class="line">  xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">  xhr.send(data);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxPost(&apos;/api/user&apos;, &apos;id=9&amp;com=aicoder&apos;, function (data) &#123;</span><br><span class="line">  // 后台返回的数据就是 字符串类型。要转成json，必须自己手动转换</span><br><span class="line">  var user = JSON.parse(data);</span><br><span class="line">  console.log(user.id);</span><br><span class="line">  console.log(user.com);</span><br><span class="line">&#125;);</span><br><span class="line"> @return undefined</span><br><span class="line"> */</span><br><span class="line">function ajaxGet(url, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;GET&apos;, url, true);</span><br><span class="line">  xhr.send();</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxGet(&apos;/user.json&apos;, function (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="封装post请求"><a href="#封装post请求" class="headerlink" title="封装post请求"></a>封装post请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function ajaxPost(url, data, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;POST&apos;, url, true);</span><br><span class="line">  xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">  xhr.send(data);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxPost(&apos;/api/user&apos;, &apos;id=9&amp;com=aicoder&apos;, function (data) &#123;</span><br><span class="line">  // 后台返回的数据就是 字符串类型。要转成json，必须自己手动转换</span><br><span class="line">  var user = JSON.parse(data);</span><br><span class="line">  console.log(user.id);</span><br><span class="line">  console.log(user.com);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>所谓的同源，指的是协议，域名，端口相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读写对方的资源,如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://example.com    和     https://example.com 不同，因为协议不同 </span><br><span class="line"></span><br><span class="line">http://localhost:8080     和    http://localhost:1000 不同，因为端口不同 </span><br><span class="line"></span><br><span class="line">http://localhost:8080     和      https://example.com 不同，协议、域名、端口号都不同</span><br></pre></td></tr></table></figure><h1 id="跨域HTTP请求"><a href="#跨域HTTP请求" class="headerlink" title="跨域HTTP请求"></a>跨域HTTP请求</h1><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><p>当请求的资源的URL与当前页面的URL中的scheme、hostname、port有一个不同的时候就算是跨域操作。请参见上面的同源<br>因为有同源策略的限制，XMLHttpRequest仅可以发起操作同域(同源)下的请求。虽然这个限制关闭了安全漏洞但是也阻止了大量合法的适合使用的跨域请求。不过这种情况下也可以在页面中使用img、form、iframe等元素中使用跨域URL，最中在浏览器中显示这些数据。但是因为同源策略，浏览器不允许操作或者不能良好的显示跨域文档内容<br>如果此处使用XMLHttpRequest来操作跨域请求，那么所有的文档内容都将在responseText属性中暴露，所以同源策略不允许XMLHttpRequest进行跨域请求。<br>注意：img元素会把返回的内容强制转换为图片。iframe元素不允许操作跨域数据<br>但是需要强调的是script元素并未真正受到同源策略的限制，因为script有可能需要加载不同域的javascript资源。需要加载并执行任何来源的脚本。正因为如此，script的灵活性使其成为在跨域操作中代替XMLHttpRequest的主流Ajax传输协议：JSONP</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>script元素可以作为一种Ajax传输协议，只需设置script元素的src属性并且插入到DOM中，浏览器就会发出一个HTTP请求到src属性所指向的URL。使用script元素进行Ajax传输的一个主要原因就是因为它不受同源策略的影响。因此可以发送一个不同源的请求。而另外一个原因就是用script元素会自动解码并执行(浏览器会当做javascript来处理)下载的数据</p><blockquote><p>JSONP带来的安全性考虑：<br>为了使用script元素来进行Ajax传输，你必须允许web页面信任并执行目标服务器返回过来的任何数据。这意味这对于不信任的服务器，不应该采取该技术。在与信任的服务器交互是还要提防攻击者可能会进入服务器中。所以作为Ajax数据传输的script与可信的服务器交互，是相当危险的事情</p></blockquote><p>JSONP(JSON with Padding) 是一种跨域请求方式。主要原理是利用了script 标签可以跨域请求的特性，由其 src 属性发送请求到服务器，服务器返回 JavaScript 代码，浏览器接受响应，然后就直接执行了，这和通过 script 标签引用外部文件的原理是一样的<br>JSONP由两部分组成：回调函数和数据，回调函数一般是在浏览器控制，作为参数发往服务器端（当然，你也可以固定回调函数的名字，但客户端和服务器端的名称一定要一致）。当服务器响应时，服务器端就会把该函数和数据拼成字符串返回。<br>JSONP的请求过程：</p><ul><li>请求阶段：浏览器创建一个 script 标签，并给其src 赋值(类似 <a href="http://example.com/api/?callback=jsonpCallback）" target="_blank" rel="noopener">http://example.com/api/?callback=jsonpCallback）</a></li><li>发送请求：当给script的src赋值时，浏览器就会发起一个请求。</li><li>数据响应：服务端将要返回的数据作为参数和函数名称拼接在一起(格式类似”jsonpCallback({name:’abc’})”)返回。当浏览器接收到了响应数据，由于发起请求的是 script，所以相当于直接调用 jsonpCallback 方法，并且传入了一个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//实现一个简单的JSONP请求</span><br><span class="line">//请求的url、包裹方法名称、回调函数</span><br><span class="line">function JSONP(url,callbackName,callback)&#123;</span><br><span class="line">    //为本次请求创建一个唯一的callback名称</span><br><span class="line">    var cbnum=&quot;cb&quot;+JSONP.count++; //计数器 生成一个唯一的名称</span><br><span class="line">    var cbname=&quot;JSONP.&quot;+cbnum; //作为JSONP方法的一个静态属性</span><br><span class="line"></span><br><span class="line">    if(url.indexOf(&quot;?&quot;)==-1)&#123;</span><br><span class="line">        url+=&quot;?&quot;+callbackName+&quot;=&quot;+cbname;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        url+=&quot;&amp;&quot;+callbackName+&quot;=&quot;+cbname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSONP[cbnum]=function(response)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            callback(response);</span><br><span class="line">        &#125;catch (ex)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            //执行完毕之后就删掉，因为没什么用了</span><br><span class="line">            delete JSONP[cbnum];</span><br><span class="line">            script.parentNode.removeChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var script=document.createElement(&quot;script&quot;);</span><br><span class="line">    script.src=url;</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">//初始化用于创建唯一名称的计数器</span><br><span class="line">JSONP.count=0;</span><br><span class="line"></span><br><span class="line">//发起JSONP请求。</span><br><span class="line">JSONP(&quot;http://suggestion.baidu.com/su?wd=xxx&quot;,&quot;cb&quot;,function(data)&#123;</span><br><span class="line">    //将百度返回的数据输出到控制台中</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>注意：当多次执行同一个url的JSONP操作时需要注意缓存问题</p><h1 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h1><p>由于浏览器的同源策略，限制了XMLHttpRequest的跨域请求的操作。但是在XHR2中浏览器选择允许发送合适的CORS(cross-origin resource sharing，跨域资源共享)来跨域请求数据。在标准浏览器中依旧使用XMLHttpRequest对象，而在IE8－9中则使用XDomainRequest对象来请求跨域资源。<br>虽然实现CORS不需要做任何事情，但是还有一些安全细节需要了解。首先，如果通过XMLHttpRequest的open()方法传入用户名和密码(详情见open方法)，那么它们绝不会通过跨域请求发送。另外跨域请求也不会包含其他任何的用户证书：cookie和HTTP身份认证的令牌(TOKEN)通常不会作为请求的内容发送<br>到对方的服务器且对方服务器返回任何数据(cookie以及其他的一些响应头)都将被丢弃。如果跨域请求必须需要传入这几种用户证书才能成功，那么就必须在调用send()方法之前设置XMLHttpRequest的WithCredentials为true，此属性默认为false。也可以检索XMLHttpRequest对象有没有该属性来判断是否它支持CORS操作</p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim入门指南</title>
      <link href="/2020/02/17/vim%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/17/vim%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h1><p>vim是从vi发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<br>简单的来说,vi是老式的字处理器,不过功能已经很齐全了，vim 则可以说是程序开发者的一项很好用的工具。<br>连vim的官方网站 (<a href="http://www.vim.org" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说Vim 是一个程序开发工具而不是文字处理软件</p><h1 id="vim键盘图"><a href="#vim键盘图" class="headerlink" title="vim键盘图:"></a>vim键盘图:</h1><p><img src="/images/23.png" alt></p><h1 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h1><p>基本上vi可以分为三种状态,分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode）,各模式的功能区分如下:<br><img src="/images/26.jpg" alt></p><h1 id="命令行模式-command-mode）"><a href="#命令行模式-command-mode）" class="headerlink" title="命令行模式(command mode）"></a>命令行模式(command mode）</h1><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><h1 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h1><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><h1 id="底行模式（last-line-mode）"><a href="#底行模式（last-line-mode）" class="headerlink" title="底行模式（last line mode）"></a>底行模式（last line mode）</h1><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串等。<br>把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</p><h1 id="vi的基本操作"><a href="#vi的基本操作" class="headerlink" title="vi的基本操作"></a>vi的基本操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">进入vi</span><br><span class="line">在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：</span><br><span class="line">$ vi myfile</span><br><span class="line">进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」输入文字</span><br><span class="line">切换至插入模式（Insert mode）编辑文件</span><br><span class="line">在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」输入文字</span><br><span class="line">Insert 的切换</span><br><span class="line">处于「插入模式（Insert mode）」，用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（command mode）」再删除文字。</span><br><span class="line">退出vi及保存文件</span><br><span class="line">在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：</span><br><span class="line">: w filename （输入 「w filename」将文章以指定的文件名filename保存）</span><br><span class="line">: wq (输入「wq」，存盘并退出vi)</span><br><span class="line">: q! (输入q!， 不存盘强制退出vi)</span><br><span class="line">命令行模式（command mode）功能键 </span><br><span class="line">插入模式</span><br><span class="line">按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；</span><br><span class="line">按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；</span><br><span class="line">按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</span><br><span class="line">从插入模式切换为命令行模式</span><br><span class="line">按「ESC」键。</span><br><span class="line">移动光标</span><br><span class="line">vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</span><br><span class="line">按「ctrl」+「b」：屏幕往“后”移动一页。</span><br><span class="line">按「ctrl」+「f」：屏幕往“前”移动一页。</span><br><span class="line">按「ctrl」+「u」：屏幕往“后”移动半页。</span><br><span class="line">按「ctrl」+「d」：屏幕往“前”移动半页。</span><br><span class="line">按数字「0」：移到文章的开头。</span><br><span class="line">按「G」：移动到文章的最后。</span><br><span class="line">按「$」：移动到光标所在行的“行尾”。</span><br><span class="line">按「^」：移动到光标所在行的“行首”</span><br><span class="line">按「w」：光标跳到下个字的开头</span><br><span class="line">按「e」：光标跳到下个字的字尾</span><br><span class="line">按「b」：光标回到上个字的开头</span><br><span class="line">按「#l」：光标移到该行的第#个位置，如：5l,56l。</span><br><span class="line">删除文字</span><br><span class="line">「x」：每按一次，删除光标所在位置的“后面”一个字符。</span><br><span class="line">「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。</span><br><span class="line">「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。</span><br><span class="line">「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。</span><br><span class="line">「dd」：删除光标所在行。</span><br><span class="line">「#dd」：从光标所在行开始删除#行</span><br><span class="line">复制</span><br><span class="line">「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</span><br><span class="line">「#yw」：复制#个字到缓冲区</span><br><span class="line">「yy」：复制光标所在行到缓冲区。</span><br><span class="line">「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。</span><br><span class="line">「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</span><br><span class="line">替换</span><br><span class="line">「r」：替换光标所在处的字符。</span><br><span class="line">「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</span><br><span class="line">恢复/撤消/还原上一次操作</span><br><span class="line">「u」：如果误执行一个命令，可以马上按下「u」，撤消上一个操作。按多次“u”可以执行多次撤消。</span><br><span class="line">更改</span><br><span class="line">「cw」：更改光标所在处的字到字尾处</span><br><span class="line">「c#w」：例如，「c3w」表示更改3个字</span><br><span class="line">跳至指定的行</span><br><span class="line">「ctrl」+「g」列出光标所在行的行号。</span><br><span class="line">「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</span><br><span class="line">Last line mode下命令简介 </span><br><span class="line"> 在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</span><br><span class="line">列出行号</span><br><span class="line">「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</span><br><span class="line">跳到文件中的某一行</span><br><span class="line">「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</span><br><span class="line">查找字符</span><br><span class="line">「/关键字」：先按「/」键，再输入你想寻找的字符，找的关键字不是你想要的，可以一直按「n」会往后寻找到您要的关键字为止。</span><br><span class="line">「?关键字」：先按「?」键，再输入你想寻找的字符，找的关键字不是你想要的，可以一直按「n」会往前寻找到您要的关键字为止。</span><br><span class="line">保存文件</span><br><span class="line">「w」：在冒号输入字母「w」就可以将文件保存起来。</span><br><span class="line">离开vi</span><br><span class="line">「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</span><br><span class="line">「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</span><br><span class="line">vi命令列表 </span><br><span class="line">下表列出命令模式下的一些键的功能：</span><br><span class="line">h </span><br><span class="line">左移光标一个字符</span><br><span class="line">l </span><br><span class="line">右移光标一个字符</span><br><span class="line">k </span><br><span class="line">光标上移一行</span><br><span class="line">j </span><br><span class="line">光标下移一行</span><br><span class="line">^ </span><br><span class="line">光标移动至行首</span><br><span class="line">0 </span><br><span class="line">数字“0”，光标移至文章的开头</span><br><span class="line">G </span><br><span class="line">光标移至文章的最后</span><br><span class="line">$ </span><br><span class="line">光标移动至行尾</span><br><span class="line">Ctrl+f </span><br><span class="line">向前翻屏</span><br><span class="line">Ctrl+b </span><br><span class="line">向后翻屏</span><br><span class="line">Ctrl+d </span><br><span class="line">向前翻半屏</span><br><span class="line">Ctrl+u </span><br><span class="line">向后翻半屏</span><br><span class="line">i </span><br><span class="line">在光标位置前插入字符</span><br><span class="line">a </span><br><span class="line">在光标所在位置的后一个字符开始增加</span><br><span class="line">o </span><br><span class="line">插入新的一行，从行首开始输入</span><br><span class="line">ESC </span><br><span class="line">从输入状态退至命令状态</span><br><span class="line">x </span><br><span class="line">删除光标后面的字符</span><br><span class="line">#x </span><br><span class="line">删除光标后的＃个字符</span><br><span class="line">X </span><br><span class="line">(大写X)，删除光标前面的字符</span><br><span class="line">#X </span><br><span class="line">删除光标前面的#个字符</span><br><span class="line">dd </span><br><span class="line">删除光标所在的行</span><br><span class="line">#dd </span><br><span class="line">删除从光标所在行数的#行</span><br><span class="line">yw </span><br><span class="line">复制光标所在位置的一个字</span><br><span class="line">#yw </span><br><span class="line">复制光标所在位置的#个字</span><br><span class="line">yy </span><br><span class="line">复制光标所在位置的一行</span><br><span class="line">#yy </span><br><span class="line">复制从光标所在行数的#行</span><br><span class="line">p </span><br><span class="line">粘贴</span><br><span class="line">u </span><br><span class="line">取消操作</span><br><span class="line">cw </span><br><span class="line">更改光标所在位置的一个字</span><br><span class="line">#cw </span><br><span class="line">更改光标所在位置的#个字</span><br><span class="line">下表列出行命令模式下的一些指令 </span><br><span class="line">w filename </span><br><span class="line">储存正在编辑的文件为filename</span><br><span class="line">wq filename </span><br><span class="line">储存正在编辑的文件为filename，并退出vi</span><br><span class="line">q! </span><br><span class="line">放弃所有修改，退出vi</span><br><span class="line">set nu </span><br><span class="line">显示行号</span><br><span class="line">/或? </span><br><span class="line">查找，在/后输入要查找的内容</span><br><span class="line">n </span><br><span class="line">与/或?一起使用查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3入门教程</title>
      <link href="/2020/02/10/CSS3%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/02/10/CSS3%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h1><h1 id="过渡动画——Transitions"><a href="#过渡动画——Transitions" class="headerlink" title="过渡动画——Transitions"></a>过渡动画——Transitions</h1><p>含义：在css3中，Transitions功能通过将元素的某个属性从一个属性值在指定的时间内平滑过渡到另一个属性值来实现动画功能。<br>Transitions属性的使用方法如下所示：<br>transition: property | duration  | timing-function | delay<br>transition-property: 表示对那个属性进行平滑过渡<br>transition-duration: 表示在多长时间内完成属性值的平滑过渡<br>transition-timing-function 表示通过什么方法来进行平滑过渡<br>transition-delay: 定义过渡动画延迟的时间<br>浏览器支持程度：IE10，firefox4+，opera10+，safari3+及chrome8+<br>下面实现Transitions过渡效果的demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">-webkit-transition-property: background-color;</span><br><span class="line">    -webkit-transition-duration: 1s;</span><br><span class="line">    -webkit-transition-timing-function: linear;</span><br><span class="line"></span><br><span class="line">    -moz-transition-timing-function: linear;</span><br><span class="line">    -moz-transition-duration: 1s;</span><br><span class="line">    -moz-transition-timing-function: linear;</span><br><span class="line"></span><br><span class="line">    -o-transition-timing-function: linear;</span><br><span class="line">    -o-transition-duration: 1s;</span><br><span class="line">    -o-transition-timing-function: linear;</span><br><span class="line">&#125;</span><br><span class="line">.demo:hover&#123;</span><br><span class="line">background-color: #00ffff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;过渡功能&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><p>Transform的含义是：改变，使…变形，转换的意思<br>语法：<figure class="highlight plain"><figcaption><span>```  初始值是none</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transform-function 的取值如下：</span><br><span class="line">* matrix() 定义距阵变换,基本上很少使用</span><br><span class="line">* translate() 移动元素对象</span><br><span class="line">* scale() 缩放元素对象</span><br><span class="line">* rotate() 旋转元素对象</span><br><span class="line">* skew() 倾斜元素对象</span><br><span class="line"></span><br><span class="line">### transform:rotate()</span><br><span class="line">含义是旋转,其中的deg是度的意思</span><br></pre></td></tr></table></figure></p><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <title></title>    <style type="text/css">.rotate img{     -webkit-transform:rotate(0deg);    -moz-transform:rotate(0deg);    -o-transform:rotate(0deg);    transition:1s all linear;}.rotate{  width:400px;  height:200px;  overflow:hidden;}.rotate img:hover{    -webkit-transform:rotate(90deg);    -moz-transform:rotate(90deg);    -o-transform:rotate(90deg)}        </style></head><body>    <h3>transform属性-rotate旋转</h3>    <div class="demo">    <img src="./rotate.jpg">    </div></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### transform:skew()</span><br><span class="line">含义倾斜的意思</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <title></title>    <style type="text/css">.skew img{      -webkit-transform:skew(0deg);    -moz-transform:skew(0deg);    -o-transform:skew(0deg);    transition:1s all linear;}.skew{  width:400px;  height:200px;  overflow:hidden;}.skew img:hover{    -webkit-transform:skew(20deg);    -moz-transform:skew(20deg);    -o-transform:skew(20deg)}        </style></head><body>    <h3>transform属性-skew倾斜</h3>    <div class="skew">    <img src="./skew.jpg">    </div></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### transform:scale()</span><br><span class="line">含义：按比例放大或者缩小(放大是正数,缩小是负数)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <title></title>    <style type="text/css">ul,li{    list-style:none;}.scale{ width:200px;  margin:100px auto;  overflow: hidden;  padding: 50px;}.scale li{     border-radius: 4px;    background: #fff;    width:45px;    height:45px;    margin:3px;    float:left;     transition:.1s all ease;    }<p>.scale li img{<br>    border-radius: 4px;<br>    height: 40px;<br>    width: 40px;<br>    border: 1px solid #fff;<br>    cursor: pointer;}</p><p>.scale li:hover{<br>    -webkit-transform:scale(1.5);<br>    -moz-transform:scale(1.5);<br>    -o-transform:scale(1.5);<br>    transform:scale(1.5);<br>}<br>    </style><p></p></head><body>    <h3>transform属性-scale缩放</h3>    <div class="scale"><li>   <img src="./scale.jpg"></li><li>   <img src="./scale.jpg"></li><li>   <img src="./scale.jpg"></li><li>   <img src="./scale.jpg"></li>    </div></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### transform:translate()</span><br><span class="line">含义：变动,位移(向右向上位移为正,向左向下位移则为负&quot;-&quot;)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <title></title>    <style type="text/css">.translate img{   -webkit-transform:translate(0,0);    -moz-transform:translate(0,0);    -o-transform:translate(0,0);    transition:1s all linear;}.translate{  width:400px;  height:200px;  overflow:hidden;}.translate img:hover{    -webkit-transform:translate(120px,0);    -moz-transform:translate(120px,0);    -o-transform:translate(120px,0)}        </style></head><body>    <h3>transform属性-translate变动位移</h3>    <div class="translate">    <img src="./translate.jpg">    </div></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Animation</span><br><span class="line">Animations功能与Transitions功能相同，都是通过改变元素的属性值来实现动画效果的。它们的区别在于：使用Transitions功能是只能通过指定属性的开始值与结束值。然后在这两个属性值之间进行平滑过渡的方式来实现动画效果，因此不能实现复杂的动画效果；而Animations则通过定义多个关键帧以及定义每个关键帧中元素的属性值来实现更为复杂的动画效果。</span><br><span class="line">用法：@-webkit-keyframes demo &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <title></title>    <style type="text/css">.animate {background-color:red;height:100px;}<p>@-webkit-keyframes mycolor {<br>    0% {background-color:red;}<br>    40% {background-color:darkblue;}<br>    70% {background-color: yellow;}<br>    100% {background-color:red;}<br>}<br>@-moz-keyframes mycolor {<br>    0% {background-color:red;}<br>    40% {background-color:darkblue;}<br>    70% {background-color: yellow;}<br>    100% {background-color:red;}<br>}</p><p>.animate:hover {<br>    -webkit-animation-name: mycolor;<br>    -webkit-animation-duration: 5s;<br>    -webkit-animation-timing-function:linear;</p><pre><code>-moz-animation-name: mycolor;-moz-animation-duration: 5s;-moz-animation-timing-function:linear;</code></pre><p>}<br>    </style><p></p></head><body>    <h3>animate实现复杂的动画</h3>    <div class="animate">    animate实现复杂的动画    </div><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body></html>```#### 实现动画的方法如下：* linear: 在动画开始时到结束的时候以同样的速度进行改变。* ease-in 在动画开始时候速度很慢，然后速度沿曲线值进行加快。* ease-out  在动画开始时 速度很快，然后速度沿曲线值进行放慢。* ease 动画开始时速度很慢，然后速度沿曲线值进行加快，然后再沿曲线值放慢。* ease-in-out 动画开始时速度很慢，然后速度沿曲线值进行加快，然后再沿曲线值放慢<h3 id="使用animate实现更为复杂的动画"><a href="#使用animate实现更为复杂的动画" class="headerlink" title="使用animate实现更为复杂的动画"></a>使用animate实现更为复杂的动画</h3>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门教程-选项</title>
      <link href="/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E9%80%89%E9%A1%B9/"/>
      <url>/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门教程-内置组件</title>
      <link href="/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门教程-全局API</title>
      <link href="/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%85%A8%E5%B1%80API/"/>
      <url>/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%85%A8%E5%B1%80API/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-directive自定义指令"><a href="#Vue-directive自定义指令" class="headerlink" title="Vue.directive自定义指令"></a>Vue.directive自定义指令</h1><h1 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h1><h1 id="Vue-set全局操作"><a href="#Vue-set全局操作" class="headerlink" title="Vue.set全局操作"></a>Vue.set全局操作</h1><h1 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a>Vue.use</h1><h1 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h1><p>下图展示了实例的生命周期<br><img src="/images/15.png" alt><br>Vue实例有一个完整的生命周期,从开始创建、初始化数据、挂载虚拟dom、渲染→更新→销毁等一系列过程,这是Vue的生命周期，<br>Vue实例从 创建到销毁的过程,就是生命周期<br>每个组件都会经历一个完整的生命周期,分为三个阶段:初始化、运行中、销毁<br>1.组件通过new Vue()创建出来之后会初始化事件和生命周期,执行beforeCreate钩子函数,数据还没挂载,无法访问到数据,一般不做操作<br>2.挂载数据、捆绑事件等，执行created函数,使用到数据或者更改数据,不会触发updated函数,渲染前倒数第二次更改数据,不会触发其他的钩子函数,一般做初始数据的获取<br>3.编译模板把虚拟dom放入到render函数中渲染，执行beforeMount钩子函数，虚拟dom已经创建完成，可以更改数据，不会触发updated，渲染前更改数据的机会，不会触发其他的钩子函数，一般做初始数据的获取<br>4.开始render，渲染虚拟dom，执行mounted钩子函数，组件已经出现在页面中，数据、dom都已经处理好了,事件都已经挂载好了，可以操作虚拟dom<br>5.当组件或虚拟dom的数据更改之后，会立即执行beforeUpdate，然后vue的dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染<br>6.当更新完成后，执行updated，数据已经更改完成，虚拟dom也重新render完成，可以操作更新后的虚拟dom<br>7.当经过某种途径调用$destroy方法后，立即执行beforeDestroy，一般在这里做一些其他事件，例如清除计时器、清除非指令绑定的事件等<br>8.组件的数据绑定、监听…去掉后只剩下虚拟dom空壳,执行destroyed，一般在这里做一些其他事件<br><img src="/images/16.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;test&gt;&lt;/test&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;p class=&quot;list&quot;&gt;组件&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;destroy&quot;&gt;destroy&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;test&quot;&gt;</span><br><span class="line">    &lt;p&gt;test:&#123;&#123;test&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&quot;test&quot;,&#123;</span><br><span class="line">        template:&quot;#test&quot;,</span><br><span class="line">        data:function()&#123;</span><br><span class="line">            return &#123;test:&apos;hello vue&apos;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        timer:null,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            destroy:function()&#123;</span><br><span class="line">                this.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate:function()&#123;</span><br><span class="line">            console.log(&apos;new vue() 数据没挂载&apos;)</span><br><span class="line">            console.log(this.test)</span><br><span class="line">            console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">        &#125;,</span><br><span class="line">        created:function()&#123;</span><br><span class="line">            console.log(&quot;created已经可以使用数据,更改数据不会触发update函数&quot;)</span><br><span class="line">            this.test+=&apos;——&apos;</span><br><span class="line">            console.log(&apos;渲染倒数第二次更改数据,不触发其他的钩子函数，做初始化数据的获取&apos;)</span><br><span class="line">            console.log(&apos;编译模板将虚拟dom放入rende函数中准备渲染&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount:function()&#123;</span><br><span class="line">                console.log(&apos;beforeMount:虚拟dom创建完成,更改数据不会触发update&apos;)</span><br><span class="line">                this.test+=&apos;极客教程&apos;</span><br><span class="line">                console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">                console.log(&apos;开始render，渲染虚拟dom&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted:function()&#123;</span><br><span class="line">                console.log(&apos;组件出现在页面,数据、虚拟dom处理完毕,事件完成挂载&apos;)</span><br><span class="line">                console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">                console.log(&apos;操作虚拟dom&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate:function()&#123;</span><br><span class="line">            //这里不能更改数据,否则陷入死循环</span><br><span class="line">            console.log(&apos;beforeUpdate:重新渲染之前触发&apos;)</span><br><span class="line">            console.log(&apos;vue的虚拟dom机制重新构建虚拟dom与上次的虚拟dom利用diff算法进行对比之后重新渲染&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated:function()&#123;</span><br><span class="line">            //这里不能更改数据,否则陷入死循环</span><br><span class="line">            console.log(&apos;updated:数据更改,重新render完成&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy:function()&#123;</span><br><span class="line">            console.log(&apos;beforeDestroy:销毁前执行($test方法被调用的时候会执行),清除计时器、清除非指令绑定的事件等&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed:function()&#123;</span><br><span class="line">            console.log(&apos;destroyed:组件的数据绑定、监听&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    &#125;).$mount(&apos;#app&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">生命周期钩子    详细</span><br><span class="line">beforeCreate    在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用</span><br><span class="line">created    实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见</span><br><span class="line">beforeMount    在挂载开始之前被调用：相关的 render 函数首次被调用</span><br><span class="line">mounted    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内</span><br><span class="line">beforeUpdate    数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程</span><br><span class="line">updated    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作</span><br><span class="line">activated    keep-alive 组件激活时调用</span><br><span class="line">deactivated    keep-alive 组件停用时调用</span><br><span class="line">beforeDestroy    实例销毁之前调用。在这一步，实例仍然完全可用</span><br><span class="line">destroyed    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</span><br></pre></td></tr></table></figure><h1 id="Template-制作模版"><a href="#Template-制作模版" class="headerlink" title="Template 制作模版"></a>Template 制作模版</h1><h1 id="Component-组件"><a href="#Component-组件" class="headerlink" title="Component 组件"></a>Component 组件</h1><h1 id="Component-组件props-属性设置"><a href="#Component-组件props-属性设置" class="headerlink" title="Component 组件props 属性设置"></a>Component 组件props 属性设置</h1><h1 id="Component-父子组件关系"><a href="#Component-父子组件关系" class="headerlink" title="Component 父子组件关系"></a>Component 父子组件关系</h1><h1 id="Component-标签"><a href="#Component-标签" class="headerlink" title="Component 标签"></a>Component 标签</h1>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6入门</title>
      <link href="/2020/01/23/ES6%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/23/ES6%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h1><p>ES6,全称ECMAScript 6.0,是JavaScript的下一个版本标准,2015.06发版<br>ES6主要是为了解决ES5的先天不足,比如JavaScript里并没有类的概念<br>但是目前浏览器的JavaScript是ES5版本,大多数高版本的浏览器也支持ES6,不过只实现了ES6的部分特性和功能,对ES6 的支持可以查看kangax.github.io/es5-compat-table/es6/<br>JavaScript的正式名称是ECMAScript<br>1996年11月,JavaScript的创造者网景公司将JS提交给国际化标准组织ECMA(European computer manufactures association,洲计算机制造联合会）<br>希望这种语言能够成为国际标准,随后ECMA发布了规定浏览器脚本语言的标准,即ECMAScript。这也有利于这门语言的开放和中立</p><h1 id="ES5存在的问题"><a href="#ES5存在的问题" class="headerlink" title="ES5存在的问题"></a>ES5存在的问题</h1><ul><li>作用域</li><li>异步函数</li><li>原型</li><li>构造函数</li><li>继承</li><li>ES6的语法糖</li></ul><h1 id="在线转换"><a href="#在线转换" class="headerlink" title="在线转换"></a>在线转换</h1><h2 id="Babel-https-babeljs-io-repl-是一个广泛使用的ES6转码器-可以将ES6代码转为ES5代码"><a href="#Babel-https-babeljs-io-repl-是一个广泛使用的ES6转码器-可以将ES6代码转为ES5代码" class="headerlink" title="Babel(https://babeljs.io/repl/) 是一个广泛使用的ES6转码器,可以将ES6代码转为ES5代码"></a>Babel(<a href="https://babeljs.io/repl/" target="_blank" rel="noopener">https://babeljs.io/repl/</a>) 是一个广泛使用的ES6转码器,可以将ES6代码转为ES5代码</h2><p>从而在现有环境中执行。解决现在环境不支持ES6的问题</p><h2 id="Traceur转码器"><a href="#Traceur转码器" class="headerlink" title="Traceur转码器"></a>Traceur转码器</h2><p>Google提供了一款ES6转码器<br><a href="http://google.github.io/traceur-compiler/demo/repl.html" target="_blank" rel="noopener">http://google.github.io/traceur-compiler/demo/repl.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.map(item =&gt; item + 1);  // 转码前</span><br><span class="line">// 转码后</span><br><span class="line">input.map(function (item)&#123;</span><br><span class="line">   return item +１;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="配置Babel初始化项目"><a href="#配置Babel初始化项目" class="headerlink" title="配置Babel初始化项目"></a>配置Babel初始化项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init (-y)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;es6&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;babel src/index.js -o dist/index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ES6环境搭建"><a href="#ES6环境搭建" class="headerlink" title="ES6环境搭建"></a>ES6环境搭建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><h2 id="安装babel-preset-es2015和babel-cli"><a href="#安装babel-preset-es2015和babel-cli" class="headerlink" title="安装babel-preset-es2015和babel-cli"></a>安装babel-preset-es2015和babel-cli</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure><h2 id="在项目的根目录添加一个-babelrc文件-并添加内容"><a href="#在项目的根目录添加一个-babelrc文件-并添加内容" class="headerlink" title="在项目的根目录添加一个.babelrc文件,并添加内容"></a>在项目的根目录添加一个.babelrc文件,并添加内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;es2015&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// es2015转码规则</span><br><span class="line">npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line">// react转码规则</span><br><span class="line">npm install --save-dev babel-preset-react</span><br><span class="line">//react最新转码规则</span><br><span class="line">npm install --save-dev babel-preset-latest</span><br><span class="line"></span><br><span class="line">//ES7不同阶段语法提案的转码规则（共有4个阶段）,选装一个</span><br><span class="line">npm install --save-dev babel-preset-stage-0</span><br><span class="line">npm install --save-dev babel-preset-stage-1</span><br><span class="line">npm install --save-dev babel-preset-stage-2</span><br><span class="line">npm install --save-dev babel-preset-stage-3</span><br><span class="line"></span><br><span class="line">//安装 babel-cli 工具，用于命令行转码</span><br><span class="line">npm install --global babel-cli</span><br><span class="line"></span><br><span class="line">//执行转码 </span><br><span class="line">babel example.js -o compile.js --presets es2015</span><br><span class="line"></span><br><span class="line">//实时监听编译文件</span><br><span class="line">$ babel example.js --watch -o compiled.js --presets es2015</span><br><span class="line"></span><br><span class="line">//Babel-core </span><br><span class="line">需要调用BABEL的API进行转码，就需要使用babel-core模块</span><br><span class="line"></span><br><span class="line">//babel-poly </span><br><span class="line">babel默认只转换新的JS语法,不转换新的API,比如Iterator ,Generator,Set ,Maps,Proxy,Reflect,Symbol,Promise 等全局对象,以及定义在全局对象的方法(比如Object.assign)</span><br><span class="line"></span><br><span class="line">浏览器环境以script标签方式引入的方式引入 ,会造成而性能下降,生产环境需要加载已经转码的脚本</span><br></pre></td></tr></table></figure><h2 id="测试编译效果"><a href="#测试编译效果" class="headerlink" title="测试编译效果"></a>测试编译效果</h2><p>新建一个index.js文件,写入包含ES6语法的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src -d release</span><br></pre></td></tr></table></figure><h2 id="可以在package-json的srcipts中新增一行代码-然后通过npm来运行命令"><a href="#可以在package-json的srcipts中新增一行代码-然后通过npm来运行命令" class="headerlink" title="可以在package.json的srcipts中新增一行代码,然后通过npm来运行命令"></a>可以在package.json的srcipts中新增一行代码,然后通过npm来运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;:&quot;babel src -d release&quot;</span><br><span class="line">npm run build,也相当于执行命令：babel src -d release</span><br></pre></td></tr></table></figure><h2 id="运行成功会自动创建release文件夹-并生成对应的index-js文件"><a href="#运行成功会自动创建release文件夹-并生成对应的index-js文件" class="headerlink" title="运行成功会自动创建release文件夹,并生成对应的index.js文件"></a>运行成功会自动创建release文件夹,并生成对应的index.js文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 转码前</span><br><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age,sex)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.sex = sex</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        console.log(`name$&#123;this.name&#125;,age $&#123;this.age&#125;，sex $&#123;this.sex&#125;. `)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let li = new Person(&apos;张三&apos;,16,男)</span><br><span class="line">li.speak()</span><br><span class="line"></span><br><span class="line">// 转码后</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function _instanceof(left, right) &#123; if (right != null &amp;&amp; typeof Symbol !== &quot;undefined&quot; &amp;&amp; right[Symbol.hasInstance]) &#123; return right[Symbol.hasInstance](left); &#125; else &#123; return left instanceof right; &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123; if (!_instanceof(instance, Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _createClass(Constructor, protoProps, staticProps) &#123; if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; &#125;</span><br><span class="line"></span><br><span class="line">var Person =</span><br><span class="line">/*#__PURE__*/</span><br><span class="line">function () &#123;</span><br><span class="line">  function Person(name, age, sex) &#123;</span><br><span class="line">    _classCallCheck(this, Person);</span><br><span class="line"></span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _createClass(Person, [&#123;</span><br><span class="line">    key: &quot;speak&quot;,</span><br><span class="line">    value: function speak() &#123;</span><br><span class="line">      console.log(&quot;name&quot;.concat(this.name, &quot;,age &quot;).concat(this.age, &quot;\uFF0Csex &quot;).concat(this.sex, &quot;. &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  return Person;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">var li = new Person(&apos;张三&apos;, 16, 男);</span><br><span class="line">li.speak();</span><br></pre></td></tr></table></figure><p>Babel-cli官方文档：<a href="https://www.babeljs.cn/docs/usage/cli/" target="_blank" rel="noopener">https://www.babeljs.cn/docs/usage/cli/</a></p><h2 id="可以通过命令进行转换-ES6转化为ES5的语法"><a href="#可以通过命令进行转换-ES6转化为ES5的语法" class="headerlink" title="可以通过命令进行转换,ES6转化为ES5的语法"></a>可以通过命令进行转换,ES6转化为ES5的语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure><h2 id="打开package-json文件-修改文件内容"><a href="#打开package-json文件-修改文件内容" class="headerlink" title="打开package.json文件,修改文件内容"></a>打开package.json文件,修改文件内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;es6&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel src/index.js -o dist/index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改完成-可以使用npm-run-build-利用webpack进行打包"><a href="#修改完成-可以使用npm-run-build-利用webpack进行打包" class="headerlink" title="修改完成,可以使用npm run build 利用webpack进行打包"></a>修改完成,可以使用npm run build 利用webpack进行打包</h2><h1 id="ES6大纲"><a href="#ES6大纲" class="headerlink" title="ES6大纲"></a>ES6大纲</h1><p><img src="/images/41.png" alt></p><h1 id="var-amp-let-amp-const-命令"><a href="#var-amp-let-amp-const-命令" class="headerlink" title="var &amp; let &amp; const 命令"></a>var &amp; let &amp; const 命令</h1><h2 id="var：它是variable的简写-可以理解成变量的意思"><a href="#var：它是variable的简写-可以理解成变量的意思" class="headerlink" title="var：它是variable的简写,可以理解成变量的意思"></a>var：它是variable的简写,可以理解成变量的意思</h2><p>ES6提出了两个新的声明变量的命令:let和const，let完全可以取代var，因为两者语义相同，而且let没有副作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let x = 5;</span><br><span class="line">  var y = 10;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x) // // ReferenceError: x is not defined.</span><br><span class="line">console.log(y) // 10</span><br></pre></td></tr></table></figure><p>在if中使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(false)&#123;</span><br><span class="line">  let x = 5;  // 只在这个代码块内有效，形成了块级作用域</span><br><span class="line">  var y = 10;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x) // // ReferenceError: x is not defined.</span><br><span class="line">console.log(y) // 10</span><br></pre></td></tr></table></figure><p>在for中使用,i只能在循环体内使用，循环体外会报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); // ReferenceError: i is not defined</span><br></pre></td></tr></table></figure><p>const 命令<br>const声明的变量是常量，不能被修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const x = 10;</span><br><span class="line">x   //10</span><br><span class="line">x = 12;</span><br><span class="line">//TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//函数表达式</span><br><span class="line">function action(a,b)&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;;</span><br><span class="line">//使用箭头函数</span><br><span class="line">const action = (a,b)=&gt; a+b;</span><br><span class="line">//只有一个参数，不需要括号</span><br><span class="line">const add = a=&gt;3+a;</span><br></pre></td></tr></table></figure><p>Symbol<br>Proxy<br>Reflect<br>字符串的扩展<br>扩展运算符<br>Promise对象<br>Set和WeakSet<br>class类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>迭代器（Iterators）<br>Generators<br>Module的语法<br>export :负责进行模块化，也是模块的输出<br>import : 负责把模块引，也是模块的引入操作</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli入门</title>
      <link href="/2020/01/23/Vue-cli%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/23/Vue-cli%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果已经全局安装了旧版本的 vue-cli(1.x 或 2.x)，需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它</p><p>可以在命令行中访问 vue 命令来验证它是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>用这个命令来检查其版本是否正确 (3.x)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><p>查看其他命令可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vue -h</span><br><span class="line">Usage: vue &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --help                                 output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service  // 创建一个由vue-cli-service 支持的新项目</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator in an already created project   // 在已有的项目中添加插件</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin in an already created project // 在开发者模式下零配置运行一个js或vue文件</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service   // 在vue-cli-service的项目中检查webpack配置 </span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file in development mode with zero config  // 可以理解为开发环境下启动命令</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file in production mode with zero config   // 打包 （在生产模式下零配置构建一个js或者vue文件）</span><br><span class="line">  ui [options]                               start and open the vue-cli ui  // vue3.0提供的一个UI </span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)  // // 旧api 需要@vue/cli-init // 就是原来的vue-cli init &lt;template&gt; &lt;app-name&gt;</span><br><span class="line">  config [options] [value]                   inspect and modify the config // 项目配置文件</span><br><span class="line">  upgrade [semverLevel]                      upgrade vue cli service / plugins (default semverLevel: minor) // 更新插件或者配置文件</span><br><span class="line">  info                                       print debugging information about your environment  // 打印出来vue配置文件</span><br><span class="line"></span><br><span class="line">  Run vue &lt;command&gt; --help for detailed usage of given command.</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称(必须小写)</span><br><span class="line"># OR vue ui</span><br></pre></td></tr></table></figure><p>两种选择方式，第一种是默认的(一路回车)，第二种手动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; default (babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>手动配置(选择需要的模块，上下移动，空格进行确定)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel  //es6转换器</span><br><span class="line"> ( ) TypeScript //使用js的超类语言TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support //PWA单页应用 </span><br><span class="line"> ( ) Router  //使用路由</span><br><span class="line"> ( ) Vuex  //使用vue状态管理器</span><br><span class="line"> ( ) CSS Pre-processors //css预处理,如less,sass等</span><br><span class="line"> (*) Linter / Formatter //Eslint安装</span><br><span class="line"> ( ) Unit Testing //Unit单元测试</span><br><span class="line"> ( ) E2E Testing //E2E单元测试</span><br></pre></td></tr></table></figure><p>选择需要的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"> (*) Vuex</span><br><span class="line">&gt;(*) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><p>模块安装询问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)</span><br></pre></td></tr></table></figure><p>选择Y接下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes //是否使用history模式,这里选的是Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less //选择css预处理器,这里选的Less</span><br><span class="line">? Pick a linter / formatter config: Prettier //选择Linter / Formatter规范类型</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Lint on save // 保存并且检测 (一般选择这个)</span><br><span class="line"> ( ) Lint and fix on commit // fix和commit检查</span><br></pre></td></tr></table></figure><p>选择了router，Less，ESlint—Prettier作为代码检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files  // 独立文件夹</span><br><span class="line">  In package.json  // 放入package.json里 (一般选择这个)</span><br></pre></td></tr></table></figure><p>babel .eslint这些文件放在独立的文件里还是package.json里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json</span><br><span class="line">? Save this as a preset for future projects? (y/N) N </span><br><span class="line">//是否记录下，以便下次继续使用这套配置</span><br></pre></td></tr></table></figure><p>选择N不记录<br>安装后移动到目录并启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名称  // 进入项目目录 </span><br><span class="line">npm run serve  //运行项目</span><br></pre></td></tr></table></figure><p><img src="/images/19.png" alt><br>查看下目录结构<br><img src="/images/20.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|-- node_modules                 # 依赖包的文件夹</span><br><span class="line">|-- dist                         # 打包后文件夹            </span><br><span class="line">|-- public                       # 静态文件夹                                   </span><br><span class="line">|   |-- favicon.ico              # 图标  </span><br><span class="line">|   |-- index.html               # 入口页面</span><br><span class="line">|-- src                          # 资源目录         </span><br><span class="line">|   |--assets                    # 模块资源</span><br><span class="line">|   |--components                # vue公共组件</span><br><span class="line">|   |--views                     #页面目录文件</span><br><span class="line">|   |--App.vue                   # 页面入口文件</span><br><span class="line">|   |--main.js                   # 入口文件,加载公共组件</span><br><span class="line">|   |--router.js                 # 路由配置</span><br><span class="line">|   |--store.js                  # 状态管理</span><br><span class="line">|-- vue.config.js                # 配置文件</span><br><span class="line">|-- .gitignore                   # git忽略上传的文件格式</span><br><span class="line">|-- babel.config.js              # babel语法编译</span><br><span class="line">|-- package.json                 # 项目基本信息</span><br><span class="line">|--package-lock.json             # 依赖版本锁定文件</span><br><span class="line">|--README.md                     # README文件</span><br></pre></td></tr></table></figure><p>在两种情况下会去安装依赖：<br>（1）项目运行缺少该依赖包：例如项目加载外部css会用到的css-loader，路由跳转vue-loader等（安装方法示例：npm install css-loader）<br>（2）安装插件：如vux（基于WEUI的移动端组件库），vue-swiper（轮播插件）<br>注：有时会安装指定依赖版本，需在依赖包名称后加上版本号信息，如安装11.1.4版本的vue-loader，输入npm install <a href="mailto:vue-loader@11.1.4" target="_blank" rel="noopener">vue-loader@11.1.4</a><br>main.js——(入口文件)<br>main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例<br><img src="/images/21.jpg" alt><br>index.html——(主页)<br>index.html如其他html一样，一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充<img src="/images/22.jpg" alt><br>App.vue——(根组件)<br>一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)<img src="/images/23.jpg" alt><br>router——(路由配置)<br>router.js，即为路由配置文件<br>router下的index.js<br>定义了路径为’/‘的路由，该路由对应的页面是HelloWorld组件，所以当我们在浏览器url访问<a href="http://localhost:8080/#/" target="_blank" rel="noopener">http://localhost:8080/#/</a> 时就渲染的HelloWorld组件<br>可以设置多个路由，’/index’,’/list’之类的，首先得引入该组件，再为该组件设置路由<img src="/images/24.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router入门</title>
      <link href="/2020/01/23/Vue-router%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/23/Vue-router%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Vue Router是Vue.js官方的路由管理器。Vue Router和Vue.js 的核心深度集成,让构建单页面应用变得易如反掌。包含的功能有:</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Borland传奇</title>
      <link href="/2020/01/19/Borland%E4%BC%A0%E5%A5%87/"/>
      <url>/2020/01/19/Borland%E4%BC%A0%E5%A5%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java前世今生</title>
      <link href="/2020/01/19/Java%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2020/01/19/Java%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blogger前世今生</title>
      <link href="/2020/01/19/Blogger%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2020/01/19/Blogger%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个失败的操作系统MULTICS</title>
      <link href="/2020/01/19/%E4%B8%80%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FMULTICS/"/>
      <url>/2020/01/19/%E4%B8%80%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FMULTICS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一家伟大公司之死</title>
      <link href="/2020/01/19/%E4%B8%80%E5%AE%B6%E4%BC%9F%E5%A4%A7%E5%85%AC%E5%8F%B8%E4%B9%8B%E6%AD%BB/"/>
      <url>/2020/01/19/%E4%B8%80%E5%AE%B6%E4%BC%9F%E5%A4%A7%E5%85%AC%E5%8F%B8%E4%B9%8B%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件编年史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件编年史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React教程-入门和组件</title>
      <link href="/2020/01/13/React%E6%95%99%E7%A8%8B-%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/01/13/React%E6%95%99%E7%A8%8B-%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><p>React起源于facebook公司,起初用于Instagram网站开发,React是一个用于构建用户界面的javascript类库,不是一个MVC框架,提出了一种新的开发模式与理念,它强调的是”用户界面”。<br>React官方地址:<a href="https://reactjs.org" target="_blank" rel="noopener">https://reactjs.org</a><br>GitHub地址:<a href="https://github.com/facebook/react" target="_blank" rel="noopener">https://github.com/facebook/react</a><br>阅读本教程前需要了解的知识：<br>在开始学习React之前,需要具备以下基础知识:<br>HTML+CSS 需要会基本的html和css知识,学习起来更加容易上手。<br>JavaScript 需要扎实的JS能力,React的组件都会使用JS编写,JS基础越好,学习起来越来越容易。</p><h1 id="React特点"><a href="#React特点" class="headerlink" title="React特点:"></a>React特点:</h1><p>虚拟DOM:虚拟DOM顾名思义不是真实的DOM,它不需要浏览器的DOM API支持。虚拟DOM是在DOM的基础上建立一个抽象层,其实质是一个JavaScript对象,当数据和状态发生了变化，都会被自动高效的同步到虚拟DOM中,最后再将仅变化的部分同步到DOM中<br>组件化:组件是React的核心,一个完整的React应用是由若干个组件搭建起来的，每个组件有自己的数据和方法，组件具体如何划分，需要根据不同的项目来确定<br>单项数据流:react是单向数据流,父组件传递给子组件的数据,子组件能够使用,子组件要传值给父组件,或者要修改父组件的代码,都是要通过父组件传递过来的方法去实现</p><h1 id="官方提供的CDN地址："><a href="#官方提供的CDN地址：" class="headerlink" title="官方提供的CDN地址："></a>官方提供的CDN地址：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>react.min.js:实现React核心逻辑<br>react-dom.min.js:包含了具体的DOM渲染更新逻辑,以及服务端渲染的逻辑<br>babel.min.js:Babel可以将ES6代码转为ES5代码,Babel内嵌了对JSX的支持</p><h1 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h1><p>JSX是JavaScript XML语法扩展,使用XML标记来创建虚拟DOM和声明组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class="line">    document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p>ReactDOM.render是React的最基本方法,用于将模板转换为HTML语言,并插入指定的DOM节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用JSX,则&lt;script&gt;标签的type属性需要设置为text/babel</span><br></pre></td></tr></table></figure><p>JSX的优点</p><ul><li>可以使JavaScript XML仿照HTML来定义虚拟DOM</li><li>JSX是支持嵌入JavaScript表达式,JavaScript表达式写在花括号{}中</li><li>JSX防止注入攻击</li><li>程序代码更加简洁直观</li></ul><p>##把上边的程序改写成带JavaScript表达式的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">const name = &apos;world!&apos;;</span><br><span class="line">const element = &lt;h1&gt;Hello, &#123;name&#125;&lt;/h1&gt;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="注意的是表达式不支持if…else这样的语句-但是支持三元运算符和二元运算符"><a href="#注意的是表达式不支持if…else这样的语句-但是支持三元运算符和二元运算符" class="headerlink" title="注意的是表达式不支持if…else这样的语句,但是支持三元运算符和二元运算符"></a>注意的是表达式不支持if…else这样的语句,但是支持三元运算符和二元运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  const i = 1;</span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;i == 1 ? &apos;True&apos; : &apos;False&apos;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ,</span><br><span class="line">        document.getElementById(&apos;demo&apos;)</span><br><span class="line">      );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用了ES6的语法map来进行进行循环-循环时需要注意的是-新版本的React需要使用键-如果没有键虽然会出来效果-但是控制台会包错。键的作用是生成虚拟DOM时-需要使用key来进行标记-DOM更新时进行比较"><a href="#使用了ES6的语法map来进行进行循环-循环时需要注意的是-新版本的React需要使用键-如果没有键虽然会出来效果-但是控制台会包错。键的作用是生成虚拟DOM时-需要使用key来进行标记-DOM更新时进行比较" class="headerlink" title="使用了ES6的语法map来进行进行循环,循环时需要注意的是,新版本的React需要使用键,如果没有键虽然会出来效果,但是控制台会包错。键的作用是生成虚拟DOM时,需要使用key来进行标记,DOM更新时进行比较"></a>使用了ES6的语法map来进行进行循环,循环时需要注意的是,新版本的React需要使用键,如果没有键虽然会出来效果,但是控制台会包错。键的作用是生成虚拟DOM时,需要使用key来进行标记,DOM更新时进行比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">function NameList(props) &#123;</span><br><span class="line">  const names = props.names;</span><br><span class="line">  const listItems = names.map((name) =&gt;</span><br><span class="line">    &lt;li key=&#123;name.toString()&#125;&gt;</span><br><span class="line">      &#123;name&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">const names = [&apos;Vue.js&apos;,&apos;AngularJS&apos;,&apos;React&apos;];</span><br><span class="line">ReactDOM.render(</span><br><span class="line"> &lt;NameList names=&#123;names&#125; /&gt;,</span><br><span class="line">  document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSX允许直接在模版中插入JavaScript变量-如果这个变量是一个数组-则会扩展此数组的所有成员"><a href="#JSX允许直接在模版中插入JavaScript变量-如果这个变量是一个数组-则会扩展此数组的所有成员" class="headerlink" title="JSX允许直接在模版中插入JavaScript变量,如果这个变量是一个数组,则会扩展此数组的所有成员"></a>JSX允许直接在模版中插入JavaScript变量,如果这个变量是一个数组,则会扩展此数组的所有成员</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">   let arr = [</span><br><span class="line">        &lt;h1&gt;Hello world&lt;/h1&gt;,</span><br><span class="line">        &lt;h2&gt;学习React&lt;/h2&gt;,</span><br><span class="line">      ];</span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class="line">        document.getElementById(&apos;demo&apos;)</span><br><span class="line">      );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>总结:React在不使用JSX的情况下一样可以工作,然而使用JSX可以提高组件的可读性,因此推荐使用JSX</p><h1 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="组件 &amp; Props"></a>组件 &amp; Props</h1><h1 id="State-amp-生命周期"><a href="#State-amp-生命周期" class="headerlink" title="State &amp; 生命周期"></a>State &amp; 生命周期</h1>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门教程</title>
      <link href="/2019/11/10/Docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/11/10/Docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><p>它基于 Google 公司推出的 Go 语言实现<br>项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护<br><img src="/images/46.png" alt><br>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术<br>在LXC的基础上Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单<br>下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>虚拟机（virtual machine）就是带环境安装的一种解决方案，可以在一种操作系统里面运行另一种操作系统<br>这个方案有几个缺点:<br>（1）资源占用多<br>虚拟机会独占一部分内存和硬盘空间,<br>（2）冗余步骤多<br>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过<br>（3）启动慢<br>启动操作系统需要多久，启动虚拟机就需要多久，应用程序才能真正运行</p><h2 id="更快速的交付和部署"><a href="#更快速的交付和部署" class="headerlink" title="更快速的交付和部署"></a>更快速的交付和部署</h2><p>开发者可以使用一个标准的镜像来构建一套开发容器，可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间</p><h2 id="更高效的虚拟化"><a href="#更高效的虚拟化" class="headerlink" title="更高效的虚拟化"></a>更高效的虚拟化</h2><p>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率</p><h2 id="更轻松的迁移和扩展"><a href="#更轻松的迁移和扩展" class="headerlink" title="更轻松的迁移和扩展"></a>更轻松的迁移和扩展</h2><p>Docker容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等<br>这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个</p><h2 id="更简单的管理"><a href="#更简单的管理" class="headerlink" title="更简单的管理"></a>更简单的管理</h2><p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作<br>所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理<br>Docker 跟传统的虚拟化方式相比具有众多的优势<br>Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多<br>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小<br>传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可</p><h2 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h2><p>特性    容器    虚拟机<br>启动    秒级    分钟级<br>硬盘使用    一般为 MB    一般为 GB<br>性能    接近原生    弱于<br>系统支持量    单机支持上千个容器    一般几十个</p><h2 id="Docker-的用途"><a href="#Docker-的用途" class="headerlink" title="Docker 的用途"></a>Docker 的用途</h2><p>Docker 的主要用途:<br>（1）提供一次性的环境。本地测试他人的软件、持续集成的时候提供单元测试和构建的环境<br>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容<br>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务,在本地可以模拟微服务架构</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx入门教程</title>
      <link href="/2019/11/10/Nginx%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/11/10/Nginx%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP入门教程</title>
      <link href="/2019/10/29/PHP%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/29/PHP%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript入门教程</title>
      <link href="/2019/10/21/JavaScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/21/JavaScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JavaScript语言？"><a href="#什么是JavaScript语言？" class="headerlink" title="什么是JavaScript语言？"></a>什么是JavaScript语言？</h1><p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。<br>JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。<br>目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。<br>从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。<br>JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如Array、Date、Math等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p><ul><li>浏览器控制类：操作浏览器</li><li>DOM类：操作网页的各种元素</li><li>Web类：实现互联网的各种功能<br>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。<br>主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。</li><li>基本语法</li><li>标准库</li><li>浏览器 API</li><li>DOM<br>广泛的使用领域</li><li>浏览器的平台化<br>随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等</li><li>Node<br>Node 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。</li><li>数据库操作<br>JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。</li><li>移动平台开发<br>JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。<br>PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能<br>强大的性能<br>JavaScript 的性能优势体现在以下方面:</li><li>灵活的语法，表达力强<br>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程<br>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义<br>JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性</li><li>支持编译运行<br>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好<br>此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行</li><li>事件驱动和非阻塞式设计<br>JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量<br>使用外部的JS文件<br>JavaScript文件的扩展名.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;JS文档URL&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>书写于文档的头部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>算术运算符<br>运算符是处理数据的基本方法，用来从现有的值得到新的值。JavaScript 提供了多种运算符，覆盖了所有主要的运算<br>概述<br>JavaScript 共提供10个算术运算符，用来完成基本的算术运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">加法运算符：x + y</span><br><span class="line">减法运算符： x - y</span><br><span class="line">乘法运算符： x * y</span><br><span class="line">除法运算符：x / y</span><br><span class="line">指数运算符：x ** y</span><br><span class="line">余数运算符：x % y</span><br><span class="line">自增运算符：++x 或者 x++</span><br><span class="line">自减运算符：--x 或者 x--</span><br><span class="line">数值运算符： +x</span><br><span class="line">负数值运算符：-x</span><br></pre></td></tr></table></figure><p>减法、乘法、除法运算法比较单纯，就是执行相应的数学运算<br>加法运算符<br>基本规则<br>加法运算符（+）是最常见的运算符，用来求两个数值的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 1 // 2</span><br></pre></td></tr></table></figure><p>JavaScript 允许非数值的相加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true + true // 2</span><br><span class="line">5 + true // 6</span><br></pre></td></tr></table></figure><p>上面代码中，第一行是两个布尔值相加，第二行是数值与布尔值相加。这两种情况，布尔值都会自动转成数值，然后再相加<br>比较特殊的是，如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;a&apos; + &apos;bc&apos; // &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 + &apos;a&apos; // &quot;6a&quot;</span><br><span class="line">false + &apos;a&apos; // &quot;falsea&quot;</span><br></pre></td></tr></table></figure><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;6&apos; + 6 + 6 // &quot;666&quot;</span><br><span class="line">3 + 3 + &apos;6&apos; // &quot;66&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果<br>除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 - &apos;2&apos; // -1</span><br><span class="line">1 * &apos;2&apos; // 2</span><br><span class="line">1 / &apos;2&apos; // 0.5</span><br></pre></td></tr></table></figure><p>上面代码中，减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算<br>对象的相加<br>如果运算子是对象，必须先转成原始类型的值，然后再相加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: 1 &#125;;</span><br><span class="line">obj + 2 // &quot;[object Object]2&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，对象obj转成原始类型的值是[object Object]，再加2就得到了上面的结果<br>对象转成原始类型的值，规则如下<br>首先，自动调用对象的valueOf方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: 1 &#125;;</span><br><span class="line">obj.valueOf() // &#123; p: 1 &#125;</span><br></pre></td></tr></table></figure><p>一般来说，对象的valueOf方法总是返回对象自身，这时再自动调用对象的toString方法，将其转为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: 1 &#125;;</span><br><span class="line">obj.valueOf().toString() // &quot;[object Object]&quot;</span><br></pre></td></tr></table></figure><p>对象的toString方法默认返回[object Object]，所以就得到了最前面那个例子的结果<br>上面代码中，我们定义obj对象的valueOf方法返回1，于是obj + 2就得到了3,由于valueOf方法直接返回一个原始类型的值，所以不再调用toString方法<br>下面是自定义toString方法的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  toString: function () &#123;</span><br><span class="line">    return &apos;hello&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj + 66 // &quot;hello6&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，对象obj的toString方法返回字符串hello。前面说过，只要有一个运算子是字符串，加法运算符就变成连接运算符，返回连接后的字符串<br>这里有一个特例，如果运算子是一个Date对象的实例，那么会优先执行toString方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Date();</span><br><span class="line">obj.valueOf = function () &#123; return 1 &#125;;</span><br><span class="line">obj.toString = function () &#123; return &apos;hello&apos; &#125;;</span><br><span class="line">obj + 6 // &quot;hello6&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，对象obj是一个Date对象的实例，并且自定义了valueOf方法和toString方法，结果toString方法优先执行<br>余数运算符<br>余数运算符（%）返回前一个运算子被后一个运算子除，所得的余数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 % 5 // 1</span><br></pre></td></tr></table></figure><p> 需要注意的是，运算结果的正负号由第一个运算子的正负号决定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1 % 2 // -1</span><br><span class="line">1 % -2 // 1</span><br></pre></td></tr></table></figure><p> 所以，为了得到负数的正确余数值，可以先使用绝对值函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 错误的写法</span><br><span class="line">function isOdd(n) &#123;</span><br><span class="line">  return n % 2 === 1;</span><br><span class="line">&#125;</span><br><span class="line">isOdd(-5) // false</span><br><span class="line">isOdd(-4) // false</span><br><span class="line"></span><br><span class="line">// 正确的写法</span><br><span class="line">function isOdd(n) &#123;</span><br><span class="line">  return Math.abs(n % 2) === 1;</span><br><span class="line">&#125;</span><br><span class="line">isOdd(-5) // true</span><br><span class="line">isOdd(-4) // false</span><br></pre></td></tr></table></figure><p> 余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6.5 % 2.1</span><br><span class="line">// 0.19999999999999973</span><br></pre></td></tr></table></figure><p>自增和自减运算符<br>自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">++x // 2</span><br><span class="line">x // 2</span><br><span class="line"></span><br><span class="line">--x // 1</span><br><span class="line">x // 1</span><br></pre></td></tr></table></figure><p>上面代码的变量x自增后，返回2，再进行自减，返回1。这两种情况都会使得，原始变量x的值发生改变<br>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值<br>自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var y = 1;</span><br><span class="line">x++ // 1</span><br><span class="line">++y // 2</span><br></pre></td></tr></table></figure><p>上面代码中，x是先返回当前值，然后自增，所以得到1；y是先自增，然后返回新的值，所以得到2<br>数值运算符，负数值运算符<br>数值运算符（+）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）<br>数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+true // 1</span><br><span class="line">+[] // 0</span><br><span class="line">+&#123;&#125; // NaN</span><br><span class="line"> 上面代码表示，非数值经过数值运算符以后，都变成了数值（最后一行</span><br><span class="line">NaN</span><br><span class="line">也是数值） 负数值运算符(-)也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符</span><br><span class="line">var x = 1;</span><br><span class="line">-x // -1</span><br><span class="line">-(-x) // 1</span><br></pre></td></tr></table></figure><p>上面代码最后一行的圆括号不可少，否则会变成自减运算符</p><p>数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值</p><p>指数运算符</p><p>指数运算符（**）完成指数运算，前一个运算子是底数，后一个运算子是指数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 ** 4 // 16</span><br></pre></td></tr></table></figure><p>注意，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 相当于 2 ** (3 ** 2)</span><br><span class="line">2 ** 3 ** 2</span><br><span class="line">// 512</span><br></pre></td></tr></table></figure><p>上面代码中，由于指数运算符是右结合，所以先计算第二个指数运算符，而不是第一个<br>赋值运算符<br>赋值运算符（Assignment Operators）用于给变量赋值<br>最常见的赋值运算符，当然就是等号（=）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将 1 赋值给变量 x</span><br><span class="line">var x = 1;</span><br><span class="line"></span><br><span class="line">// 将变量 y 的值赋值给变量 x</span><br><span class="line">var x = y;</span><br></pre></td></tr></table></figure><p>赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 等同于 x = x + y</span><br><span class="line">x += y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x - y</span><br><span class="line">x -= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x * y</span><br><span class="line">x *= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x / y</span><br><span class="line">x /= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x % y</span><br><span class="line">x %= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x ** y</span><br><span class="line">x **= y</span><br></pre></td></tr></table></figure><p>下面是与位运算符的结合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 等同于 x = x &gt;&gt; y</span><br><span class="line">x &gt;&gt;= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x &lt;&lt; y</span><br><span class="line">x &lt;&lt;= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x &gt;&gt;&gt; y</span><br><span class="line">x &gt;&gt;&gt;= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x &amp; y</span><br><span class="line">x &amp;= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x | y</span><br><span class="line">x |= y</span><br><span class="line"></span><br><span class="line">// 等同于 x = x ^ y</span><br><span class="line">x ^= y</span><br></pre></td></tr></table></figure><p>这些复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量<br>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 &gt; 1 // true</span><br></pre></td></tr></table></figure><p>上面代码比较2是否大于1，返回true<br>注意，比较运算符可以比较各种类型的值，不仅仅是数值<br>JavaScript 一共提供了8个比较运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 大于运算符</span><br><span class="line">&lt; 小于运算符</span><br><span class="line">&lt;= 小于或等于运算符</span><br><span class="line">&gt;= 大于或等于运算符</span><br><span class="line">== 相等运算符</span><br><span class="line">=== 严格相等运算符</span><br><span class="line">!= 不相等运算符</span><br><span class="line">!== 严格不相等运算符</span><br></pre></td></tr></table></figure><p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小<br>非相等运算符：字符串的比较<br>字符串按照字典顺序进行比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;cat&apos; &gt; &apos;dog&apos; // false</span><br><span class="line">&apos;cat&apos; &gt; &apos;catalog&apos; // false</span><br></pre></td></tr></table></figure><p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;cat&apos; &gt; &apos;Cat&apos; // true&apos;</span><br></pre></td></tr></table></figure><p>上面代码中，小写的c的 Unicode 码点（99）大于大写的C的 Unicode 码点（67），所以返回true<br>由于所有字符都有 Unicode 码点，因此汉字也可以比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;大&apos; &gt; &apos;小&apos; // false</span><br></pre></td></tr></table></figure><p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回false<br>非相等运算符：非字符串的比较<br>如果两个运算子之中，至少有一个不是字符串，需要分成以下两种情况<br>（1）原始类型值<br>如果两个运算子都是原始类型的值，则是先转成数值再比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 &gt; &apos;5&apos; // true</span><br><span class="line">// 等同于 6 &gt; Number(&apos;5&apos;)</span><br><span class="line">// 即 6 &gt; 5</span><br><span class="line">true &gt; false // true</span><br><span class="line">// 等同于 Number(true) &gt; Number(false)</span><br><span class="line">// 即 1 &gt; 0</span><br><span class="line">2 &gt; true // true</span><br><span class="line">// 等同于 2 &gt; Number(true)</span><br><span class="line">// 即 2 &gt; 1</span><br></pre></td></tr></table></figure><p>上面代码中，字符串和布尔值都会先转成数值，再进行比较<br>这里需要注意与NaN的比较，任何值（包括NaN本身）与NaN比较，返回的都是false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &gt; NaN // false</span><br><span class="line">1 &lt;= NaN // false</span><br><span class="line">&apos;1&apos; &gt; NaN // false</span><br><span class="line">&apos;1&apos; &lt;= NaN // false</span><br><span class="line">NaN &gt; NaN // false</span><br><span class="line">NaN &lt;= NaN // false</span><br></pre></td></tr></table></figure><p>（2）对象<br>如果运算子是对象，会转为原始类型的值，再进行比较<br>对象转换成原始类型的值，算法是先调用valueOf方法；如果返回的还是对象，再接着调用toString方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var x = [2];</span><br><span class="line">x &gt; &apos;11&apos; // true</span><br><span class="line">// 等同于 [2].valueOf().toString() &gt; &apos;11&apos;</span><br><span class="line">// 即 &apos;2&apos; &gt; &apos;11&apos;</span><br><span class="line"></span><br><span class="line">x.valueOf = function () &#123; return &apos;1&apos; &#125;;</span><br><span class="line">x &gt; &apos;11&apos; // false</span><br><span class="line">// 等同于 [2].valueOf() &gt; &apos;11&apos;</span><br><span class="line">// 即 &apos;1&apos; &gt; &apos;11&apos;</span><br><span class="line">两个对象之间的比较也是如此</span><br><span class="line"></span><br><span class="line">[2] &gt; [1] // true</span><br><span class="line">// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()</span><br><span class="line">// 即 &apos;2&apos; &gt; &apos;1&apos;</span><br><span class="line"></span><br><span class="line">[2] &gt; [11] // true</span><br><span class="line">// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()</span><br><span class="line">// 即 &apos;2&apos; &gt; &apos;11&apos;</span><br><span class="line"></span><br><span class="line">&#123; x: 2 &#125; &gt;= &#123; x: 1 &#125; // true</span><br><span class="line">// 等同于 &#123; x: 2 &#125;.valueOf().toString() &gt;= &#123; x: 1 &#125;.valueOf().toString()</span><br><span class="line">// 即 &apos;[object Object]&apos; &gt;= &apos;[object Object]</span><br></pre></td></tr></table></figure><p>严格相等运算符<br>JavaScript 提供两种相等运算符：==和===<br>简单说，它们的区别是相等运算符（==）比较两个值是否相等，严格相等运算符（===）比较它们是否为“同一个值”<br>如果两个值不是同一类型，严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，再用严格相等运算符进行比较<br>介绍严格相等运算符的算法<br>（1）不同类型的值<br>如果两个值的类型不同，直接返回false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 === &quot;1&quot; // false</span><br><span class="line">true === &quot;true&quot; // false</span><br></pre></td></tr></table></figure><p>上面代码比较数值的1与字符串的“1”、布尔值的true与字符串”true”，因为类型不同，结果都是false<br>同一类的原始类型值<br>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 === 0x1 // true</span><br></pre></td></tr></table></figure><p>上面代码比较十进制的1与十六进制的1，因为类型和值都相同，返回true<br>需要注意的是，NaN与任何值都不相等（包括自身）。另外，正0等于负0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NaN === NaN  // false</span><br><span class="line">+0 === -0 // true</span><br></pre></td></tr></table></figure><p>（3）复合类型值<br>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; === &#123;&#125; // false</span><br><span class="line">[] === [] // false</span><br><span class="line">(function () &#123;&#125; === function () &#123;&#125;) // false</span><br></pre></td></tr></table></figure><p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是false<br>如果两个变量引用同一个对象，则它们相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var v1 = &#123;&#125;;</span><br><span class="line">var v2 = v1;</span><br><span class="line">v1 === v2 // true</span><br></pre></td></tr></table></figure><p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;&#125;;</span><br><span class="line">var obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1 &gt; obj2 // false</span><br><span class="line">obj1 &lt; obj2 // false</span><br><span class="line">obj1 === obj2 // false</span><br></pre></td></tr></table></figure><p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回false<br>（4）undefined 和 null<br>undefined和null与自身严格相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined === undefined // true</span><br><span class="line">null === null // true</span><br></pre></td></tr></table></figure><p>由于变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var v1;</span><br><span class="line">var v2;</span><br><span class="line">v1 === v2 // true</span><br></pre></td></tr></table></figure><p>严格不相等运算符<br>严格相等运算符有一个对应的“严格不相等运算符”（!==），它的算法就是先求严格相等运算符的结果，然后返回相反值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 !== &apos;1&apos; // true</span><br><span class="line">// 等同于</span><br><span class="line">!(1 === &apos;1&apos;)</span><br></pre></td></tr></table></figure><p>上面代码中，感叹号!是求出后面表达式的相反值<br>相等运算符<br>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 == 1.0</span><br><span class="line">// 等同于</span><br><span class="line">1 === 1.0</span><br></pre></td></tr></table></figure><p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。下面分成四种情况，讨论不同类型的值互相比较的规则<br>（1）原始类型值<br>原始类型的值会转换成数值再进行比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1 == true // true</span><br><span class="line">// 等同于 1 === Number(true)</span><br><span class="line"></span><br><span class="line">0 == false // true</span><br><span class="line">// 等同于 0 === Number(false)</span><br><span class="line"></span><br><span class="line">2 == true // false</span><br><span class="line">// 等同于 2 === Number(true)</span><br><span class="line"></span><br><span class="line">2 == false // false</span><br><span class="line">// 等同于 2 === Number(false)</span><br><span class="line"></span><br><span class="line">&apos;true&apos; == true // false</span><br><span class="line">// 等同于 Number(&apos;true&apos;) === Number(true)</span><br><span class="line">// 等同于 NaN === 1</span><br><span class="line"></span><br><span class="line">&apos;&apos; == 0 // true</span><br><span class="line">// 等同于 Number(&apos;&apos;) === 0</span><br><span class="line">// 等同于 0 === 0</span><br><span class="line"></span><br><span class="line">&apos;&apos; == false  // true</span><br><span class="line">// 等同于 Number(&apos;&apos;) === Number(false)</span><br><span class="line">// 等同于 0 === 0</span><br><span class="line"></span><br><span class="line">&apos;1&apos; == true  // true</span><br><span class="line">// 等同于 Number(&apos;1&apos;) === Number(true)</span><br><span class="line">// 等同于 1 === 1</span><br><span class="line"></span><br><span class="line">&apos;\n  123  \t&apos; == 123 // true</span><br><span class="line">// 因为字符串转为数字时，省略前置和后置的空格</span><br></pre></td></tr></table></figure><p>上面代码将字符串和布尔值都转为数值，然后再进行比较<br>（2）对象与原始类型值比较<br>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 对象与数值比较时，对象转为数值</span><br><span class="line">[1] == 1 // true</span><br><span class="line">// 等同于 Number([1]) == 1</span><br><span class="line"></span><br><span class="line">// 对象与字符串比较时，对象转为字符串</span><br><span class="line">[1] == &apos;1&apos; // true</span><br><span class="line">// 等同于 String([1]) == &apos;1&apos;</span><br><span class="line">[1, 2] == &apos;1,2&apos; // true</span><br><span class="line">// 等同于 String([1, 2]) == &apos;1,2&apos;</span><br><span class="line"></span><br><span class="line">// 对象与布尔值比较时，两边都转为数值</span><br><span class="line">[1] == true // true</span><br><span class="line">// 等同于 Number([1]) == Number(true)</span><br><span class="line">[2] == true // false</span><br><span class="line">// 等同于 Number([2]) == Number(true)</span><br></pre></td></tr></table></figure><p>上面代码中，数组[1]与数值进行比较，会先转成数值，再进行比较；与字符串进行比较，会先转成字符串，再进行比较；与布尔值进行比较，对象和布尔值都会先转成数值，再进行比较<br>（3）undefined 和 null<br>undefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">false == null // false</span><br><span class="line">false == undefined // false</span><br><span class="line">0 == null // false</span><br><span class="line">0 == undefined // false</span><br><span class="line">undefined == null // true</span><br></pre></td></tr></table></figure><p>（4）相等运算符的缺点<br>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0 == &apos;&apos;             // true</span><br><span class="line">0 == &apos;0&apos;            // true</span><br><span class="line"></span><br><span class="line">2 == true           // false</span><br><span class="line">2 == false          // false</span><br><span class="line"></span><br><span class="line">false == &apos;false&apos;    // false</span><br><span class="line">false == &apos;0&apos;        // true</span><br><span class="line"></span><br><span class="line">false == undefined  // false</span><br><span class="line">false == null       // false</span><br><span class="line"></span><br><span class="line">null == undefined   // true</span><br><span class="line">&apos; \t\r\n &apos; == 0     // true</span><br></pre></td></tr></table></figure><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（==），最好只使用严格相等运算符（===）<br>不相等运算符<br>相等运算符有一个对应的“不相等运算符”（!=），它的算法就是先求相等运算符的结果，然后返回相反值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 != &apos;1&apos; // false</span><br><span class="line">// 等同于</span><br><span class="line">!(1 == &apos;1&apos;)</span><br></pre></td></tr></table></figure><p>JavaScript的三个主要组成部分是:ECMAScript(核心),DOM（文档对象模型）,BOM（浏览器对象模型）<br><img src="/images/17.PNG" alt><br>数据类型<br>ECMAScript中有5种基本数据类型:Undefined、Null、Boolean、Number和String,还有一种复杂数据类型-Object,Object本质上是由一组无序的名值对组成的<br>关键字 简介<br>undefined 声明了但未赋值<br>Boolean 布尔<br>Number  数字<br>String  字符串<br>var 动态类型<br>typeof  变量类型判断<br>null  空对象/对象不存在<br>JavaScript 字符串<br>字符串是存储字符的变量<br>字符串是引号中的文本,可以使用单引号或双引号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var name=&quot;小明&quot;;</span><br><span class="line">var age=&apos;15&apos;;</span><br><span class="line">var sex=&quot;男&quot;;</span><br><span class="line">document.write(name + &quot;&lt;br&gt;&quot;)</span><br><span class="line">document.write(age + &quot;&lt;br&gt;&quot;)</span><br><span class="line">document.write(sex + &quot;&lt;br&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JavaScript数字<br>JavaScript 只有一种数字类型。<br>数字可以带小数点,也可以不带:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">  var a=330; //十进制</span><br><span class="line">  var b=0330;//第一位是0，表示八进制</span><br><span class="line">  var c=0xA;//0x开头表示十六进制</span><br><span class="line">  var d=3.30;//有小数点表示浮点数</span><br><span class="line">  var e=3.30e2;//使用e的幂表示科学计数法</span><br><span class="line">  document.write(&quot;十进制 330 的值: &quot;+a);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  document.write(&quot;八进制 0330的值: &quot;+b);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  document.write(&quot;十六进制 0xA 的值: &quot;+c);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  document.write(&quot;浮点数 3.30的值: &quot;+d);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  document.write(&quot;科学记数法 3.30e2的值: &quot;+e);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JavaScript布尔<br>布尔（逻辑）只能有两个值:true或false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">  var x=true;</span><br><span class="line">  var y=false;</span><br><span class="line">  document.write(&quot;布尔值:&quot;+x);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;)</span><br><span class="line">  document.write(&quot;布尔值:&quot;+y);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JavaScript对象<br>对象由花括号分隔。<br>在括号内部，对象的属性以名称和值对的形式(name:value)来定义 属性由逗号分隔:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">  &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      var test =&#123;</span><br><span class="line">          name:&quot;张三&quot;,</span><br><span class="line">          age:&quot;12&quot;,</span><br><span class="line">          sex:&quot;男&quot;,</span><br><span class="line">      &#125;;</span><br><span class="line">      document.getElementById(&quot;demo&quot;).innerHTML = test.name +</span><br><span class="line">      test.age+test.sex;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Undefined和Null<br>Undefined这个值表示变量不含有值<br>可以通过将变量的值设置为null来清空变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a;</span><br><span class="line">var b=&quot;JavaScript&quot;;</span><br><span class="line">document.write(a + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(b + &quot;&lt;br&gt;&quot;);</span><br><span class="line">var b=null</span><br><span class="line">document.write(b + &quot;&lt;br&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JavaScript拥有动态类型<br>JavaScript拥有动态类型。可用作不同的类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var a; //undefined</span><br><span class="line">    var b =330; //数值</span><br><span class="line">    var c = &quot;JavaScript&quot;; //字符串值</span><br><span class="line">    document.write(a);</span><br><span class="line">    document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">    document.write(b);</span><br><span class="line">    document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">    document.write(c);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>typeof运算符<br>typeof运算符返回变量或表达式的类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var a;</span><br><span class="line">  document.write(&apos;声明了未赋值的时候，类型是： &apos;+typeof a);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  b=330;</span><br><span class="line">  document.write(&apos;赋值为330，类型是： &apos;+typeof b);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  c=33.0;</span><br><span class="line">  document.write(&apos;赋值为33.0，类型是： &apos;+typeof c);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  d=true;</span><br><span class="line">  document.write(&apos;赋值为true，类型是：&apos;+typeof d);</span><br><span class="line">  document.write(&quot;&lt;br&gt;&quot;);</span><br><span class="line">  e=&quot;JavaScript&quot;;</span><br><span class="line">  document.write(&apos;赋值为JavaScript，类型是： &apos;+typeof e);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 数组<br>JavaScript 数组用方括号书写 数组由逗号分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var test= [&quot;jQuery&quot;, &quot;Vue&quot;, &quot;JavaScript&quot;];</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = test[2];</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>字符型(string),必须括在单引号/双引号之间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">转义符:</span><br><span class="line">\n,换行</span><br><span class="line">\r,回车</span><br><span class="line">\t,水平制表符</span><br><span class="line">\v,垂直制表符</span><br><span class="line">\\,反斜线</span><br><span class="line">\&apos;,单引号</span><br><span class="line">\&quot;,双引号</span><br></pre></td></tr></table></figure><p>数值型(Number),可以存储整数或浮点数,可以带有符号位<br>布尔型(Boolean),只有true和false<br>数据类型的自动转换<br>字符+数字:数字转换成字符<br>数字+布尔:布尔转换成数字(true=&gt;1,false=&gt;0)<br>字符+布尔:布尔转换成字符(true=&gt;”true”,false=&gt;”false”)<br>布尔+布尔:布尔转换成数字(true=&gt;1,false=&gt;0)<br>数据类型的强制转换<br>parseInt,转换成整数<br>parseFloat,转换成浮点型<br>变量<br>[var] 变量名称;<br>[var] 变量名称 = 值;<br>说明:建议在声明变量时使用var关键字<br>typeof操作符<br>检测变量的数据类型-typeof,负责提供这方面信息的操作符,对一个值使用typeof操作符可能返回下列某个字符串:<br>“undefined”-如果这个值未定义<br>“boolean”-如果这个值是布尔值<br>“string”-如果这个值是字符串<br>“number”-如果这个值是数值<br>“object”-如果这个值是对象或null<br>“function”-如果这个值是函数<br>JavaScript的内置对象<br>String<br>创建String对象<br>直接量方式<br>var object = ‘值’;<br>var object = “值”;<br>构造函数方式<br>var object  = new String(“value”);<br>属性<br>length<br>描述:获取字符串的长度<br>语法:int object.length<br>方法<br>toLowerCase()<br>描述:转换成小写字母<br>语法:string object.toLowerCase()<br>toUpperCase()<br>描述:转换成大写字母<br>语法:string object.toUpperCase()<br>substr()<br>描述:截取字符串<br>语法:string object.substr(int start[,int length])<br>说明:<br>A.字符从0开始编号<br>B.起始位置为负数,则倒数<br>substring()<br>描述:截取字符串<br>语法:string object.substring(start[,end])<br>说明:包含起始位置,但不包含结束位置。<br>indexOf()<br>描述:返回一个字符串在另一个字符串第一次出现的位置<br>语法:int object.indexOf(string str[,int start])<br>说明:如果没有出现则返回-1<br>lastIndexOf()<br>描述:返回一个字符串在另一个字符串最后一次出现的位置<br>语法:int object.lastIndexOf(string str[,int start])<br>说明:如果没有出现则返回-1<br>charAt(int pos) 等价于 substr(int pos,1)<br>replace()<br>描述:字符替换<br>语法:string object.replace(object regExp,string replacement)<br>split<br>描述:将字符串拆分成数组<br>语法:array object.split(string separator)<br>Math<br>属性<br>Math.PI<br>Math.SQRT2<br>方法<br>Math.ceil()<br>描述:向上取整<br>语法:int Math.ceil(float val)<br>Math.floor()<br>描述:向下取整<br>语法:int Math.floor(float val)<br>Math.pow()<br>描述:幂运算<br>语法:float Math.pow(float base ,float exp)<br>Math.sqrt()<br>描述:平方<br>语法:float Math.sqrt(float val)<br>Math.min()<br>描述:返回最小值<br>语法:float Math.min(float val,float val,….)<br>Math.max()<br>描述:返回最大值<br>语法:float Math.max(float val,float val,….)<br>Math.round()<br>描述:四舍五入<br>语法:float Math.round(float val)<br>说明:保留到整数位。<br>Math.random()<br>描述:产生随机数<br>语法:float Math.random()<br>Array<br>创建数组<br> 直接量方式<br> var object = [值,….]<br> 构建函数方式<br> var object  = new Array(值,…)<br> 属性<br> length<br> 描述:返回数组成员的数量<br> 语法:int object.length<br>  访问数组成员<br>  数组名称[下标]<br>  说明:数组的下标从0开始。<br>   for…in语句<br>   作用:遍历数组/对象<br>   语法:<br>   for(变量名称 in 数组/对象){<br>        …<br>    }<br>    方法<br>    join()<br>    描述:将数组成员连接成字符串<br>    语法:string object.join([string separator])<br>    push()<br>    描述:在数组的未尾添加一个或多个成员<br>    语法:int object.push(val,…)<br>    unshift()<br>    描述:在数组的开头添加一个或多个成员<br>    语法:int object.unshift(val,…)<br>    pop()<br>    描述:删除数组的最后一个成员，并且返回该成员<br>    语法:val object.pop()<br>    shift()<br>    描述:删除数组的第一个成员，并且返回该成员<br>    语法:val object.shift()<br>    slice()<br>    描述:截取数组<br>    语法:array object.slice(start[,end])<br>    reverse()<br>    描述:数组反转<br>    语法:array object.reverse()<br>Date<br>创建Date对象<br>var object = new Date()<br>方法<br>getYear()<br>描述:获取年份<br>语法:int object.getYear()<br>getFullYear()<br>描述:获取年份<br>语法:int object.getFullYear()<br>getMonth()<br>描述:获取月份(取值范围为0~11)<br>语法:int object.getMonth()<br>getDate()<br>描述:获取日期(多少号)<br>语法:int object.getDate()<br>getDay()<br>描述:获取星期的第几天(0为星期日,依次类推)<br>语法:int object.getDay()<br>getHours()<br>描述:获取小时<br>语法:int object.getHours()<br>getMinutes()<br>描述:获取分钟<br>语法:int object.getMinutes()<br>getSeconds()<br>描述:获取秒<br>语法:int object.getSeconds()<br>getTime()<br>描述:获取毫秒<br>语法:int object.getTime()</p><h2 id="常用Date类方法"><a href="#常用Date类方法" class="headerlink" title="常用Date类方法"></a>常用Date类方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">console.log(date.getYear());  // 获取当前年份(2位)</span><br><span class="line">console.log(date.getFullYear()); // 获取完整的年份(4位,1970-????)</span><br><span class="line">console.log(date.getMonth()); // 获取当前月份(0-11,0代表1月)</span><br><span class="line">console.log(date.getDate());// 获取当前日(1-31)</span><br><span class="line">console.log(date.getDay()); // 获取当前星期X(0-6,0代表星期天)</span><br><span class="line">console.log(date.getTime()); // 获取当前时间(从1970.1.1开始的毫秒数)</span><br><span class="line">console.log(date.getHours()); // 获取当前小时数(0-23)</span><br><span class="line">console.log(date.getMinutes()); // 获取当前分钟数(0-59)</span><br><span class="line">console.log(date.getSeconds()); // 获取当前秒数(0-59)</span><br><span class="line">console.log(date.getMilliseconds()); // 获取当前毫秒数(0-999)</span><br><span class="line">console.log(date.toLocaleDateString()); // 获取当前日期</span><br><span class="line">console.log(date.toLocaleTimeString()); // 获取当前时间</span><br><span class="line">console.log(date.toLocaleString());// 获取日期与时间</span><br></pre></td></tr></table></figure><p>获取当月天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getCountDay() &#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    /* 获取当前月份 */</span><br><span class="line">    var month = date.getMonth();</span><br><span class="line">    /*  生成实际的月份: 由于month会比实际月份小1, 故需加1 */</span><br><span class="line">    date.setMonth(month + 1);</span><br><span class="line">    /* 将日期设置为0 */</span><br><span class="line">    date.setDate(0);</span><br><span class="line">    /* 返回当月的天数 */</span><br><span class="line"></span><br><span class="line">    return date.getDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var day = getCountDay();</span><br><span class="line">console.log(day);</span><br></pre></td></tr></table></figure><p>获取当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function getdate()&#123;</span><br><span class="line">  var date = new Date();</span><br><span class="line">  var date1 = &quot;-&quot;;</span><br><span class="line">  var date2 = &quot;:&quot;;</span><br><span class="line">    var mouth = date.getMonth()+1;</span><br><span class="line">    var strdate = date.getDate();</span><br><span class="line">    if (mouth &gt;=1 &amp;&amp; mouth &lt;=9) &#123;</span><br><span class="line">       mouth = &quot;0&quot; + mouth;</span><br><span class="line">  &#125;</span><br><span class="line">  if (strdate &gt;=0 &amp;&amp; strdate &lt;=9) &#123;</span><br><span class="line">      strdate = &quot;0&quot; + strdate;</span><br><span class="line">  &#125;</span><br><span class="line">    var date3 = date.getFullYear() + date1 + mouth + date1 + strdate + &quot; &quot; +date.getHours() + date2 +date.getMinutes() + date2 + date.getSeconds();</span><br><span class="line">    return date3;</span><br><span class="line">&#125;</span><br><span class="line"> var date = getdate();</span><br><span class="line"> console.log(date);</span><br></pre></td></tr></table></figure><p>将时间戳转换成日期格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function timestamp(timestamp)&#123;</span><br><span class="line">  if (!timestamp) &#123;</span><br><span class="line">     return &apos;-&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  let date = new Date(timestamp);</span><br><span class="line">  let Y = date.getFullYear() + &apos;-&apos;;</span><br><span class="line">  let M = (date.getMonth() + 1 &lt; 10 ? &apos;0&apos; + (date.getMonth() + 1) : date.getMonth() + 1) + &apos;-&apos;;</span><br><span class="line">  let D = (date.getDate() &lt; 10 ? &apos;0&apos; + date.getDate() : date.getDate()) + &apos; &apos;;</span><br><span class="line">  let h = (date.getHours() &lt; 10 ? &apos;0&apos; + date.getHours() : date.getHours()) + &apos;:&apos;;</span><br><span class="line">  let m = (date.getMinutes() &lt; 10 ? &apos;0&apos; + date.getMinutes() : date.getMinutes()) + &apos;:&apos;;</span><br><span class="line">  let s = (date.getSeconds() &lt; 10 ? &apos;0&apos; + date.getSeconds() : date.getSeconds());</span><br><span class="line"></span><br><span class="line">    return Y + M + D + h + m + s;</span><br><span class="line">&#125;</span><br><span class="line">timestamp(1583415070123);</span><br><span class="line">console.log(timestamp(1583415070123)); //2020-03-05 21:31:10</span><br></pre></td></tr></table></figure><p>将日期格式转换成时间戳：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function timestamp(time) &#123;</span><br><span class="line">    var date = new Date(time);</span><br><span class="line">    // 有三种方式获取</span><br><span class="line">    var time1 = date.getTime();</span><br><span class="line">    var time2 = date.valueOf();</span><br><span class="line">    var time3 = Date.parse(date);</span><br><span class="line"></span><br><span class="line">    return time1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(timestamp(&apos;2020-03-05 21:55:49:123&apos;));</span><br></pre></td></tr></table></figure><p>自定义函数<br>什么是自定义函数<br>完成某种功能的代码段。<br>创建自定义函数<br>function 函数名称([参数[,…]]){<br>    …<br>    …<br>    [return 返回值]<br>}<br>调用自定义函数<br>[var 变量名称=] 函数名称([值[,…]])<br>什么是DOM?<br>DOM[Document Object Model],文档对象模型。<br>DOM提供处理XML/HTML文档的API。<br>DOM的主要操作:节点的获取、节点的动态的创建、创建的删除及节点的替换。<br>节点(Node),在DOM树中所存在的任何一个元素(如HTML元素，文本、属性等)。<br>节点的类型<br>Node.ELEMENT_NODE,1(元素类型)<br>Node.ATTRIBUTE_NODE,2(属性类型)<br>Node.TEXT_NODE,3(文本类型)<br>Node.COMMENT_NODE,8(注释类型)<br>Node.DOCUMENT_NODE,9(文档类型)<br>document对象<br>属性<br>方法<br>getElementById()<br>描述:根据ID获取对象<br>语法:Element document.getElementById(string id)<br>createElement()<br>描述:创建元素节点<br>语法:Element document.createElement(string tagName)<br>createTextNode<br>描述:创建文本节点<br>语法:textNode document.createTextNode(string value)<br>createComment<br>描述:创建注释节点<br>语法:commentNode document.createComment(string value)<br>createAttribute<br>描述:创建属性节点<br>语法:attrNode document.createAttribute(string name)<br>Node接口<br>属性<br>firstChild<br>lastChild<br>nextSibling<br>previousSibling<br>parentNode<br>childNodes<br>nodeName<br>nodeType<br>nodeValue<br>方法<br>appendChild()<br>描述:追加子节点<br>语法:object.appendChild(node)<br>insertBefore()<br>描述:插入子节点<br>语法:object.insertBefore(newNode[,refNode])</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序入门教程</title>
      <link href="/2019/10/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序配置文件"><a href="#小程序配置文件" class="headerlink" title="小程序配置文件"></a>小程序配置文件</h1><p>一个小程序页面由四个文件组成，分别是：<br>文件类型    必需    作用<br>js    是    页面逻辑<br>wxml    是    页面结构<br>json    否    页面配置<br>wxss    否    页面样式表</p><blockquote><p>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名<br>允许上传的文件<br>在项目目录中，以下文件会经过编译，因此上传之后无法直接访问到：.js、app.json、.wxml、.wxss（其中 wxml 和 wxss 文件仅针对在 app.json 中配置了的页面）。除此之外，只有后缀名在白名单内的文件可以被上传，不在白名单列表内文件在开发工具能被访问到，但无法被上传。具体白名单列表如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wxs</span><br><span class="line">png</span><br><span class="line">jpg</span><br><span class="line">jpeg</span><br><span class="line">gif</span><br><span class="line">svg</span><br><span class="line">json</span><br><span class="line">cer</span><br><span class="line">mp3</span><br><span class="line">aac</span><br><span class="line">m4a</span><br><span class="line">mp4</span><br><span class="line">wav</span><br><span class="line">ogg</span><br><span class="line">silk</span><br></pre></td></tr></table></figure><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。<br>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：<br>文件    必需    作用<br>app.js    是    小程序逻辑<br>app.json    是    小程序公共配置<br>app.wxss    否    小程序公共样式表</p><h1 id="小程序配置-app-json"><a href="#小程序配置-app-json" class="headerlink" title="小程序配置 app.json"></a>小程序配置 app.json</h1><p>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等<br>app.json 配置内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">//页面路径列表</span><br><span class="line">  &quot;pages&quot;: [</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/index&quot;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">//全局的默认窗口表现</span><br><span class="line"></span><br><span class="line">  &quot;window&quot;: &#123;</span><br><span class="line"></span><br><span class="line">//导航栏样式，仅支持以下值:default 默认样式、custom 自定义导航栏</span><br><span class="line"></span><br><span class="line">   &quot;backgroundTextStyle&quot;: &quot;light&quot;,</span><br><span class="line"></span><br><span class="line">  //顶部背景色，仅支持十六进制颜色</span><br><span class="line"></span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line"></span><br><span class="line">  //导航栏标题文字内容</span><br><span class="line"></span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;极客教程&quot;,</span><br><span class="line"></span><br><span class="line">  //导航栏标题颜色，仅支持 black / white</span><br><span class="line"></span><br><span class="line">    &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line"></span><br><span class="line">//根据项目需求决定下面几个内容是否添加</span><br><span class="line"></span><br><span class="line">//窗口的背景色</span><br><span class="line"></span><br><span class="line">&quot;backgroundColor&quot;:&quot;#ffffff&quot;,</span><br><span class="line"></span><br><span class="line">//下拉 loading 的样式，仅支持 dark / light</span><br><span class="line"></span><br><span class="line">&quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line"></span><br><span class="line">//顶部窗口的背景色，仅 iOS 支持</span><br><span class="line"></span><br><span class="line">&quot;backgroundColorTop&quot;:&quot;#ffffff&quot;,</span><br><span class="line"></span><br><span class="line">//底部窗口的背景色，仅 iOS 支持</span><br><span class="line"></span><br><span class="line">&quot;backgroundColorBottom&quot;:&quot;#ffffff&quot;,</span><br><span class="line"></span><br><span class="line">//是否开启全局的下拉刷新</span><br><span class="line"></span><br><span class="line">&quot;enablePullDownRefresh&quot;:&quot;false&quot;,</span><br><span class="line"></span><br><span class="line">//页面上拉触底事件触发时距页面底部距离，单位为px</span><br><span class="line"></span><br><span class="line">&quot;onReachBottomDistance&quot;:&quot;50px&quot;,</span><br><span class="line"></span><br><span class="line">//屏幕旋转设置，支持 auto / portrait / landscape </span><br><span class="line"></span><br><span class="line">&quot;pageOrientation&quot;:&quot;auto&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">//底部tab栏的表现</span><br><span class="line"></span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line"></span><br><span class="line">// list接受一个数组，只能配置最少 2 个、最多 5 个 tab</span><br><span class="line"></span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line"></span><br><span class="line">     //页面路径</span><br><span class="line"></span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line"></span><br><span class="line">      //tab上按钮文字</span><br><span class="line"></span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;</span><br><span class="line"></span><br><span class="line">//图片路径，icon 大小限制为40kb，不支持网络图片,当 postion 为 top 时，不显示 icon</span><br><span class="line"></span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/imges/1.png&quot;,</span><br><span class="line"></span><br><span class="line">//选中时的图片路径，icon 大小限制为40kb，不支持网络图片,当 postion 为 top 时，不显示 icon</span><br><span class="line"></span><br><span class="line">     &quot;selectedIconPath&quot;: &quot;pages/imges/1.png&quot;,</span><br><span class="line"></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/logs/logs&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;日志&quot;</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/imges/2.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/imges/2.png&quot;,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">//设置网络超时时间</span><br><span class="line"></span><br><span class="line">  &quot;networkTimeout&quot;: &#123;</span><br><span class="line"></span><br><span class="line"> //request的超时时间,单位:毫秒</span><br><span class="line">//涉及request内容设置</span><br><span class="line"></span><br><span class="line">    &quot;request&quot;: 10000,</span><br><span class="line"></span><br><span class="line">//downloadFile的超时时间,单位:毫秒</span><br><span class="line">//涉及download内容设置</span><br><span class="line"></span><br><span class="line">    &quot;downloadFile&quot;: 10000,</span><br><span class="line"></span><br><span class="line">//connectSocket的超时时间,单位:毫秒</span><br><span class="line">//涉及Socket内容设置</span><br><span class="line"></span><br><span class="line">   &quot;connectSocket&quot;:10000,</span><br><span class="line"></span><br><span class="line">//uploadFile的超时时间,单位:毫秒</span><br><span class="line">//涉及upload内容设置</span><br><span class="line"></span><br><span class="line">   &quot;uploadFile&quot;:10000</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">//是否开启 debug 模式，默认关闭</span><br><span class="line">  &quot;debug&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">属性    类型  必填  描述  最低版本</span><br><span class="line">pages    string[]    是   页面路径列表  </span><br><span class="line">window    Object  否   全局的默认窗口表现   </span><br><span class="line">tabBar    Object  否   底部 tab 栏的表现 </span><br><span class="line">networkTimeout    Object  否   网络超时时间  </span><br><span class="line">debug    boolean 否   是否开启 debug 模式，默认关闭  </span><br><span class="line">functionalPages    boolean 否   是否启用插件功能页，默认关闭  2.1.0</span><br><span class="line">subpackages    Object[]    否   分包结构配置  1.7.3</span><br><span class="line">workers    string  否   Worker 代码放置的目录  1.9.90</span><br><span class="line">requiredBackgroundModes    string[]    否   需要在后台使用的能力，如「音乐播放」  </span><br><span class="line">plugins    Object  否   使用到的插件  1.9.6</span><br><span class="line">preloadRule    Object  否   分包预下载规则 2.3.0</span><br><span class="line">resizable    boolean 否   iPad 小程序是否支持屏幕旋转，默认关闭   2.3.0</span><br><span class="line">navigateToMiniProgramAppIdList    string[]    否   需要跳转的小程序列表，详见 wx.navigateToMiniProgram  2.4.0</span><br><span class="line">usingComponents    Object  否   全局自定义组件配置   开发者工具 1.02.1810190</span><br><span class="line">permission    Object  否   小程序接口权限相关设置 微信客户端 7.0.0</span><br></pre></td></tr></table></figure><p>必须要有这个文件，没有也是会报错！<br>可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量</p><h1 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h1><p>JSON文件都是被包裹在一个大括号中 {}，通过key-value的方式来表达数据。JSON的Key必须包裹在一个双引号中，忘了给 Key 值加双引号或者是把双引号写成单引号是常见错误。<br>JSON的值只能是以下几种数据格式，其他任何格式都会触发报错，例如 JavaScript 中的 undefined。<br>数字，包含浮点数和整数<br>字符串，需要包裹在双引号中<br>Bool值，true 或者 false<br>数组，需要包裹在方括号中 []<br>对象，需要包裹在大括号中 {}<br>Null<br>还需要注意的是 JSON 文件中无法使用注释，试图添加注释将会引发报错<br>app.wxss<br>这个文件不是必须的，只是个全局CSS样式文件<br>app.wxml<br>这个也不是必须的，而且这个并不是指主界面,小程序的主页面是靠在JSON文件中配置来决定的<br>有了这两个文件运行程序，IDE就不会报错了</p><h1 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h1><p>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构<br>数据绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123;message&#125;&#125; &lt;/view&gt;</span><br><span class="line">// page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello MINA!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>列表渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;</span><br><span class="line">// page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [1, 2, 3, 4, 5]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>条件渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;view == &apos;WEBVIEW&apos;&#125;&#125;&quot;&gt; WEBVIEW &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;view == &apos;APP&apos;&#125;&#125;&quot;&gt; APP &lt;/view&gt;</span><br><span class="line">&lt;view wx:else=&quot;&#123;&#123;view == &apos;MINA&apos;&#125;&#125;&quot;&gt; MINA &lt;/view&gt;</span><br><span class="line">// page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    view: &apos;MINA&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;template name=&quot;staffName&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    FirstName: &#123;&#123;firstName&#125;&#125;, LastName: &#123;&#123;lastName&#125;&#125;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template is=&quot;staffName&quot; data=&quot;&#123;&#123;...staffA&#125;&#125;&quot;&gt;&lt;/template&gt;</span><br><span class="line">&lt;template is=&quot;staffName&quot; data=&quot;&#123;&#123;...staffB&#125;&#125;&quot;&gt;&lt;/template&gt;</span><br><span class="line">&lt;template is=&quot;staffName&quot; data=&quot;&#123;&#123;...staffC&#125;&#125;&quot;&gt;&lt;/template&gt;</span><br><span class="line">// page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    staffA: &#123;firstName: &apos;Hulk&apos;, lastName: &apos;Hu&apos;&#125;,</span><br><span class="line">    staffB: &#123;firstName: &apos;Shang&apos;, lastName: &apos;You&apos;&#125;,</span><br><span class="line">    staffC: &#123;firstName: &apos;Gideon&apos;, lastName: &apos;Lin&apos;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>引用<br>WXML 提供两种文件引用方式import和include<br>import<br>import可以在该文件中使用目标文件定义的template，如：<br>在 item.wxml 中定义了一个叫item的template：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- item.wxml --&gt;</span><br><span class="line">&lt;template name=&quot;item&quot;&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;text&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在 index.wxml 中引用了 item.wxml，就可以使用item模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;import src=&quot;item.wxml&quot;/&gt;</span><br><span class="line">&lt;template is=&quot;item&quot; data=&quot;&#123;&#123;text: &apos;forbar&apos;&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>import 的作用域<br>import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template<br>如：C import B，B import A，在C中可以使用B定义的template，在B中可以使用A定义的template，但是C不能使用A定义的template</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- A.wxml --&gt;</span><br><span class="line">&lt;template name=&quot;A&quot;&gt;</span><br><span class="line">  &lt;text&gt; A template &lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- B.wxml --&gt;</span><br><span class="line">&lt;import src=&quot;a.wxml&quot;/&gt;</span><br><span class="line">&lt;template name=&quot;B&quot;&gt;</span><br><span class="line">  &lt;text&gt; B template &lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- C.wxml --&gt;</span><br><span class="line">&lt;import src=&quot;b.wxml&quot;/&gt;</span><br><span class="line">&lt;template is=&quot;A&quot;/&gt;  &lt;!-- Error! Can not use tempalte when not import A. --&gt;</span><br><span class="line">&lt;template is=&quot;B&quot;/&gt;</span><br></pre></td></tr></table></figure><p>include<br>include 可以将目标文件除了 <template> <wxs> 外的整个代码引入，相当于是拷贝到 include 位置，如：</wxs></template></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.wxml --&gt;</span><br><span class="line">&lt;include src=&quot;header.wxml&quot;/&gt;</span><br><span class="line">&lt;view&gt; body &lt;/view&gt;</span><br><span class="line">&lt;include src=&quot;footer.wxml&quot;/&gt;</span><br><span class="line">&lt;!-- header.wxml --&gt;</span><br><span class="line">&lt;view&gt; header &lt;/view&gt;</span><br><span class="line">&lt;!-- footer.wxml --&gt;</span><br><span class="line">&lt;view&gt; footer &lt;/view&gt;</span><br></pre></td></tr></table></figure><h1 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h1><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式<br>WXSS 用来决定 WXML 的组件应该怎么显示<br>WXSS 具有 CSS 大部分特性,WXSS 对 CSS 进行了扩充以及修改<br>与 CSS 相比，WXSS 扩展的特性有：<br>尺寸单位<br>样式导入<br>尺寸单位<br>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx<br>如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素<br>设备    rpx换算px (屏幕宽度/750)    px换算rpx (750/屏幕宽度)<br>iPhone5    1rpx = 0.42px    1px = 2.34rpx<br>iPhone6    1rpx = 0.5px    1px = 2rpx<br>iPhone6 Plus    1rpx = 0.552px    1px = 1.81rpx<br>建议： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准<br>注意： 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况<br>样式导入<br>使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束<br>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/** common.wxss **/</span><br><span class="line">.small-p &#123;</span><br><span class="line">  padding:5px;</span><br><span class="line">&#125;</span><br><span class="line">/** app.wxss **/</span><br><span class="line">@import &quot;common.wxss&quot;;</span><br><span class="line">.middle-p &#123;</span><br><span class="line">  padding:15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内联样式<br>框架组件上支持使用 style、class 属性来控制组件的样式。<br>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度<br><view style="color:;"><br>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。<br>&lt;view class=”normal_view” /<br>选择器<br>目前支持的选择器有：<br>选择器    样例    样例描述</view></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.class.intro选择所有拥有 class=&quot;intro&quot; 的组件</span><br><span class="line">#id#firstname选择拥有 id=&quot;firstname&quot; 的组件</span><br><span class="line">elementview选择所有 view 组件</span><br><span class="line">element, elementview, checkbox选择所有文档的 view 组件和所有的 checkbox 组件</span><br><span class="line">::afterview::after在 view 组件后边插入内容</span><br><span class="line">::beforeview::before在 view 组件前边插入内容</span><br></pre></td></tr></table></figure><p>全局样式与局部样式<br>定义在 app.wxss 中的样式为全局样式，作用于每一个页面<br>在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器</p><h1 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h1><p>WXS（WeiXin Script）是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构<br>注意<br>WXS 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行<br>WXS 与 JavaScript 是不同的语言，有自己的语法，并不和 JavaScript 一致<br>WXS 的运行环境和其他 JavaScript 代码是隔离的，WXS 中不能调用其他 JavaScript 文件中定义的函数，也不能调用小程序提供的API<br>WXS 函数不能作为组件的事件回调<br>由于运行环境的差异，在 iOS 设备上小程序内的 WXS 会比 JavaScript 代码快 2 ~ 20 倍。在 android 设备上二者运行效率无差异<br>以下是一些使用 WXS 的简单示例<br>页面渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">var msg = &quot;hello world&quot;;</span><br><span class="line"></span><br><span class="line">module.exports.message = msg;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt; &#123;&#123;m1.message&#125;&#125; &lt;/view&gt;</span><br></pre></td></tr></table></figure><p>页面输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>数据处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [1, 2, 3, 4, 5, 1, 2, 3, 4]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;!-- 下面的 getMax 函数，接受一个数组，且返回数组中最大的元素的值 --&gt;</span><br><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">var getMax = function(array) &#123;</span><br><span class="line">  var max = undefined;</span><br><span class="line">  for (var i = 0; i &lt; array.length; ++i) &#123;</span><br><span class="line">    max = max === undefined ?</span><br><span class="line">      array[i] :</span><br><span class="line">      (max &gt;= array[i] ? max : array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports.getMax = getMax;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 调用 wxs 里面的 getMax 函数，参数为 page.js 里面的 array --&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123;m1.getMax(array)&#125;&#125; &lt;/view&gt;</span><br></pre></td></tr></table></figure><p>页面输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h1 id="JS逻辑交互"><a href="#JS逻辑交互" class="headerlink" title="JS逻辑交互"></a>JS逻辑交互</h1><p>一个服务仅仅只有界面展示是不够的,还需要和用户做交互:响应用户的点击、获取用户的位置等等<br>编写JS脚本文件来处理用户的操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; message&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;button bindtap=&quot;clickMe&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>点击 button 按钮的时候，我们希望把界面上 message 显示成 “Hello World”，于是我们在 button 上声明一个属性: bindtap<br>在 JS 文件里边声明了 clickMe 方法来响应这次点击操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  clickMe() &#123;</span><br><span class="line">    this.setData(&#123;message: &apos;Hello World&apos;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以在 JS 中调用小程序提供的丰富的 API，利用这些 API 可以很方便的调起微信提供的能力<br>例如获取用户信息、本地存储、微信支付等</p><h1 id="创建小项目的时候注意事项"><a href="#创建小项目的时候注意事项" class="headerlink" title="创建小项目的时候注意事项"></a>创建小项目的时候注意事项</h1><p>1.小程序暂时不支持 * 通配符<br>2.构建一个新的项目的时候，先把里面的js、wxss、wxml都清空，全局的js去开发者工具输入App进行初始化，pages页面里面的js（例如index.js）去开发者工具里面输入page进行初始化<br>3.调用自己组件的流程如下：先在data中进行声明<br>接口显示的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;navList&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">        &quot;id&quot;: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;动画&quot;,</span><br><span class="line">        &quot;id&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;番剧&quot;,</span><br><span class="line">        &quot;id&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;国创&quot;,</span><br><span class="line">        &quot;id&quot;: 3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;音乐&quot;,</span><br><span class="line">        &quot;id&quot;: 4</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;舞蹈&quot;,</span><br><span class="line">        &quot;id&quot;: 5</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;科技&quot;,</span><br><span class="line">        &quot;id&quot;: 6</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;游戏&quot;,</span><br><span class="line">        &quot;id&quot;: 7</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;娱乐&quot;,</span><br><span class="line">        &quot;id&quot;: 8</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;鬼畜&quot;,</span><br><span class="line">        &quot;id&quot;: 9</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;电影&quot;,</span><br><span class="line">        &quot;id&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;电视剧&quot;,</span><br><span class="line">        &quot;id&quot;: 11</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;纪录片&quot;,</span><br><span class="line">        &quot;id&quot;: 12</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;影视&quot;,</span><br><span class="line">        &quot;id&quot;: 13</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;时尚&quot;,</span><br><span class="line">        &quot;id&quot;: 14</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;生活&quot;,</span><br><span class="line">        &quot;id&quot;: 15</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;广告&quot;,</span><br><span class="line">        &quot;id&quot;: 16</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;直播&quot;,</span><br><span class="line">        &quot;id&quot;: 17</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;相簿&quot;,</span><br><span class="line">        &quot;id&quot;: 18</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js入门教程</title>
      <link href="/2019/10/14/Nodejs%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/14/Nodejs%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境<br>Node.js使用了一个事件驱动、非阻塞式I/O的模型,使其轻量又高效<br>主要内容包含模块机制的揭示、异步I/O 实现原理的展现、异步编程的探讨、内存控制的介绍、二进制数据Buffer 的细节、Node 中的网络编程基础、Node 中的Web 开发、进程间的消息传递、Node 测试以及通过Node 构建产品需要的注意事项<br>Chrome浏览器和Node的组件构成<br><img src="/images/1.gif" alt></p><h1 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h1><p>官网下载地址:<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><p>建议直接选择:Windows Installer (.msi)下载进行安装,建议直接下载最新版本的安装包直接安装<br>从web服务器开发的角度来看，Node有很多好处：</p><ul><li><p>卓越的性能表现！Node 为优化 web 应用的吞吐量和扩展度而生，对常见的 web 开发问题是一套绝佳方案（比如实时 web 应用）</p></li><li><p>代码还是熟悉的老伙伴JavaScript，这意味着在客户端和服务器端“上下文切换”的时间成本更低</p></li><li><p>与传统的 web 服务器语言（例如 Python、PHP 等）相比，JavaScript 理念更新，语言设计的改进带来了诸多好处。许多其它新近流行的语言也可编译/转换成 JavaScript，所以TypeScript、CoffeeScript、ClojureScript、Scala、LiveScript 等等也可以使用</p></li><li><p>Node 包管理工具（node package manager，NPM）提供了数十万个可重用的工具包。它还提供了一流的依赖解决方案，可实现自动化工具链构建</p></li><li><p>Node.js 是可移植的，可运行于 Microsoft Windows、macOS、Linux、Solaris、FreeBSD、OpenBSD、WebOS 和 NonStop OS。 web 主机供应商对其提供了良好支持（包括专用的基础框架和构建 Node 站点的文档）</p></li><li><p>它有一个非常活跃的第三方生态系统和开发者社区<br>可以用Node.js的HTTP包来创建一个简单的web服务器<br>创建一个web服务器,它将监听对URL<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 所有种类的HTTP请求<br>当接收到一个请求时,脚本将做出响应：返回一个字符串”Hello World”</p></li><li><p>打开终端（Windows 中打开命令行工具）</p></li><li><p>创建一个空文件夹用来存放项目,比如”node”，然后在终端输入以下命令进入这个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /d D:\node\nodejs</span><br></pre></td></tr></table></figure></li><li><p>一个名为”app.js”的文件，把以下代码粘贴进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 调用 HTTP 模块</span><br><span class="line">const http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">// 创建 HTTP 服务器并监听 8000 端口的所有请求</span><br><span class="line">http.createServer((request, response) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">   // 用 HTTP 状态码和内容类型来设定 HTTP 响应头</span><br><span class="line">   response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class="line"></span><br><span class="line">   // 发送响应体 &quot;Hello World&quot;</span><br><span class="line">   response.end(&apos;Hello World\n&apos;);</span><br><span class="line">&#125;).listen(8000);</span><br><span class="line"></span><br><span class="line">// 在控制台打印访问服务器的 URL</span><br><span class="line">console.log(&apos;服务器运行于 http://127.0.0.1:8000/&apos;);</span><br></pre></td></tr></table></figure></li><li><p>将其保存在刚才创建的文件夹,返回终端并输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node &quot;app.js&quot;</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器地址栏中输入”<a href="http://localhost:8000&quot;并按回车，可以看到输出" target="_blank" rel="noopener">http://localhost:8000&quot;并按回车，可以看到输出</a> “Hello World”</p><h1 id="NPM使用与安装"><a href="#NPM使用与安装" class="headerlink" title="NPM使用与安装"></a>NPM使用与安装</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用<br>nodejs已经集成了npm，以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure></li></ul><h2 id="npm-命令来升级，命令如下："><a href="#npm-命令来升级，命令如下：" class="headerlink" title="npm 命令来升级，命令如下："></a>npm 命令来升级，命令如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install npm -g</span><br></pre></td></tr></table></figure><p>Window 系统使用以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a>使用 npm 命令安装模块</h2><p>npm 安装 Node.js 模块语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure><p>使用 npm 命令安装常用的 Node.js web框架模块 express:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express</span><br></pre></td></tr></table></figure><p>express 包就放在了工程目录下的 node_modules 目录中<br>只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br></pre></td></tr></table></figure><h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，差别只是有没有-g而已，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express          # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure><p>如果出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm err! Error: connect ECONNREFUSED 127.0.0.1:8087</span><br></pre></td></tr></table></figure><p>解决办法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set proxy null</span><br></pre></td></tr></table></figure><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><ul><li>将安装包放在 ./node_modules下（运行npm命令时所在的目录）<br>如果没有node_modules目录，会在当前执行npm命令的目录下生成node_modules目录</li><li>可以通过 require() 来引入本地安装的包</li></ul><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><ul><li>将安装包放在 /usr/local 下或者你 node 的安装目录</li><li>可以直接在命令行里使用<br>如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link<br>接下来我们使用全局方式安装 express<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a>查看安装信息</h2><p>查看所有全局安装的模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm list -g</span><br></pre></td></tr></table></figure><h2 id="某个模块的版本号，可以使用命令如下："><a href="#某个模块的版本号，可以使用命令如下：" class="headerlink" title="某个模块的版本号，可以使用命令如下："></a>某个模块的版本号，可以使用命令如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm list grunt</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>package.json 位于模块的目录下，用于定义包的属性。<br>express 包的 package.json 文件，位于 node_modules/express/package.json 内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_from&quot;: &quot;express@^4.16.2&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;express@4.16.4&quot;,</span><br><span class="line">  &quot;_inBundle&quot;: false,</span><br><span class="line">  &quot;_integrity&quot;: &quot;sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==&quot;,</span><br><span class="line">  &quot;_location&quot;: &quot;/express&quot;,</span><br><span class="line">  &quot;_phantomChildren&quot;: &#123;&#125;,</span><br><span class="line">  &quot;_requested&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;range&quot;,</span><br><span class="line">    &quot;registry&quot;: true,</span><br><span class="line">    &quot;raw&quot;: &quot;express@^4.16.2&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;express&quot;,</span><br><span class="line">    &quot;escapedName&quot;: &quot;express&quot;,</span><br><span class="line">    &quot;rawSpec&quot;: &quot;^4.16.2&quot;,</span><br><span class="line">    &quot;saveSpec&quot;: null,</span><br><span class="line">    &quot;fetchSpec&quot;: &quot;^4.16.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_requiredBy&quot;: [</span><br><span class="line">    &quot;/webpack-bundle-analyzer&quot;,</span><br><span class="line">    &quot;/webpack-dev-server&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_resolved&quot;: &quot;https://registry.npmjs.org/express/-/express-4.16.4.tgz&quot;,</span><br><span class="line">  &quot;_shasum&quot;: &quot;fddef61926109e24c515ea97fd2f1bdbf62df12e&quot;,</span><br><span class="line">  &quot;_spec&quot;: &quot;express@^4.16.2&quot;,</span><br><span class="line">  &quot;_where&quot;: &quot;C:\\Windows\\system32\\vue-demo\\node_modules\\webpack-bundle-analyzer&quot;,</span><br><span class="line">  &quot;author&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/expressjs/express/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;bundleDependencies&quot;: false,</span><br><span class="line">  &quot;contributors&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Douglas Christopher Wilson&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;doug@somethingdoug.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Jonathan Ong&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;me@jongleberry.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Roman Shtylman&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;shtylman+expressjs@gmail.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Young Jae Sim&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;hanul@hanul.me&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;accepts&quot;: &quot;~1.3.5&quot;,</span><br><span class="line">    &quot;array-flatten&quot;: &quot;1.1.1&quot;,</span><br><span class="line">    &quot;body-parser&quot;: &quot;1.18.3&quot;,</span><br><span class="line">    &quot;content-disposition&quot;: &quot;0.5.2&quot;,</span><br><span class="line">    &quot;content-type&quot;: &quot;~1.0.4&quot;,</span><br><span class="line">    &quot;cookie&quot;: &quot;0.3.1&quot;,</span><br><span class="line">    &quot;cookie-signature&quot;: &quot;1.0.6&quot;,</span><br><span class="line">    &quot;debug&quot;: &quot;2.6.9&quot;,</span><br><span class="line">    &quot;depd&quot;: &quot;~1.1.2&quot;,</span><br><span class="line">    &quot;encodeurl&quot;: &quot;~1.0.2&quot;,</span><br><span class="line">    &quot;escape-html&quot;: &quot;~1.0.3&quot;,</span><br><span class="line">    &quot;etag&quot;: &quot;~1.8.1&quot;,</span><br><span class="line">    &quot;finalhandler&quot;: &quot;1.1.1&quot;,</span><br><span class="line">    &quot;fresh&quot;: &quot;0.5.2&quot;,</span><br><span class="line">    &quot;merge-descriptors&quot;: &quot;1.0.1&quot;,</span><br><span class="line">    &quot;methods&quot;: &quot;~1.1.2&quot;,</span><br><span class="line">    &quot;on-finished&quot;: &quot;~2.3.0&quot;,</span><br><span class="line">    &quot;parseurl&quot;: &quot;~1.3.2&quot;,</span><br><span class="line">    &quot;path-to-regexp&quot;: &quot;0.1.7&quot;,</span><br><span class="line">    &quot;proxy-addr&quot;: &quot;~2.0.4&quot;,</span><br><span class="line">    &quot;qs&quot;: &quot;6.5.2&quot;,</span><br><span class="line">    &quot;range-parser&quot;: &quot;~1.2.0&quot;,</span><br><span class="line">    &quot;safe-buffer&quot;: &quot;5.1.2&quot;,</span><br><span class="line">    &quot;send&quot;: &quot;0.16.2&quot;,</span><br><span class="line">    &quot;serve-static&quot;: &quot;1.13.2&quot;,</span><br><span class="line">    &quot;setprototypeof&quot;: &quot;1.1.0&quot;,</span><br><span class="line">    &quot;statuses&quot;: &quot;~1.4.0&quot;,</span><br><span class="line">    &quot;type-is&quot;: &quot;~1.6.16&quot;,</span><br><span class="line">    &quot;utils-merge&quot;: &quot;1.0.1&quot;,</span><br><span class="line">    &quot;vary&quot;: &quot;~1.1.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;deprecated&quot;: false,</span><br><span class="line">  &quot;description&quot;: &quot;Fast, unopinionated, minimalist web framework&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;after&quot;: &quot;0.8.2&quot;,</span><br><span class="line">    &quot;connect-redis&quot;: &quot;3.4.0&quot;,</span><br><span class="line">    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,</span><br><span class="line">    &quot;cookie-session&quot;: &quot;1.3.2&quot;,</span><br><span class="line">    &quot;ejs&quot;: &quot;2.6.1&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;2.13.1&quot;,</span><br><span class="line">    &quot;express-session&quot;: &quot;1.15.6&quot;,</span><br><span class="line">    &quot;hbs&quot;: &quot;4.0.1&quot;,</span><br><span class="line">    &quot;istanbul&quot;: &quot;0.4.5&quot;,</span><br><span class="line">    &quot;marked&quot;: &quot;0.5.1&quot;,</span><br><span class="line">    &quot;method-override&quot;: &quot;3.0.0&quot;,</span><br><span class="line">    &quot;mocha&quot;: &quot;5.2.0&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;1.9.1&quot;,</span><br><span class="line">    &quot;multiparty&quot;: &quot;4.2.1&quot;,</span><br><span class="line">    &quot;pbkdf2-password&quot;: &quot;1.2.1&quot;,</span><br><span class="line">    &quot;should&quot;: &quot;13.2.3&quot;,</span><br><span class="line">    &quot;supertest&quot;: &quot;3.3.0&quot;,</span><br><span class="line">    &quot;vhost&quot;: &quot;~3.0.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;= 0.10.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;LICENSE&quot;,</span><br><span class="line">    &quot;History.md&quot;,</span><br><span class="line">    &quot;Readme.md&quot;,</span><br><span class="line">    &quot;index.js&quot;,</span><br><span class="line">    &quot;lib/&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;homepage&quot;: &quot;http://expressjs.com/&quot;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;express&quot;,</span><br><span class="line">    &quot;framework&quot;,</span><br><span class="line">    &quot;sinatra&quot;,</span><br><span class="line">    &quot;web&quot;,</span><br><span class="line">    &quot;rest&quot;,</span><br><span class="line">    &quot;restful&quot;,</span><br><span class="line">    &quot;router&quot;,</span><br><span class="line">    &quot;app&quot;,</span><br><span class="line">    &quot;api&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;express&quot;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https://github.com/expressjs/express.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint .&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line">    &quot;test-ci&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line">    &quot;test-cov&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line">    &quot;test-tap&quot;: &quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;version&quot;: &quot;4.16.4&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Package.json 属性说明</p><ul><li>name - 包名</li><li>version - 包的版本号</li><li>description - 包的描述</li><li>homepage - 包的官网 url</li><li>author - 包的作者姓名</li><li>contributors - 包的其他贡献者姓名</li><li>dependencies - 依赖包列表，如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下</li><li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上</li><li>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件,这个字段的默认值是模块根目录下面的 index.js</li><li>keywords - 关键字</li></ul><h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><p>使用以下命令来卸载 Node.js 模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall express</span><br></pre></td></tr></table></figure><p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm ls</span><br></pre></td></tr></table></figure><h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><p>我们可以使用以下命令更新模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm update express</span><br></pre></td></tr></table></figure><h2 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h2><p>使用以下来搜索模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm search express</span><br></pre></td></tr></table></figure><h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建模块，package.json 文件是必不可少的 NPM 生成 package.json 文件，生成的文件包含了基本的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (desktop) geekes</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: node.js 测试模块(www.geekes.cn)</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command: make test</span><br><span class="line">git repository: https://github.com/tengxu123456/geekes.git</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to C:\Users\zhang\Desktop\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;geekes&quot;, # 模块名</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;node.js 测试模块(www.geekes.cn)&quot;, # 描述</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;directories&quot;: &#123;</span><br><span class="line">    &quot;lib&quot;: &quot;lib&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;make test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https://github.com/tengxu123456/geekes.git&quot;# Github 地址</span><br><span class="line">About to write to ……/node_modules/package.json:      # 生成地址</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/tengxu123456/geekes/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/tengxu123456/geekes#readme&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure><p>输入 “yes” 后会生成 package.json 文件<br>npm 资源库中注册用户（使用邮箱注册）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm tixuan</span><br><span class="line">Username: yixuan</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) yixuan@gmail.com</span><br></pre></td></tr></table></figure><p>用以下命令来发布模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><h2 id="淘宝-NPM-镜像"><a href="#淘宝-NPM-镜像" class="headerlink" title="淘宝 NPM 镜像"></a>淘宝 NPM 镜像</h2><p>当前 registry.npm.taobao.org 是从 r.cnpmjs.org 进行全量同步的.<br>当前 npm.taobao.org 运行版本是: cnpmjs.org@<br>本系统运行在 Node.js.org 上.</p><ul><li>开源镜像: <a href="http://npm.taobao.org/mirrors" target="_blank" rel="noopener">http://npm.taobao.org/mirrors</a></li><li>Node.js 镜像: <a href="http://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/node</a></li><li>alinode 镜像: <a href="http://npm.taobao.org/mirrors/alinode" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/alinode</a></li><li>phantomjs 镜像: <a href="http://npm.taobao.org/mirrors/phantomjs" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/phantomjs</a></li><li>ChromeDriver 镜像: <a href="http://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver</a></li><li>OperaDriver 镜像: <a href="http://npm.taobao.org/mirrors/operadriver" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/operadriver</a></li><li>Selenium 镜像: <a href="http://npm.taobao.org/mirrors/selenium" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/selenium</a></li><li>Node.js 文档镜像: <a href="http://npm.taobao.org/mirrors/node/latest/docs/api/index.html" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/node/latest/docs/api/index.html</a></li><li>NPM 镜像: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></li><li>electron 镜像: <a href="https://npm.taobao.org/mirrors/electron/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron/</a></li><li>node-inspector 镜像: <a href="https://npm.taobao.org/mirrors/node-inspector/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node-inspector/</a><br>因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，<br>来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)<br>同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”<br>cnpm的c 是 copy的意思，即复制 npm 上面的库。<br>把npm 上面的库复制到 国内的服务器上，当需要用的时候，使用 cnpm 命令获取，就会快很多了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install [name]</span><br></pre></td></tr></table></figure><h2 id="同步模块"><a href="#同步模块" class="headerlink" title="同步模块"></a>同步模块</h2><p>直接通过 sync 命令马上同步一个模块, 只有 cnpm 命令行才有此功能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm sync connect</span><br></pre></td></tr></table></figure><p>当然, 你可以直接通过 web 方式来同步: /sync/connect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open https://npm.taobao.org/sync/connect</span><br></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><p>支持 npm 除了 publish 之外的所有命令, 如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm info connect</span><br></pre></td></tr></table></figure><h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><p>所有模块都提供这些对象以下。变量虽然看起来是全局的，但其实并不是。 它们仅存在于模块范围内</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>node提供了全局的3个设置定时器方法：</p><ul><li>setImmediate(callback[, …args])</li><li>setInterval(callback, delay[, …args])</li><li>setTimeout(callback, delay[, …args])<br>另外对应3个取消定时器的方法</li><li>clearImmediate(immediate)</li><li>clearInterval(timeout)</li><li>clearTimeout(timeout)<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1></li></ul><h1 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h1><p>path 模块提供用于处理文件路径和目录路径的实用工具。 它可以使用以下方式访问：</p><h2 id="Windows与POSIX"><a href="#Windows与POSIX" class="headerlink" title="Windows与POSIX"></a>Windows与POSIX</h2><h2 id="可移植操作系统接口-POSIX"><a href="#可移植操作系统接口-POSIX" class="headerlink" title="可移植操作系统接口(POSIX)"></a>可移植操作系统接口(POSIX)</h2><p>可移植操作系统接口（英语：Portable Operating System Interface，缩写为POSIX），是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称，其正式称呼为IEEE Std 1003，而国际标准名称为ISO/IEC 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由理查德·斯托曼应IEEE的要求而提议的一个易于记忆的名称。它基本上是Portable Operating System Interface（可移植操作系统接口）的缩写，而X则表明其对Unix API的传承。<br>Linux基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。<br>微软的Windows NT声称部分实现了POSIX标准。<br>当前的POSIX主要分为四个部分：Base Definitions、System Interfaces、Shell and Utilities和Rationale。<br>综述：目前主流的类Unix操作系统：Unix、Linux都会兼容POSIX的标准，而Windows只是部分实行了POSIX标准，所以后面我们说POSIX系统是指类Unix系统<br>windows系统和类Unix系统的路径的区别</p><h2 id="目录结构的区别"><a href="#目录结构的区别" class="headerlink" title="目录结构的区别"></a>目录结构的区别</h2><p>windows资源管理系统，windows是分不同的磁盘，然后磁盘下面都是树状结构的文件和文件夹<br>而类Unix（Unix、Linux）系统中是不分盘符的，只有一个根目录 /， 都是都是这个下面的子目录或者文件，当然也是树状的机构<br>Linux的目录结构<br><img src="/images/31.PNG" alt></p><h2 id="路径的区别"><a href="#路径的区别" class="headerlink" title="路径的区别"></a>路径的区别</h2><p>除了目录结构有区别外，路径也是有区别的。windows是用反斜杠\分割目录或者文件的，而在类Unix的系统中是用的/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows的路径： C:\node\file.html</span><br><span class="line">类Unix的路径：  /node/file.html</span><br></pre></td></tr></table></figure><p>path模块获取路径中的文件名<br>path.basename(path[, ext])<br>node提供了win32和posix兼容的api<br>获取路径的文件夹<br>获取路径的扩展名<br>格式化一个路径<br>把路径字符串转换成对象<br>连接多个路径重点<br>获取相对路径<br>智能解析绝对路径<br>判断是否是绝对路径</p><h1 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h1><p>Node.js os 模块提供了一些基本的系统操作函数。可以通过以下方式引入该模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var os = require(&quot;os&quot;)</span><br></pre></td></tr></table></figure><p>方法               描述</p><ul><li>os.tmpdir()     返回操作系统的默认临时文件夹</li><li>os.endianness() 返回 CPU 的字节序，可能的是 “BE” 或 “LE”</li><li>os.hostname()   返回操作系统的主机名</li><li>os.type()       返回操作系统名 </li><li>os.platform()   返回操作系统名 </li><li>os.arch() 返回操作系统CPU架构,可能的值有 “x64”、”arm”和 “ia32”</li><li>os.release()  返回操作系统的发行版本</li><li>os.uptime()   返回操作系统运行的时间，以秒为单位</li><li>os.loadavg()  返回一个包含 1、5、15 分钟平均负载的数组</li><li>os.totalmem() 返回系统内存总量，单位为字节</li><li>os.freemem()  返回操作系统空闲内存量，单位是字节</li><li>os.cpus() 返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）</li><li>os.networkInterfaces()  获得网络接口列表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const os =require(&apos;os&apos;);</span><br><span class="line">// CPU 的字节序</span><br><span class="line">console.log(&apos;endianness : &apos; + os.endianness());</span><br><span class="line">// 操作系统名</span><br><span class="line">console.log(&apos;type : &apos; + os.type());</span><br><span class="line">// 操作系统名</span><br><span class="line">console.log(&apos;platform : &apos; + os.platform());</span><br><span class="line">// 系统内存总量</span><br><span class="line">console.log(&apos;total memory : &apos; + os.totalmem() + &quot; bytes.&quot;);</span><br><span class="line">// 操作系统空闲内存量</span><br><span class="line">console.log(&apos;free memory : &apos; + os.freemem() + &quot; bytes.&quot;);</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">endianness : LE</span><br><span class="line">type : Windows_NT</span><br><span class="line">platform : win32</span><br><span class="line">total memory : 4118118400 bytes.</span><br><span class="line">free memory : 1068032000 bytes.</span><br></pre></td></tr></table></figure><h1 id="Net网络模块"><a href="#Net网络模块" class="headerlink" title="Net网络模块"></a>Net网络模块</h1><h1 id="文件处理-1"><a href="#文件处理-1" class="headerlink" title="文件处理"></a>文件处理</h1><p>创建input.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;input.txt&apos;,function(err,data)&#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">return console.error(err);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;异步读取:&quot;+data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const data = fs.readFileSync(&apos;input.txt&apos;);</span><br><span class="line">console.log(&quot;同步读取:&quot;+data.toString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序执行成功！&quot;);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同步读取:hello world</span><br><span class="line">程序执行成功！</span><br><span class="line">异步读取:hello world</span><br></pre></td></tr></table></figure><h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//引入 events模块</span><br><span class="line">const events = require(&apos;events&apos;);</span><br><span class="line">//创建 eventEmitter对象</span><br><span class="line">const eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//引入 events模块</span><br><span class="line">const EventEmitter = require(&apos;events&apos;).EventEmitter; </span><br><span class="line">//创建 eventEmitter对象</span><br><span class="line">const event = new EventEmitter(); </span><br><span class="line">// 注册event事件，event是事件名字，最好符合以驼峰命名规范</span><br><span class="line">  event.on(&apos;event&apos;, function() &#123; </span><br><span class="line">  console.log(&apos;event 事件触发&apos;); </span><br><span class="line">   &#125;); </span><br><span class="line">    setTimeout(function() &#123; </span><br><span class="line">    // 触发event事件</span><br><span class="line">    event.emit(&apos;event&apos;); </span><br><span class="line">   &#125;, 1000);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//引入 events模块</span><br><span class="line">const events= require(&apos;events&apos;);</span><br><span class="line"></span><br><span class="line">//创建 eventEmitter对象</span><br><span class="line">const emitter = new events.EventEmitter(); </span><br><span class="line"></span><br><span class="line">  emitter.on(&apos;event&apos;, function(arg1,arg2) &#123; </span><br><span class="line">  console.log(&apos;event1事件触发&apos;,arg1,arg2); </span><br><span class="line">   &#125;); </span><br><span class="line">  emitter.on(&apos;event&apos;, function(arg1,arg2) &#123; </span><br><span class="line">  console.log(&apos;event2事件触发&apos;,arg1,arg2); </span><br><span class="line">   &#125;); </span><br><span class="line">emitter.emit(&apos;event&apos;,&apos;arg1&apos;,&apos;arg2&apos;);</span><br></pre></td></tr></table></figure><h1 id="什么是-Express"><a href="#什么是-Express" class="headerlink" title="什么是 Express?"></a>什么是 Express?</h1><p>Express 是最流行的 Node 框架，是许多其它流行 Node 框架 的底层库。它提供了以下机制：</p><ul><li>为不同 URL 路径中使用不同 HTTP 动词的请求（路由）编写处理程序</li><li>集成了“视图”渲染引擎，以便通过将数据插入模板来生成响应</li><li>设置常见 web 应用设置，比如用于连接的端口，以及渲染响应模板的位置</li><li>在请求处理管道的任何位置添加额外的请求处理”中间件”<br>虽然 Express 本身是极简风格的，但是开发人员通过创建各类兼容的中间件包解决了几乎所有的 web 开发问题。这些库可以实现 cookie、会话、用户登录、URL 参数、POST 数据、安全头等功能。可在 Express 中间件 网页中找到由 Express 团队维护的中间件软件包列表（还有一张流行的第三方软件包列表）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&apos;Hello World!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;示例应用正在监听 3000 端口!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>前两行通过 require() 导入 Express 模块，并创建了一个 Express 应用。传统上把这个对象命名为 app，它可以进行路由 HTTP 请求、配置中间件、渲染 HTML 视图、注册模板引擎以及修改 应用程序设置 等操作，从而控制应用的行为（例如，环境模式，路由定义是否为区分大小写等）。<br>代码的中间部分（从 app.get() 开始共三行）是路由定义。app.get() 方法指定了一个回调（callback）函数，该函数在每监听到一个关于站点根目录路径（’/‘）的 HTTP GET 请求时调用。此回调函数以一个请求和一个响应对象作为参数，并直接调用响应的 send() 来返回字符串“Hello World!”<br>最后一个代码块在”3000” 端口上启动服务器，并在控制台打印日志。服务器运行时，可用浏览器访问 localhost:3000，看看响应返回了什么。</p><h2 id="导入和创建模块"><a href="#导入和创建模块" class="headerlink" title="导入和创建模块"></a>导入和创建模块</h2><p>模块是 JavaScript 库或文件，可以用 Node 的 require() 函数将它们导入其它代码。Express 本身就是一个模块，Express 应用中使用的中间件和数据库也是<br>下面的代码以 Express 框架为例展示了如何通过名字来导入模块,调用 require() 函数，用字符串（’express’）指定模块的名字，然后调用返回的对象来创建Express 应用 。然后就可以访问应用对象的属性和函数了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const app = express();</span><br></pre></td></tr></table></figure><p>还可以创建自定义模块，并用相同的方法导入 为了让对象暴露于模块之外，只需把它们设置为 exports 对象的附加属性即可。 下面的 square.js 模块就是一个导出了 area() 和 perimeter() 方法的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exports.area = width =&gt; &#123; return width * width; &#125;;</span><br><span class="line">exports.perimeter = width =&gt; &#123; return 4 * width; &#125;;</span><br></pre></td></tr></table></figure><p>可以require()导入这个模块，然后调用导出的方法，用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const square = require(&apos;./square&apos;);</span><br><span class="line">// 这里 require() 了文件名，省略了 .js 扩展名（可选）</span><br><span class="line">console.log(&apos;正方形面积为 &apos; + square.area(4));</span><br></pre></td></tr></table></figure><p>一次赋值不仅能构建一个单一的属性，还能构建一个完整的对象 可以像下面这样把对象赋值给 module.exports（也可以让 exports 对象直接作为一个构造器或另一个函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">area: width =&gt; &#123; return width * width; &#125;,</span><br><span class="line">perimeter: width =&gt; &#123; return 4 * width; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JavaScript 代码在完成那些需要一段时间才能完成的操作时，经常会用异步API来取代同步API。同步 API 下 每个操作完成后才可以进行下一个操作。下列日志函数是同步的，将按顺序将文本打印到控制台（第一、第二）</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门教程</title>
      <link href="/2019/10/14/Python%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/14/Python%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-简介"><a href="#Python-简介" class="headerlink" title="Python 简介"></a>Python 简介</h1><p>Python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。<br>Python的设计具有很强的可读性，它具有比其他语言更有特色语法结构。</p><h1 id="Python的优点"><a href="#Python的优点" class="headerlink" title="Python的优点"></a>Python的优点</h1><ul><li>易学 – Python 极其容易上手。Python 有极其简单的语法</li><li>免费、开源 – Python 是 FLOSS（自由/开放源码软件）之一</li><li>可移植性 – 由于它的开源本质，Python 已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有 Python 程序无需修改就可以在下述任何平台上面运行。这些平台包括 Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE 甚至还有 PocketPC、Symbian 以及 Google 基于 Linux 开发的 Android 平台！</li><li>解释性 –Python 语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python 解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。</li><li>面向对象 – Python 既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如 C++ 和 Java 相比，Python 以一种非常强大又简单的方式实现面向对象编程。</li><li>可扩展性 – 如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用 C 或 C++ 编写，然后在你的 Python 程序中使用它们。</li><li>丰富的库 – Python 标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV 文件、密码系统、GUI（图形用户界面）、Tk 和其他与系统有关的操作。记住，只要安装了 Python，所有这些功能都是可用的。这被称作 Python 的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如 wxPython、Twisted 和 Python 图像库等等</li><li>规范的代码 – Python 采用强制缩进的方式使得代码具有极佳的可读性</li></ul><h1 id="Python下载"><a href="#Python下载" class="headerlink" title="Python下载"></a>Python下载</h1><p>Python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a><br>点击Downloads&gt; Windows下载你需要的版本安装包<br>注：64位版本不可以安装在32位的系统上，但是32位版本可以安装在64位的系统上<br><img src="/images/26.png" alt><br>注意勾上Add Python 3.6 to PATH然后点即可完成安装<br><img src="/images/27.png" alt><br>点击 Next 进行下一步<br><img src="/images/28.png" alt><br>根据自己的需求修改安装路径，再点击 Install 进行下一步<br><img src="/images/29.png" alt><br>正在安装…<br><img src="/images/30.png" alt><br>安装完成</p><h1 id="Python命名规则"><a href="#Python命名规则" class="headerlink" title="Python命名规则"></a>Python命名规则</h1><ul><li>字母/数字/下划线</li><li>只能以字母或下划线开头</li><li>不能包含空格</li><li>避免python关键字或函数名</li><li>区分大小写<br><img src="/images/27.jpg" alt></li></ul><p>所有Python文件将以.py为扩展名</p><h1 id="Python注释"><a href="#Python注释" class="headerlink" title="Python注释"></a>Python注释</h1><p>Python中单行注释采用#开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello, Python!&quot;);  # 第一个注释</span><br></pre></td></tr></table></figure><p>Python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)</p><ul><li><p>单引号（’’’）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">这是多行注释，使用单引号。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">print(&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure></li><li><p>双引号(“””)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">这是多行注释，使用双引号。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h1><p>Python中有六个标准的数据类型:</p><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionaries（字典）</li></ul><h1 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a>Numbers（数字）</h1><p>Python支持int、float、bool、complex（复数）<br>内置的type()函数可以用来查询变量所指的对象类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = 10, 3.5, True, 4+2j</span><br><span class="line">&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;class &apos;int&apos;&gt; &lt;class &apos;float&apos;&gt; &lt;class &apos;bool&apos;&gt; &lt;class &apos;complex&apos;&gt;</span><br></pre></td></tr></table></figure><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算:"></a>数值运算:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 + 4  # 加法</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; 4.3 - 2 # 减法</span><br><span class="line">2.3</span><br><span class="line">&gt;&gt;&gt; 3 * 7  # 乘法</span><br><span class="line">21</span><br><span class="line">&gt;&gt;&gt; 2 / 4  # 除法，得到一个浮点数</span><br><span class="line">0.5</span><br><span class="line">&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 17 % 3 # 取余 </span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2 ** 5 # 乘方</span><br><span class="line">32</span><br></pre></td></tr></table></figure><h1 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h1><p>Python中的字符串str用单引号(‘ ‘)或双引号(“ “)来表示字符串,同时使用反斜杠( \ )转义特殊字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &apos;Hello, Python\&apos;t&apos;</span><br><span class="line">&gt;&gt;&gt; print(str, type(str), len(str))</span><br><span class="line">Hello, Python&apos;t &lt;class &apos;str&apos;&gt; 15</span><br></pre></td></tr></table></figure><p>反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;C:\python\string&apos;)</span><br><span class="line">C:\python</span><br><span class="line">string</span><br><span class="line">&gt;&gt;&gt; print(r&apos;C:\python\string&apos;)</span><br><span class="line">C:\python\string</span><br></pre></td></tr></table></figure><p>反斜杠可以作为续行符,表示下一行是上一行的延续。还可以使用”””…”””或者’’’…’’’跨越多行<br>字符串可以使用 + 运算符串连接在一起,或者用 * 运算符重复: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;str&apos;+&apos;ing&apos;, &apos;python&apos;*2)</span><br><span class="line">string pythonpython</span><br></pre></td></tr></table></figure><p>Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &apos;Python&apos;</span><br><span class="line">&gt;&gt;&gt; print(str[0] ,str[5])</span><br><span class="line">P n</span><br><span class="line">&gt;&gt;&gt; print(str[-1] ,str[-6])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>注意，没有单独的字符类型，一个字符就是长度为1的字符串<br>还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]<br>截取的范围是前闭后开的，并且两个索引都可以省略： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &apos;Python&apos;</span><br><span class="line">&gt;&gt;&gt; str[1:5]</span><br><span class="line">&apos;ytho&apos;</span><br><span class="line">&gt;&gt;&gt; str[:]</span><br><span class="line">&apos;Python&apos;</span><br><span class="line">&gt;&gt;&gt; str[5:]</span><br><span class="line">&apos;n&apos;</span><br><span class="line">&gt;&gt;&gt; str[-6:3]</span><br><span class="line">&apos;Pyt&apos;</span><br></pre></td></tr></table></figure><h1 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h1><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = [&apos;hello&apos;,20,30,&apos;Python&apos;]</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">[&apos;hello&apos;, 20, 30, &apos;Python&apos;]</span><br></pre></td></tr></table></figure><p>和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。<br>列表还支持串联操作，使用+操作符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a + [6, 7, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; 4 ** 3</span><br><span class="line">64</span><br><span class="line">&gt;&gt;&gt; a [3] = 64  # 修改列表值</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 64, 5]</span><br><span class="line">&gt;&gt;&gt; a[0] # 索引返回的指定项</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-3:] # 切割列表并返回新的列表</span><br><span class="line">[3, 64, 5]</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">[1, 2, 3, 64, 5] #返回一个包含有所需元素的新列表</span><br><span class="line">&gt;&gt;&gt; a.append(120) # a列表中添加新值</span><br><span class="line">&gt;&gt;&gt; a.append(2 ** 3) # 列表中添加第七个值</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 64, 5, 120, 8]</span><br></pre></td></tr></table></figure><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a[0] = 9</span><br><span class="line">&gt;&gt;&gt; a[2:5] = [13, 14, 15] # 替换值</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[9, 2, 13, 14, 15, 6]</span><br><span class="line">&gt;&gt;&gt; a[2:5] = []   #移除值</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[9, 2, 6]</span><br><span class="line">&gt;&gt;&gt; # 清除列表</span><br><span class="line">&gt;&gt;&gt; a [:] = []</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; len(a) #内置函数len()用于统计列表</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">&gt;&gt;&gt; n = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; x = [a, n]  #使用嵌套列表</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; x[0]</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">&gt;&gt;&gt; x[0][1]</span><br><span class="line">&apos;b&apos;</span><br></pre></td></tr></table></figure><p>以下是 Python 中列表的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法                  描述</span><br><span class="line">list.append(x)  把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。  </span><br><span class="line">list.extend(L)  通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。  </span><br><span class="line">list.insert(i, x)  在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。  </span><br><span class="line">list.remove(x)  删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。  </span><br><span class="line">list.pop([i])  从列表的指定位置删除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被删除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）  </span><br><span class="line">list.clear()  移除列表中的所有项，等于del a[:]。  </span><br><span class="line">list.index(x)  返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。  </span><br><span class="line">list.count(x)  返回 x 在列表中出现的次数。  </span><br><span class="line">list.sort()  对列表中的元素进行排序。  </span><br><span class="line">list.reverse()  倒排列表中的元素。  </span><br><span class="line">list.copy()  返回列表的浅复制，等于a[:]。</span><br></pre></td></tr></table></figure><p>下面演示列表的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; print(a.count(3), a.count(4), a.count(&apos;x&apos;))</span><br><span class="line">1 1 0</span><br><span class="line">&gt;&gt;&gt; a.insert(2, -1)</span><br><span class="line">&gt;&gt;&gt; a.append(100)    #将列表当做堆栈使用 </span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, -1, 3, 4, 5, 6, 100]</span><br><span class="line">&gt;&gt;&gt; a.index(2)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a.remove(100)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, -1, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[6, 5, 4, 3, -1, 2, 1]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[-1, 1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; from collections import deque #将列表当作队列使用</span><br><span class="line">&gt;&gt;&gt; queue = deque([&quot;Python&quot;,&quot;Java&quot;,&quot;Php&quot;])</span><br><span class="line">&gt;&gt;&gt; queue.append(&quot;C&quot;)</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&apos;Python&apos;</span><br><span class="line">&gt;&gt;&gt; queue</span><br><span class="line">deque([&apos;Java&apos;, &apos;Php&apos;, &apos;C&apos;])</span><br></pre></td></tr></table></figure><h1 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h1><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开<br>元组中的元素类型也可以不相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a =(2019,2020,&apos;python&apos;,&apos;php&apos;)</span><br><span class="line">&gt;&gt;&gt; print(a, type(a), len(a))</span><br><span class="line">(2019, 2020, &apos;python&apos;, &apos;php&apos;) &lt;class &apos;tuple&apos;&gt; 4</span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片<br>其实，可以把字符串看作一种特殊的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; print(tup[0], tup[1:5])</span><br><span class="line">1 (2, 3, 4, 5)</span><br><span class="line">&gt;&gt;&gt; tup[0] = 11  # 修改元组元素的操作是非法的</span><br><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; del tup  </span><br><span class="line">&gt;&gt;&gt; print (tup) #元组被删除后，输出变量会有异常信息</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#7&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print (tup)</span><br><span class="line">NameError: name &apos;tup&apos; is not defined</span><br></pre></td></tr></table></figure><p>tuple的元素不可改变，但它可以包含可变的对象，比如list列表。<br>构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = () # 空元组</span><br><span class="line">tup2 = (20,) # 一个元素，需要在元素后添加逗号</span><br></pre></td></tr></table></figure><p>另外，元组也支持用+操作符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup1, tup2 = (1, 2, 3), (4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; print(tup1+tup2)</span><br><span class="line">(1, 2, 3, 4, 5, 6)</span><br></pre></td></tr></table></figure><h1 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h1><p>集合（set）是一个无序不重复元素的集。<br>基本功能是进行成员关系测试和消除重复元素。<br>可以使用大括号 或者 set()函数创建set集合，注意：创建一个空集合必须用 set() 而不是{ }，因为{ }是用来创建一个空字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &#123; &apos;Java&apos;,&apos;Python&apos;,&apos;C&apos;,&apos;C++&apos;,&apos;PHP&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; print(str)  # 重复的元素被自动去掉</span><br><span class="line">&#123;&apos;PHP&apos;, &apos;C++&apos;, &apos;C&apos;, &apos;Python&apos;, &apos;Java&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; &apos;Python&apos; in str # membership testing（成员测试）</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; # set可以进行集合运算</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; a = set(&apos;python&apos;)</span><br><span class="line">&gt;&gt;&gt; b = set(&apos;php&apos;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&apos;n&apos;, &apos;t&apos;, &apos;o&apos;, &apos;p&apos;, &apos;h&apos;, &apos;y&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; a - b  # a和b的差集</span><br><span class="line">&#123;&apos;o&apos;, &apos;t&apos;, &apos;n&apos;, &apos;y&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; a | b  # a和b的并集</span><br><span class="line">&#123;&apos;o&apos;, &apos;n&apos;, &apos;p&apos;, &apos;h&apos;, &apos;t&apos;, &apos;y&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; a &amp; b  # a和b的交集</span><br><span class="line">&#123;&apos;p&apos;, &apos;h&apos;&#125; </span><br><span class="line">&gt;&gt;&gt; a ^ b # a和b中不同时存在的元素</span><br><span class="line">&#123;&apos;n&apos;, &apos;t&apos;, &apos;o&apos;, &apos;y&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; str = set((&apos;Java&apos;,&apos;Python&apos;,&apos;C&apos;,&apos;C++&apos;,&apos;PHP&apos;))</span><br><span class="line">&gt;&gt;&gt; str.add(&quot;JavaScript&quot;)#添加到集合str中，如果元素已存在，则不进行任何操作</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">&#123;&apos;Python&apos;, &apos;C++&apos;, &apos;PHP&apos;, &apos;JavaScript&apos;, &apos;Java&apos;, &apos;C&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; str.update(&#123;&apos;Ruby&apos;,&apos;C#&apos;&#125;) #可以添加元素，且参数可以是列表，元组，字典等</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">&#123;&apos;Python&apos;, &apos;C++&apos;, &apos;Ruby&apos;, &apos;C#&apos;, &apos;PHP&apos;, &apos;JavaScript&apos;, &apos;Java&apos;, &apos;C&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; str.remove(&quot;C#&quot;)</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">&#123;&apos;Python&apos;, &apos;C++&apos;, &apos;Ruby&apos;, &apos;PHP&apos;, &apos;JavaScript&apos;, &apos;Java&apos;, &apos;C&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; str.remove(&quot;R&quot;) #将元素x从集合str 中移除，如果元素不存在，则会发生错误</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#15&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    str.remove(&quot;R&quot;)</span><br><span class="line">KeyError: &apos;R&apos;</span><br><span class="line">&gt;&gt;&gt; str.discard(&quot;R&quot;) # 移除集合中的元素，且如果元素不存在，不会发生错误</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">&#123;&apos;Python&apos;, &apos;C++&apos;, &apos;Ruby&apos;, &apos;PHP&apos;, &apos;JavaScript&apos;, &apos;Java&apos;, &apos;C&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; x = str.pop()</span><br><span class="line">&gt;&gt;&gt; print(x)</span><br><span class="line">Java</span><br><span class="line">&gt;&gt;&gt;str = set((&apos;Java&apos;,&apos;Python&apos;,&apos;C&apos;,&apos;C++&apos;,&apos;PHP&apos;))</span><br><span class="line">&gt;&gt;&gt; len(str)  #计算集合元素个数</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; str.clear() #清空集合</span><br><span class="line">&gt;&gt;&gt; print(str) </span><br><span class="line">set()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="Dictionaries（字典）"><a href="#Dictionaries（字典）" class="headerlink" title="Dictionaries（字典）"></a>Dictionaries（字典）</h1><p>字典（dictionary）是Python中另一个非常有用的内置数据类型<br>字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。<br>关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。<br>在同一个字典中，关键字还必须互不相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dic = &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; tel = &#123;&apos;Python&apos;:2,&apos;Java&apos;:1,&apos;C&apos;:3&#125;</span><br><span class="line">&gt;&gt;&gt; tel</span><br><span class="line">&#123;&apos;Python&apos;: 2, &apos;Java&apos;: 1, &apos;C&apos;: 3&#125;</span><br><span class="line">&gt;&gt;&gt; tel[&apos;Python&apos;]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; del tel[&apos;Java&apos;]</span><br><span class="line">&gt;&gt;&gt; tel[&apos;Php&apos;]= 4</span><br><span class="line">&gt;&gt;&gt; tel</span><br><span class="line">&#123;&apos;Python&apos;: 2, &apos;C&apos;: 3, &apos;Php&apos;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; list(tel.keys())</span><br><span class="line">[&apos;Python&apos;, &apos;C&apos;, &apos;Php&apos;]</span><br><span class="line">&gt;&gt;&gt; sorted(tel.keys())</span><br><span class="line">[&apos;C&apos;, &apos;Php&apos;, &apos;Python&apos;]</span><br><span class="line">&gt;&gt;&gt; &apos;Python&apos; in tel</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &apos;Php&apos; not  in tel</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dict([(&apos;Python&apos;, 2), (&apos;Java&apos;, 1), (&apos;Php&apos;, 4)])</span><br><span class="line">&#123;&apos;Python&apos;: 2, &apos;Java&apos;: 1, &apos;Php&apos;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;</span><br><span class="line">&#123;2: 4, 4: 16, 6: 36&#125;</span><br><span class="line">&gt;&gt;&gt; dict(python=2,java=1,php=4)</span><br><span class="line">&#123;&apos;python&apos;: 2, &apos;java&apos;: 1, &apos;php&apos;: 4&#125;</span><br></pre></td></tr></table></figure><h1 id="Python-条件控制"><a href="#Python-条件控制" class="headerlink" title="Python 条件控制"></a>Python 条件控制</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>每个条件后面要使用冒号(:),表示接下来是满足条件后要执行的语句块<br>使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&apos;your age is&apos;, age)</span><br><span class="line">    print(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your age is 20</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>以下是一个简单的if实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var1 = 100</span><br><span class="line">if var1:</span><br><span class="line">   print (&quot;var1 - if 表达式条件为 true&quot;)</span><br><span class="line">   print (var1)</span><br><span class="line"> </span><br><span class="line">var2 = 0</span><br><span class="line">if var2:</span><br><span class="line">   print (&quot;var2 - if 表达式条件为 true&quot;)</span><br><span class="line">   print (var2)</span><br><span class="line">print (&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 - if 表达式条件为 true</span><br><span class="line">100</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h2 id="以下为if中常用的操作运算符"><a href="#以下为if中常用的操作运算符" class="headerlink" title="以下为if中常用的操作运算符:"></a>以下为if中常用的操作运算符:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">操作符    描述</span><br><span class="line">&lt;        小于 </span><br><span class="line">&lt;=       小于或等于 </span><br><span class="line">&gt;        大于 </span><br><span class="line">&gt;=       大于或等于 </span><br><span class="line">==       等于，比较对象是否相等 </span><br><span class="line">!=       不等于</span><br></pre></td></tr></table></figure><h2 id="elif语句"><a href="#elif语句" class="headerlink" title="elif语句"></a>elif语句</h2><p>elif是else if的缩写,完全可以有多个elif,所以if语句的完整形式就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件判断1&gt;:</span><br><span class="line">    &lt;执行1&gt;</span><br><span class="line">elif &lt;条件判断2&gt;:</span><br><span class="line">    &lt;执行2&gt;</span><br><span class="line">elif &lt;条件判断3&gt;:</span><br><span class="line">    &lt;执行3&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;执行4&gt;</span><br></pre></td></tr></table></figure><p>用input()读取用户的输入,进行数字的比较运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">number = 7</span><br><span class="line">guess = -1</span><br><span class="line">print(&quot;数字猜谜游戏!&quot;)</span><br><span class="line">while guess != number:</span><br><span class="line">    guess = int(input(&quot;请输入你猜的数字：&quot;))</span><br><span class="line"> </span><br><span class="line">    if guess == number:</span><br><span class="line">        print(&quot;恭喜，你猜对了！&quot;)</span><br><span class="line">    elif guess &lt; number:</span><br><span class="line">        print(&quot;猜的数字小了...&quot;)</span><br><span class="line">    elif guess &gt; number:</span><br><span class="line">        print(&quot;猜的数字大了...&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入你猜的数字：2</span><br><span class="line">猜的数字小了...</span><br><span class="line">请输入你猜的数字：8</span><br><span class="line">猜的数字大了...</span><br><span class="line">请输入你猜的数字：7</span><br><span class="line">恭喜，你猜对了！</span><br></pre></td></tr></table></figure><h2 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h2><p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if 表达式1:</span><br><span class="line">    语句</span><br><span class="line">    if 表达式2:</span><br><span class="line">        语句</span><br><span class="line">    elif 表达式3:</span><br><span class="line">        语句</span><br><span class="line">    else:</span><br><span class="line">        语句</span><br><span class="line">elif 表达式4:</span><br><span class="line">    语句</span><br><span class="line">else:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>以下是一个简单的if 嵌套实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num=int(input(&quot;输入一个数字：&quot;))</span><br><span class="line">if num%2==0:</span><br><span class="line">    if num%3==0:</span><br><span class="line">        print (&quot;你输入的数字可以整除 2 和 3&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print (&quot;你输入的数字可以整除 2，但不能整除 3&quot;)</span><br><span class="line">else:</span><br><span class="line">    if num%3==0:</span><br><span class="line">        print (&quot;你输入的数字可以整除 3，但不能整除 2&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print  (&quot;你输入的数字不能整除 2 和 3&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字：6</span><br><span class="line">你输入的数字可以整除 2 和 3</span><br></pre></td></tr></table></figure><h1 id="Python-循环"><a href="#Python-循环" class="headerlink" title="Python 循环"></a>Python 循环</h1><p>Python中的循环语句有for和while</p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>Python中while语句的一般形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 判断条件：</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>同样需要注意冒号和缩进,Python中没有do..while循环<br>while输出1-10之间所有的偶数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num=10</span><br><span class="line">count=0</span><br><span class="line">while num&gt;0 :</span><br><span class="line">    if num%2==0 :</span><br><span class="line">        print(num)</span><br><span class="line">        count +=1</span><br><span class="line">    num -=1</span><br><span class="line">print(count,&quot;个偶数！&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">8</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">5 个偶数！</span><br></pre></td></tr></table></figure><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>可以通过设置条件表达式永远不为 false 来实现无限循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = 1</span><br><span class="line">while var == 1 :  # 表达式永远为 true</span><br><span class="line">   num = int(input(&quot;输入一个数字:&quot;))</span><br><span class="line">   print (&quot;你输入的数字是:&quot;, num)</span><br><span class="line"> </span><br><span class="line">print (&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字:3</span><br><span class="line">你输入的数字是: 3</span><br><span class="line">输入一个数字:</span><br></pre></td></tr></table></figure><p>使用CTRL+C来退出当前的无限循环<br>无限循环在服务器上客户端的实时请求非常有用</p><h2 id="while循环使用else语句"><a href="#while循环使用else语句" class="headerlink" title="while循环使用else语句"></a>while循环使用else语句</h2><p>在while … else在条件语句为false时执行else的语句块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 3:</span><br><span class="line">   print (count, &quot;小于3&quot;)</span><br><span class="line">   count = count + 1</span><br><span class="line">else:</span><br><span class="line">   print (count, &quot;大于或等于3&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小于3</span><br><span class="line">小于3</span><br><span class="line">小于3</span><br><span class="line">大于或等于3</span><br></pre></td></tr></table></figure><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [&apos;python&apos;, &apos;java&apos;, &apos;php&apos;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">java</span><br><span class="line">php</span><br></pre></td></tr></table></figure><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>break语句用于跳出当前循环体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sites = [&quot;c++&quot;, &quot;java&quot;,&quot;php&quot;,&quot;python&quot;]</span><br><span class="line">for site in sites:</span><br><span class="line">    if site == &quot;python&quot;:</span><br><span class="line">        print(&quot;hello Python!&quot;)</span><br><span class="line">        break</span><br><span class="line">    print(&quot;循环数据 &quot; + site)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;没有循环数据!&quot;)</span><br><span class="line">print(&quot;完成循环!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">循环数据 c++</span><br><span class="line">循环数据 java</span><br><span class="line">循环数据 php</span><br><span class="line">hello Python!</span><br><span class="line">完成循环!</span><br></pre></td></tr></table></figure><h2 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h2><p>遍历数字序列,可以使用内置range()函数。会生成数列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">     print(i)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>可以使用range指定区间的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(5,9) :</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>break和continue语句及循环中的else子句<br>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:     # 第一个实例</span><br><span class="line">     if letter == &apos;n&apos;:</span><br><span class="line">        break</span><br><span class="line">     print (&apos;当前字母为 :&apos;, letter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var = 10                    # 第二个实例</span><br><span class="line">while var &gt; 0:              </span><br><span class="line">   print (&apos;当期变量值为 :&apos;, var)</span><br><span class="line">   var = var -1</span><br><span class="line">   if var == 5:</span><br><span class="line">      break</span><br><span class="line">print (&quot;hello python!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当前字母为 : p</span><br><span class="line">当前字母为 : y</span><br><span class="line">当前字母为 : t</span><br><span class="line">当前字母为 : h</span><br><span class="line">当前字母为 : o</span><br><span class="line">当期变量值为 : 10</span><br><span class="line">当期变量值为 : 9</span><br><span class="line">当期变量值为 : 8</span><br><span class="line">当期变量值为 : 7</span><br><span class="line">当期变量值为 : 6</span><br><span class="line">hello python!</span><br></pre></td></tr></table></figure><p>continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:     # 第一个实例</span><br><span class="line">   if letter == &apos;o&apos;:        # 字母为 o 时跳过输出</span><br><span class="line">      continue</span><br><span class="line">   print (&apos;当前字母 :&apos;, letter)</span><br><span class="line"> </span><br><span class="line">var = 10                    # 第二个实例</span><br><span class="line">while var &gt; 0:              </span><br><span class="line">   var = var -1</span><br><span class="line">   if var == 5:             # 变量为 5 时跳过输出</span><br><span class="line">      continue</span><br><span class="line">   print (&apos;当前变量值 :&apos;, var)</span><br><span class="line">print (&quot;hello python!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">当前字母 : p</span><br><span class="line">当前字母 : y</span><br><span class="line">当前字母 : t</span><br><span class="line">当前字母 : h</span><br><span class="line">当前字母 : n</span><br><span class="line">当前变量值 : 9</span><br><span class="line">当前变量值 : 8</span><br><span class="line">当前变量值 : 7</span><br><span class="line">当前变量值 : 6</span><br><span class="line">当前变量值 : 4</span><br><span class="line">当前变量值 : 3</span><br><span class="line">当前变量值 : 2</span><br><span class="line">当前变量值 : 1</span><br><span class="line">当前变量值 : 0</span><br><span class="line">hello python!</span><br></pre></td></tr></table></figure><h2 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h2><p>Python pass是空语句，是为了保持程序结构的完整性<br>pass 不做任何事情，一般用做占位语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;while True:</span><br><span class="line">... pass  # 等待键盘中断 (Ctrl+C)</span><br></pre></td></tr></table></figure><p>最小的类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyEmptyClass:</span><br><span class="line">... pass</span><br></pre></td></tr></table></figure><p>在字母为 o 时 执行 pass 语句块:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;: </span><br><span class="line">   if letter == &apos;o&apos;:</span><br><span class="line">      pass</span><br><span class="line">      print (&apos;执行 pass 块&apos;)</span><br><span class="line">   print (&apos;当前字母 :&apos;, letter)</span><br><span class="line"> </span><br><span class="line">print (&quot;hello python!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当前字母 : p</span><br><span class="line">当前字母 : y</span><br><span class="line">当前字母 : t</span><br><span class="line">当前字母 : h</span><br><span class="line">执行 pass 块</span><br><span class="line">当前字母 : o</span><br><span class="line">当前字母 : n</span><br><span class="line">hello python!</span><br></pre></td></tr></table></figure><h1 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h1><p>Python定义函数使用def关键字,一般格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名（参数列表）:</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><p>使用函数来输出”Hello World！”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;def hello() :</span><br><span class="line">   print(&quot;Hello World!&quot;)</span><br><span class="line">&gt;&gt;&gt; hello()</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h1><h1 id="Python-输入和输出"><a href="#Python-输入和输出" class="headerlink" title="Python 输入和输出"></a>Python 输入和输出</h1><h1 id="Python-错误和异常"><a href="#Python-错误和异常" class="headerlink" title="Python 错误和异常"></a>Python 错误和异常</h1><h1 id="Python-类"><a href="#Python-类" class="headerlink" title="Python 类"></a>Python 类</h1><h1 id="Python-标准库"><a href="#Python-标准库" class="headerlink" title="Python 标准库"></a>Python 标准库</h1><h1 id="Python-文件IO"><a href="#Python-文件IO" class="headerlink" title="Python 文件IO"></a>Python 文件IO</h1><h2 id="python文件操作的步骤"><a href="#python文件操作的步骤" class="headerlink" title="python文件操作的步骤"></a>python文件操作的步骤</h2><h3 id="用open打开一个文件"><a href="#用open打开一个文件" class="headerlink" title="用open打开一个文件"></a>用open打开一个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;文件路径&quot;,&quot;文件访问模式&quot;)</span><br></pre></td></tr></table></figure><h3 id="对文件的操作"><a href="#对文件的操作" class="headerlink" title="对文件的操作"></a>对文件的操作</h3><h3 id="close关闭打开的文件"><a href="#close关闭打开的文件" class="headerlink" title="close关闭打开的文件"></a>close关闭打开的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>也可以使用一行命令打开文件，不用close()关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;文件路径&quot;,“文件访问模式”) as f:</span><br></pre></td></tr></table></figure><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r (read)</td><td>只读模式,不能写（文件必须存在，不存在会报错）</td></tr><tr><td>w (write)</td><td>只写模式,不能读（文件存在则会被覆盖内容（要千万注意），文件不存在则创建）</td></tr><tr><td>a (append)</td><td>追加模式,不能读</td></tr><tr><td>r+</td><td>读写模式</td></tr><tr><td>w+</td><td>写读模式</td></tr><tr><td>a+</td><td>追加读模式</td></tr><tr><td>rb</td><td>二进制读模式</td></tr><tr><td>wb</td><td>二进制写模式</td></tr><tr><td>ab</td><td>二进制追加模式</td></tr><tr><td>rb+</td><td>二进制读写模式</td></tr><tr><td>wb+</td><td>二进制写读模式</td></tr><tr><td>ab+</td><td>二进制追加读模式</td></tr><tr><td>### 只读模式r</td><td></td></tr><tr><td>只读模式读取数据</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;data.txt&quot;,encoding=&quot;utf-8&quot;) # 默认就是只读模式</span><br><span class="line">#不同平台,可能会字符集编码不一致,不一致的需要指定,一致的不用指定</span><br><span class="line">d = f.read() # 从文件读取内容</span><br><span class="line">print(d)</span><br><span class="line">f.close() # 关闭打开的文件</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><h3 id="tell-与seek-的使用"><a href="#tell-与seek-的使用" class="headerlink" title="tell()与seek()的使用"></a>tell()与seek()的使用</h3><p>tell()　　获取当前的读取数据的位置(可以理解为一个读光标当前的位置)<br>seek(n)　　从第n个字符开始读取(将读光标移动到第n个字符)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;data.txt&quot;, &quot;r&quot;)</span><br><span class="line">print(f.tell())            # 结果为0 (告诉你光标在哪,刚打开文件，光标在0位置)</span><br><span class="line">f.seek(5)                # 移你的光标到整个文件的第6个字符那(因为0为第一个)</span><br><span class="line">print(f.tell())            # 结果为5</span><br><span class="line">f.seek(2)                # 移你的光标到整个文件的第3个字符那，从0开始算，而不是从上面的位置开始算</span><br><span class="line">print(f.tell())            # 结果为2</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>read(),readline()和readlins()三种读数据的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;data.txt&quot;, &quot;r&quot;)</span><br><span class="line"></span><br><span class="line">f.seek(5)                    # 光标移到第6个字符那里</span><br><span class="line">data1 = f.read()            # read是读整个文件在光标后面的所有字符(包括光标所在的那个字符)，读完后，会把光标移到你读完的位置</span><br><span class="line"></span><br><span class="line">f.seek(5)                    # 光标重置到第6个字符那里</span><br><span class="line">data2 = f.readline()        # readline是读光标所在这一行的在光标后面的所有字符(包括光标所在的那个字符)，读完后，会把光标移到你读完的位置</span><br><span class="line"></span><br><span class="line">f.seek(5)                    # 光标重置到第6个字符那里</span><br><span class="line">data3 = f.readlines()        # readlines和read类似，但把读的字符按行来区分做成了列表</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">print(data1)</span><br><span class="line">print(data2)</span><br><span class="line">print(data3)</span><br></pre></td></tr></table></figure><p>循环读取文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;data.txt&quot;, &quot;r&quot;)</span><br><span class="line"></span><br><span class="line">#循环方法一:</span><br><span class="line">for index, line in enumerate(f.readlines()):</span><br><span class="line">     print(index, line.strip())        </span><br><span class="line">     # 需要strip处理，否则会有换行</span><br><span class="line">        </span><br><span class="line"># 循环方法二:相当于是一行一行的读，而不是一次性全读（如果文件很大，那么一次性全读会速度很慢)</span><br><span class="line">for index, line in enumerate(f):</span><br><span class="line">     print(index, line.strip())</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="只写模式w"><a href="#只写模式w" class="headerlink" title="只写模式w"></a>只写模式w</h3><p>只读模式下，只能向文件写内容，不能读取<br>如果文件不存在，会自动创建<br>如果文件已存在，则会先清空文件，再向文件写入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;data.txt&quot;, &apos;w&apos;)    # 文件不存在,会帮你创建(类似shell里的 &gt; 符号)</span><br><span class="line"></span><br><span class="line">data = f.read()                  # 只写模式,读会报错</span><br><span class="line">f.write(&quot;hello\n&quot;)            # 不加\n,默认不换行写</span><br><span class="line">f.write(&quot;world\n&quot;)</span><br><span class="line">f.truncate()                # 截断，括号里没有数字，那么就是不删除</span><br><span class="line">f.truncate(3)                # 截断，数字为3，就是保留前3个字节</span><br><span class="line">f.truncate(0)                # 截断，数字为0，就是全删除</span><br><span class="line"> </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp入门</title>
      <link href="/2019/10/13/Gulp%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/13/Gulp%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Gulp是什么？<br>Gulp是一个开源的JavaScript的开源自动化工具<br>Gulp应用于前后端代码管理的一种工具<br>Gulp基于Node.js和NPM应用的构建工具,能够极大的提高开发效率<br>Gulp主要用于处理耗时及重复的任务,让Gulp自动执行任务<br>Gulp可以处理解决任务 例如:压缩代码 合并代码等<br>Gulp的工作原理<br>Gulp是基于node.js中的数据流、主要使用pipe时间输入及输出、插件独立使用<br>Gulp安装<br>请确保已经安装node.js环境<br>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>检查Gulp是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp -v</span><br></pre></td></tr></table></figure><p>本地安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>一路回车,生成package.json文件<br>本地安装Gulp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure><p>Gulp API介绍<br>Gulp的核心API只有4个：task、watch、src、dest</p><h1 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task --定义任务</span><br><span class="line">gulp.src --找到需要执行任务的文件</span><br><span class="line">gulp.dest --执行任务的文件的去处</span><br><span class="line">gulp.watch --观察文件是否发生变化</span><br></pre></td></tr></table></figure><p>项目的文件放在本地src/文件夹中，项目结构为：</p><p>├── gulpfile.js<br>├── node_modules<br>├── …<br>├── package.json<br>└── src<br>├── js<br>│ ├── a.js<br>│ └── b.js<br>└── scss<br>├── c.scss<br>└── d.scss</p><h1 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h1><p>gulp使用gulp.task函数创建任务<br>name:任务名称<br>deps:任务列表,这些任务会在当前任务运行之前被执行;当这个任务依赖于其他任务时,可以把任务写入列表中,否则可以不写<br>fn:任务函数,可以把要执行的代码都写在这个函数中,该参数也是可选的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//处理任务</span><br><span class="line">var  gulp = require(&apos;gulp&apos;);    //引用gulp</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;one&apos;, function()&#123;</span><br><span class="line">console.log(&apos;task one&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;two&apos;, [&apos;one&apos;], function()&#123;</span><br><span class="line">console.log(&apos;task two&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>gulp.task创建了one和two任务,该two任务依赖one任务<br>使用gulp命令执行two任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp two</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//task()：定义任务</span><br><span class="line">//src():源文件</span><br><span class="line">// pipe():管道流，接通源头文件与目标文件的输出</span><br><span class="line">// dest():输出文件的目的地</span><br><span class="line">// watch():监视文件</span><br><span class="line">//事例:</span><br><span class="line">//处理任务</span><br><span class="line">var  gulp = require(&apos;gulp&apos;);    //引用gulp</span><br><span class="line">var  del = require(&apos;del&apos;);      //引用gulp删除插件</span><br><span class="line">var  rename = require(&quot;gulp-rename&quot;);　　//引用重命名插件</span><br><span class="line"></span><br><span class="line">// 1.复制单个文件</span><br><span class="line">gulp.task(&quot;copyhtml&quot;,function()&#123;</span><br><span class="line">gulp.src(&quot;src/index.html&quot;)</span><br><span class="line">.pipe(gulp.dest(&quot;dist&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 2.复制多个文件</span><br><span class="line">gulp.task(&quot;copyallhtml&quot;,function()&#123;</span><br><span class="line">gulp.src(&quot;src/*.html&quot;)</span><br><span class="line">.pipe(gulp.dest(&quot;dist&quot;)); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 3、复制指定文件</span><br><span class="line">// [指定的文件已，指定的文件2]</span><br><span class="line">gulp.task(&apos;copyjs&apos;,function () &#123;</span><br><span class="line">    return gulp.src([&quot;./src/public/js/index.js&quot;,&apos;dist/public/js/index1.js&apos;])</span><br><span class="line">    .pipe(gulp.dest(&quot;dist/public/js&quot;))</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 4、某个文件</span><br><span class="line">// ！排队的文件</span><br><span class="line">gulp.task(&quot;copyJs&quot;,function () &#123;</span><br><span class="line">    return gulp.src([&apos;./src/public/js/*.js&apos;,&apos;!./src/public/js/index2.js&apos;])</span><br><span class="line">        .pipe(gulp.dest(&apos;dist/public/js&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 5、复制多个后缀名的图片</span><br><span class="line">// &#123;选项一，选项二&#125;</span><br><span class="line">gulp.task(&quot;copyImage&quot;,function () &#123;</span><br><span class="line">    return gulp.src(&apos;./src/public/img/*.&#123;png,jpg,bmp,jpeg,gif&#125;&apos;)</span><br><span class="line">        .pipe(gulp.dest(&apos;dist/public/img&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 6、执行多个任务</span><br><span class="line">// gulp.task(&apos;任务名称&apos;,[任务依赖的模块],回调函数)</span><br><span class="line">// 依赖任务之间没有顺序之分，异步执行</span><br><span class="line">// 依赖任务之间完成后，在执行当前的回调函数</span><br><span class="line">gulp.task(&apos;build&apos;,[&apos;copyallhtml&apos;,&apos;copyJs&apos;,&apos;copyImage&apos;],function () &#123;</span><br><span class="line">    console.log(&apos;编译成功&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 7、Watch:监视文件的变化</span><br><span class="line">gulp.task(&apos;myWatch&apos;,function () &#123;</span><br><span class="line">    gulp.watch(&apos;./src/public/index.html&apos;,[&apos;build&apos;])</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 8、删除文件</span><br><span class="line">gulp.task(&quot;del&quot;,function () &#123;</span><br><span class="line">    // del(&apos;./dist/public/img/*.&#123;jpg,png,jepg,gif&#125;&apos;)</span><br><span class="line">    // *：所有文件</span><br><span class="line">    // **：所有文件夹</span><br><span class="line">    del([&apos;./dist/public/js/*&apos;]);</span><br><span class="line">    del([&apos;./dist/**/*&apos;]);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&apos;default&apos;,function () &#123;</span><br><span class="line">    gulp.start(&apos;serve&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//9、重命名css文件</span><br><span class="line">gulp.task(&apos;reName&apos;,function () &#123;</span><br><span class="line">    return gulp.src(&apos;./src/public/sass/*.css&apos;)</span><br><span class="line">        .pipe(rename(&#123;suffix: &apos;.css&apos;&#125;))</span><br><span class="line">        .pipe(css())</span><br><span class="line">        .pipe(gulp.dest(&apos;./src/public/sass&apos;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="gulp-uglify-JS压缩"><a href="#gulp-uglify-JS压缩" class="headerlink" title="gulp-uglify(JS压缩)"></a>gulp-uglify(JS压缩)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-uglify --save-dev</span><br></pre></td></tr></table></figure><h2 id="gulp-minify-html-html压缩）"><a href="#gulp-minify-html-html压缩）" class="headerlink" title="gulp-minify-html(html压缩）"></a>gulp-minify-html(html压缩）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-html --save-dev</span><br></pre></td></tr></table></figure><h2 id="gulp-concat-js文件合并"><a href="#gulp-concat-js文件合并" class="headerlink" title="gulp-concat(js文件合并)"></a>gulp-concat(js文件合并)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-concat</span><br></pre></td></tr></table></figure><h2 id="gulp-less"><a href="#gulp-less" class="headerlink" title="gulp-less"></a>gulp-less</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-less --save-dev</span><br></pre></td></tr></table></figure><h2 id="gulp-jada"><a href="#gulp-jada" class="headerlink" title="gulp-jada"></a>gulp-jada</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-jada --save-dev</span><br></pre></td></tr></table></figure><h2 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp-sass"></a>gulp-sass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-sass --save-dev</span><br></pre></td></tr></table></figure><h2 id="gulp-imagemin（图片压缩）"><a href="#gulp-imagemin（图片压缩）" class="headerlink" title="gulp-imagemin（图片压缩）"></a>gulp-imagemin（图片压缩）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-imagemin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">//处理任务</span><br><span class="line">var  gulp = require(&apos;gulp&apos;);    //引用gulp</span><br><span class="line">var  uglify = require(&apos;gulp-uglify&apos;);　　//引用压缩Js插件</span><br><span class="line">var  css = require(&apos;gulp-clean-css&apos;);　　//gulp压缩css文件</span><br><span class="line">var minifyHtml = require(&quot;gulp-minify-html&quot;);  //gulp压缩html文件</span><br><span class="line">var concat= require(&quot;gulp-concat&quot;); //gulp合并js文件</span><br><span class="line">var jade= require(&apos;gulp-jade&apos;);</span><br><span class="line">var less= require(&quot;gulp-less&quot;);</span><br><span class="line">var sass= require(&quot;gulp-sass&quot;);</span><br><span class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;minify-html&apos;,function() &#123;</span><br><span class="line">      gulp.src(&apos;src/**/*.html&apos;)//要压缩的html文件</span><br><span class="line">     .pipe(minifyHtml())//压缩</span><br><span class="line">     .pipe(gulp.dest(&apos;build&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;minify-html&apos;]);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;concat&apos;,function() &#123;</span><br><span class="line">       gulp.src(&apos;src/**/*.js&apos;)  //要合并的文件</span><br><span class="line">       .pipe(concat(&apos;index.js&apos;))  //合并匹配到的js文件并命名为 &quot;index.js&quot;</span><br><span class="line">       .pipe(gulp.dest(&apos;build/js&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;concat&apos;]);</span><br><span class="line"></span><br><span class="line">gulp.task(&quot;jade&quot;,function()&#123;</span><br><span class="line">gulp.src(&quot;./jade/*.jade&quot;)</span><br><span class="line">      .pipe(jade(&#123;</span><br><span class="line">      pretty:true</span><br><span class="line">&#125;))</span><br><span class="line">    .pipe(gulp.dest(&quot;html/&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"> gulp.task(&quot;default&quot;,[&quot;watch&quot;],function()&#123;</span><br><span class="line">       gulp.watch(&quot;jade/*.jade&quot;,[&quot;jade&quot;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 检查、编译scss文件后，保存到build/css中</span><br><span class="line">gulp.task(&apos;sass&apos;, function()&#123;</span><br><span class="line">gulp.src(&apos;src/sass/*.sass&apos;)</span><br><span class="line">.pipe(sass())</span><br><span class="line">.pipe(gulp.dest(&apos;build/css&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;sass&apos;]);</span><br><span class="line"></span><br><span class="line">// 检查、编译less文件后，保存到build/css中</span><br><span class="line">gulp.task(&apos;less&apos;, function()&#123;</span><br><span class="line">gulp.src(&apos;src/less/*.less&apos;)</span><br><span class="line">.pipe(less())</span><br><span class="line">.pipe(gulp.dest(&apos;build/css&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;less&apos;]);</span><br><span class="line"></span><br><span class="line">//图片压缩</span><br><span class="line">gulp.task(&apos;imagemin&apos;,function() &#123;returngulp.src(&apos;src/images/*&apos;)</span><br><span class="line">       .pipe(imagemin())</span><br><span class="line">       .pipe(gulp.dest(&apos;build/images&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;imagemin&apos;]);</span><br><span class="line"></span><br><span class="line">// 检查js语法后，保存到build/js中</span><br><span class="line">gulp.task(&apos;js&apos;, function()&#123;</span><br><span class="line">gulp.src(&apos;src/js/*.js&apos;)</span><br><span class="line">.pipe(jshint())</span><br><span class="line">.pipe(gulp.dest(&apos;build/js&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听文件变化</span><br><span class="line">gulp.task(&quot;watch&quot;, function()&#123;</span><br><span class="line"></span><br><span class="line">/ 监听src目录下的sass、js文件</span><br><span class="line">gulp.watch(&apos;src/**/*.+(sass|js)&apos;, [&apos;sass&apos;, &apos;js&apos;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩css、js文件</span><br><span class="line">gulp.task(&apos;dist&apos;, [&apos;sass&apos;, &apos;js&apos;], function()&#123;</span><br><span class="line"></span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.src(&apos;build/css/*.css&apos;)</span><br><span class="line">.pipe(cssmin())</span><br><span class="line">.pipe(rename(&#123;</span><br><span class="line">suffix: &quot;.min&quot;, // 文件名后缀加上&quot;.min&quot;</span><br><span class="line">&#125;)).pipe(gulp.dest(&apos;dist/css&apos;));</span><br><span class="line"></span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.src(&apos;build/js/*.js&apos;)</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(rename(&#123;</span><br><span class="line">suffix: &quot;.min&quot;, // 文件名后缀加上&quot;.min&quot;</span><br><span class="line">&#125;)).pipe(gulp.dest(&apos;dist/js&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;default&apos;, [&quot;sass&quot;, &quot;js&quot;, &quot;watch&quot;]);</span><br></pre></td></tr></table></figure><h1 id="gulp-src-globs-options"><a href="#gulp-src-globs-options" class="headerlink" title="gulp.src(globs[, options])"></a>gulp.src(globs[, options])</h1><p>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 读取src/scss/目录下scss文件</span><br><span class="line">gulp.src(&apos;src/scss/*.scss&apos;)</span><br><span class="line">.pipe(sass())</span><br><span class="line">.pipe(gulp.dest(&apos;build/css&apos;));</span><br></pre></td></tr></table></figure><p>gulp使用gulp.src函数读取文件,然后将文件内容转换成stream流后通过pipe传输给其他的任务,最终通过gulp.dest将处理结果写入文件中,整个流程如下:<br><img src="/images/16.PNG" alt></p><h2 id="列出globs参数的匹配规则："><a href="#列出globs参数的匹配规则：" class="headerlink" title="列出globs参数的匹配规则："></a>列出globs参数的匹配规则：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*:匹配0到多个字符</span><br><span class="line">*.js:匹配js文件</span><br><span class="line">*.css:匹配css文件</span><br><span class="line">**：匹配0到多个目录或文件;如:</span><br><span class="line">src/**/*.js:匹配src/目录下所有的js文件</span><br><span class="line">?:匹配一个字符;如:</span><br><span class="line">?.js：匹配a.js和b.js,不能匹配ab.js</span><br><span class="line">!:不匹配</span><br><span class="line">!*.js:不匹配js文件</span><br><span class="line">[字符]:匹配方括号内出现字符的任意一个;如：</span><br><span class="line">[abc].js:匹配a.js、b.js、c.js</span><br><span class="line">[^abc].js:不匹配a.js、b.js、c.js</span><br><span class="line">(模式1|模式2):匹配括号内任意一个模式,可与*、+、?和!作为前缀组合使用；如:</span><br><span class="line">*.+(js|css):匹配js文件或css文件</span><br></pre></td></tr></table></figure><h1 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[, options])"></a>gulp.dest(path[, options])</h1><p>将stream流写入文件<br>path:写入文件的目录<br>options:可选参数,一般不用,可以忽略<br>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 编译scss文件后，保存到build/css/目录中</span><br><span class="line">gulp.src(&apos;src/scss/*.scss&apos;)</span><br><span class="line">.pipe(sass())</span><br><span class="line">.pipe(gulp.dest(&apos;build/css&apos;));</span><br></pre></td></tr></table></figure><h1 id="gulp-watch-glob-opts-tasks"><a href="#gulp-watch-glob-opts-tasks" class="headerlink" title="gulp.watch(glob[, opts], tasks)"></a>gulp.watch(glob[, opts], tasks)</h1><p>gulp.watch用来监视文件内容是否变化<br>glob:文件匹配模式,规则与gulp.src中的glob参数一样<br>opts:可选参数,一般不用,可以忽略<br>task:任务列表,当glob匹配的文件有变化时,就会执行该列表中的任务<br>实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(&apos;src/**/*.+(scss|js)&apos;, [&apos;sass&apos;, &apos;js&apos;]);</span><br></pre></td></tr></table></figure><p>监控src/目录下所有的scss文件和js文件,如果有文件内容发送变化,则顺序执行sass、js任务</p>]]></content>
      
      
      <categories>
          
          <category> Gulp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript入门教程</title>
      <link href="/2019/10/13/TypeScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/13/TypeScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript 的一个超集,而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程<br>TypeScript扩展了JavaScript 的句法，所以任何现有的JavaScript 程序可以不加改变的在TypeScript下工作。TypeScript 是为大型应用之开发而设计,而编译时它产生JavaScript以确保兼容性。TypeScript 支持为已存在的JavaScript库添加类型信息的头文件,扩展了它对于流行的库如jQuery, MongoDB,Node.js的好处<br>安装Node.js<br>安装Node.js官网下载一个最新版本:<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a><br>安装好后,可以打开命令行工具,输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装TypeScript包<br>输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><p>Typescript特性<br>TypeScript是一种给JavaScript添加特性的语言扩展。<br>● 类型批注和编译时类型检查<br>●类<br>●接口<br>●模块<br>●lambda函数<br>TypeScript中的数据类型有:<br>Undefined:<br>Number:数值类型<br>string:字符串类型<br>Boolean:布尔类型<br>enum:枚举类型<br>any:任意类型<br>void:空类型<br>Array:数组类型<br>Tuple:元组类型<br>Null:空类型<br>TypeScript基本类型<br>1、声明一个boolean类型默认值是false<br>在JavaScript和TypeScript中也具有最基本的逻辑断言值true/false,采用boolean类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var isFlag:boolean=false;</span><br></pre></td></tr></table></figure><p>2、声明一个number类型值如:JavaScript,TypeScript 所有的数值类型采用浮点型计数,其类型为number</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var orderNumber:number=100;</span><br></pre></td></tr></table></figure><p>3、声明一个String类型<br>在webpages的JavaScript或者服务端的应用程序最基本的功能就是处理文本数据。在其他语 言中大多使用string去代表文本数据类型。<br>TypeScript和JavaScript一样也是用双引号(“)或者单引号包裹文本数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var userName:string=&quot;TypeScript&quot;;</span><br></pre></td></tr></table></figure><p>4、数组Array<br>在TypeScript中如JavaScript一样允许我们操结合操作。数组类型可以使用下边两种方式之<br>第一种方式,你可以在数据类型之后带上’[]‘:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var list:number[] = [1, 2, 3];</span><br></pre></td></tr></table></figure><p>第二种方式,也可以采用泛型的数组类型：泛型数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var list1:Array&lt;number&gt;=[1, 2, 3];</span><br></pre></td></tr></table></figure><p>5、枚举Enum<br>TypeScript为JavaScript新增了枚举这种标准的集合数据类型。和在 c#中一样,枚举是为一组数值类型一组更友好的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum 关键字 枚举对象&#123;声明变量&#125;</span><br><span class="line">enum Color &#123;Red, Green, Blue&#125;;</span><br><span class="line">var c1: Color = Color.Green;</span><br><span class="line">从枚举里面拿出绿色出来赋给一个叫c的变量</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Color1 &#123;Red = 1, Green = 2, Blue = 4&#125;;</span><br><span class="line">var c2: Color1 = Color1.Green;</span><br><span class="line">enum Color2 &#123;Red = 1, Green, Blue&#125;;</span><br><span class="line">var colorName: string = Color2[2];</span><br><span class="line">alert(colorName);</span><br></pre></td></tr></table></figure><p>6、any<br>any类型是一种强大的兼容存在的JavaScript库的类型系统。允许跳过TypeScript的编 译时类型的检查。any类型对于我们只知道部分数据类型，但是不是所有的数据类型的类型系统。如一个混合了多种类型的集合数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var notSure:any = 4;</span><br></pre></td></tr></table></figure><p>notSure这个是不确定的值,默认先给一个数字4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notSure = &quot;TypeScript&quot;;</span><br></pre></td></tr></table></figure><p>改变这个值为TypeScript<br>7、void 函数的返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function hello():void&#123;</span><br><span class="line"> console.log(TypeScript);</span><br><span class="line">&#125;</span><br><span class="line">function tes():string&#123;</span><br><span class="line">return &quot;TypeScript&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr:[string,nubmer]=[&quot;TypeScript&quot;,10]</span><br></pre></td></tr></table></figure><p>9、undefined null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let x = undefined;</span><br></pre></td></tr></table></figure><p>10、联合类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x:number | string | boolean;</span><br><span class="line">x =[1,2,3]</span><br></pre></td></tr></table></figure><p>11、类型断言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x:number | string | boolean=&quot;TypeScript&quot;;</span><br><span class="line">let srrlength:number=(&lt;string&gt;x5).length</span><br><span class="line"></span><br><span class="line">let srrlengths:number=(x5 as string).length</span><br></pre></td></tr></table></figure><p>12.TypeScript接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//定义接口</span><br><span class="line">interface index&#123;</span><br><span class="line">Printing(mes:string):string;</span><br><span class="line">&#125;</span><br><span class="line">//实现接口</span><br><span class="line">class indexs  implements index&#123;</span><br><span class="line">Printing(mes:string):string&#123;</span><br><span class="line">return mes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let x = new indexs()</span><br><span class="line">let val =x.Printing(&quot;TypeScript&quot;)</span><br><span class="line">console.log(val)</span><br></pre></td></tr></table></figure><p>对函数的约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface myfunction()&#123;</span><br><span class="line">(a:string,b:number):boolean;</span><br><span class="line">&#125;</span><br><span class="line">let fun = myfunction;</span><br><span class="line">fun = function(a:string,b:number):boolean&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Arr&#123;</span><br><span class="line">[index:number]:string;</span><br><span class="line">&#125;</span><br><span class="line">let arr:Arr;</span><br><span class="line">arr=[&quot;TypeScript&quot;,&quot;hello&quot;]</span><br><span class="line">console.log(arr[0])</span><br></pre></td></tr></table></figure><p>json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Data&#123;</span><br><span class="line">name:string,</span><br><span class="line">readonly age:number, //只读属性</span><br><span class="line">email?:string //可选属性</span><br><span class="line">&#125;</span><br><span class="line">function showdata(n:Data)&#123;</span><br><span class="line"> console.log(JSON.stringify(n));</span><br><span class="line">&#125;</span><br><span class="line">showdata(&#123;name:&quot;张三&quot;,age:30&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery入门</title>
      <link href="/2019/10/09/Jquery%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/09/Jquery%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是jQuery？"><a href="#什么是jQuery？" class="headerlink" title="什么是jQuery？"></a>什么是jQuery？</h1><p>jQuery是一个JavaScript函数库<br>Query是一个javascript的框架,是对javascript的一种封装<br>jQuery是一个轻量级的”写的少,做的多”的JavaScript库</p><h1 id="jQuery库包含以下功能："><a href="#jQuery库包含以下功能：" class="headerlink" title="jQuery库包含以下功能："></a>jQuery库包含以下功能：</h1><ul><li>HTML元素选取</li><li>HTML元素操作</li><li>CSS操作</li><li>HTML 事件函数</li><li>JavaScript特效和动画</li><li>HTML DOM遍历和修改</li><li>AJAX</li><li>Utilities<br>提示:除此之外,Jquery还提供了大量的插件<br>网页中添加jQuery<br>可以通过多种方法在网页中添加jQuery,您可以使用以下方法：</li></ul><p>从jquery.com下载jQuery库<br>从CDN中载入jQuery,如从Google中加载jQuery<br>以上两个版本都可以从jquery.com中下载<br>要使用Jquery需要导入一个第三方的javascript库jquery.min.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Staticfile CDN、百度、又拍云、新浪、谷歌和微软的服务器都存有jQuery<br>如果你的站点用户是国内的，建议使用百度、又拍云、新浪等国内CDN地址,如果你站点用户是国外的可以使用谷歌和微软<br>如需从Staticfile CDN、又拍云、新浪、谷歌或微软引用jQuery,请使用以下代码之一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  src=&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h1><p>jQuery语法是为HTML元素的选取编制的,可以对元素执行某些操作</p><h2 id="基础语法-selector-action"><a href="#基础语法-selector-action" class="headerlink" title="基础语法:$(selector).action()"></a>基础语法:$(selector).action()</h2><ul><li>美元符号定义jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery的action()执行对元素的操作</li></ul><h2 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h2><p>实例中的jQuery函数位于一个document ready函数中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//理解 $(function()&#123;&#125;)由两部分组成</span><br><span class="line">// </span><br><span class="line">$();</span><br><span class="line"></span><br><span class="line">function()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//合并之后 </span><br><span class="line">$(function()&#123;</span><br><span class="line">// 执行代码</span><br><span class="line">&#125;);</span><br><span class="line">另一种写法:</span><br><span class="line">//理解 $(document).ready(function()&#123;&#125;)由两部分组成</span><br><span class="line"></span><br><span class="line">$(document).ready();</span><br><span class="line"></span><br><span class="line">function()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//合并之后 </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">// 执行代码</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是为了防止文档在完全加载（就绪）之前运行jQuery代码,即在 DOM 加载完成后才可以对DOM进行操作</p><h2 id="如果在文档没有完全加载之前就运行函数-操作可能失败"><a href="#如果在文档没有完全加载之前就运行函数-操作可能失败" class="headerlink" title="如果在文档没有完全加载之前就运行函数,操作可能失败"></a>如果在文档没有完全加载之前就运行函数,操作可能失败</h2><ul><li>试图隐藏一个不存在的元素</li><li>获得未完全加载的图像的大小</li></ul><h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><p>jQuery选择器允许您对 HTML 元素组或单个元素进行操作<br>jQuery选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML元素<br>jQuery中所有选择器都以美元符号开头：$()</p><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><p>根据标签名选择所有该标签的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//第一种写法</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br><span class="line">   $(&quot;div&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br><span class="line">   $(&quot;h4&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;极客教程&lt;/p&gt;</span><br><span class="line">&lt;div&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;h4&gt;https:geekes.cn&lt;/h4&gt;</span><br><span class="line">&lt;button type=&quot;button&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">//第二种写法</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> $(&quot;#b&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).addClass(&quot;red&quot;);</span><br><span class="line">  $(&quot;p&quot;).addClass(&quot;red&quot;);</span><br><span class="line">  $(&quot;h4&quot;).addClass(&quot;red&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"> &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"> .red&#123;</span><br><span class="line">background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p&gt;极客教程&lt;/p&gt;</span><br><span class="line">&lt;div&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;h4&gt;https:geekes.cn&lt;/h4&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;b&quot;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>##id选择器<br>$(“#id”)<br>根据 id 选择元素<br>id应该是唯一的,如果id重复,则只会选择第一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;#d&quot;).addClass(&quot;red&quot;);</span><br><span class="line">   &#125;);    </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">   background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;a&quot;&gt;d添加颜色&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;c&quot;&gt;极客教程&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;d&quot;&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;h&quot;&gt;https:geekes.cn&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;j&quot;&gt;jquery学习&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>$(“.className”)<br>根据 class 选择元素<br>class重复,则会选择多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;.d&quot;).addClass(&quot;red&quot;);</span><br><span class="line">   &#125;);    </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">   background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;a&quot;&gt;d添加颜色&lt;/button&gt;</span><br><span class="line">&lt;div class=&quot;c&quot;&gt;极客教程&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;d&quot;&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;h&quot;&gt;https:geekes.cn&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;j&quot;&gt;jquery学习&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p>$(“selector1 selector2”)<br>选择 selector1下的selector2元素,选择id=d的div下span元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;div#d span&quot;).addClass(&quot;red&quot;);</span><br><span class="line">   &#125;);    </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">   background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;a&quot;&gt;d添加颜色&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;c&quot;&gt;&lt;span&gt;极客教程&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;d&quot;&gt;&lt;span&gt;极客的学习教程&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;h&quot;&gt;&lt;span&gt;https:geekes.cn&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;j&quot;&gt;&lt;span&gt;jquery学习&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>$(selector:first) 满足选择器条件的第一个元素<br>$(selector:last) 满足选择器条件的最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;div:first&quot;).addClass(&quot;red&quot;);</span><br><span class="line">   &#125;);    </span><br><span class="line">   $(&quot;#b&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;div:last&quot;).addClass(&quot;red&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">   background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;a&quot;&gt;第一个添加颜色&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;b&quot;&gt;最后一个添加颜色&lt;/button&gt;</span><br><span class="line">&lt;div&gt;极客教程&lt;/div&gt;</span><br><span class="line">&lt;div&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;div&gt;https:geekes.cn&lt;/div&gt;</span><br><span class="line">&lt;div&gt;jquery学习&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="可见性选择器"><a href="#可见性选择器" class="headerlink" title="可见性选择器"></a>可见性选择器</h2><p>$(selector:hidden) 满足选择器条件的不可见的元素<br>$(selector:visible) 满足选择器条件的可见的元素<br>注:div:visible 和div :visible(有空格)是不同的意思<br>div:visible 表示选中可见的div<br>div :visible(有空格) 表示选中div下可见的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; &quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;div:visible&quot;).hide();</span><br><span class="line">   &#125;);</span><br><span class="line">   $(&quot;#b&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;div:hidden&quot;).show();     </span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;button id=&quot;a&quot;&gt;隐藏&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;b&quot;&gt;显示&lt;/button&gt;</span><br><span class="line">&lt;div&gt;极客教程&lt;/div&gt;</span><br><span class="line">&lt;div&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line">&lt;div&gt;https:geekes.cn&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>$(selector[attribute]) 满足选择器条件的有某属性的元素<br>$(selector[attribute=value]) 满足选择器条件的属性等于value的元素<br>$(selector[attribute!=value]) 满足选择器条件的属性不等于value的元素<br>$(selector[attribute^=value]) 满足选择器条件的属性以value开头的元素<br>$(selector[attribute$=value]) 满足选择器条件的属性以value结尾的元素<br>$(selector[attribute*=value]) 满足选择器条件的属性包含value的元素<br>注:一般不要使用[class=className] 而应该使用.className<br>因为使用$(“[class=’className’]”) .toggleClass(“anotherClassName”)<br>会导致class变成className anotherClassName, 使用 [class=className] 无法选中<br>而.className没有这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; </span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"> $(&quot;#a&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">  $(&quot;#b&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id!=&apos;red&apos;]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">   $(&quot;#c&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id!=&apos;red&apos;]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">    $(&quot;#d&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id^=&apos;r&apos;]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">     $(&quot;#e&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id$=&apos;d&apos;]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">      $(&quot;#f&quot;).click(function()&#123;</span><br><span class="line">   $(&quot;div[id*=&apos;ee&apos;]&quot;).toggleClass(&apos;border&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">   background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">.green&#123;</span><br><span class="line">   background-color:green;</span><br><span class="line">&#125;</span><br><span class="line">.border&#123;</span><br><span class="line">   border: 1px blue solid;   </span><br><span class="line">&#125;</span><br><span class="line">button&#123;</span><br><span class="line">   margin-top:10px;</span><br><span class="line">   display:block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">  margin:10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;button id=&quot;a&quot;&gt;id属性的div切换边框&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;b&quot;&gt;id=red的div切换边框&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;c&quot;&gt;id!=red属性的div切换边框&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;d&quot;&gt;id以r开头的div切换边框&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;e&quot;&gt;id以d结尾的div切换边框&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;f&quot;&gt;id包含ee的div切换边框&lt;/button&gt;               </span><br><span class="line">&lt;div id=&quot;red&quot;&gt;</span><br><span class="line">    id=red的div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;green&quot;&gt;</span><br><span class="line">  id=green的div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div &gt;</span><br><span class="line">   没有id的div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="奇偶选择器"><a href="#奇偶选择器" class="headerlink" title="奇偶选择器"></a>奇偶选择器</h2><p>$(selector:odd) 满足选择器条件的奇数元素<br>$(selector:even) 满足选择器条件的偶数元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;head&gt; </span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;   &lt;title&gt;&lt;/title&gt; </span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(function()&#123;  </span><br><span class="line">  $(&quot;#a&quot;).click(function()&#123;    </span><br><span class="line">   $(&quot;div:even&quot;).addClass(&quot;red&quot;); </span><br><span class="line">   &#125;);   </span><br><span class="line">  $(&quot;#b&quot;).click(function()&#123; </span><br><span class="line">      $(&quot;div:odd&quot;).addClass(&quot;green&quot;);  </span><br><span class="line">  &#125;);     </span><br><span class="line">  &#125;); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;style&gt; </span><br><span class="line">.red&#123;  </span><br><span class="line">  background-color:red;</span><br><span class="line"> &#125; </span><br><span class="line">.green&#123;  </span><br><span class="line">  background-color:green; </span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;button type=&quot;button&quot; id=&quot;a&quot;&gt;奇数添加颜色&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;b&quot;&gt;偶数添加颜色&lt;/button&gt;</span><br><span class="line"> &lt;div&gt;极客教程&lt;/div&gt; </span><br><span class="line">&lt;div&gt;极客的学习教程&lt;/div&gt;</span><br><span class="line"> &lt;div&gt;https:geekes.cn&lt;/div&gt; </span><br><span class="line">&lt;div&gt;jquery学习&lt;/div&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="表单对象"><a href="#表单对象" class="headerlink" title="表单对象"></a>表单对象</h2><p>表单对象选择器 指的是选中form下会出现的输入元素<br>:input 会选择所有的输入元素,不仅仅是input标签开始的那些,还包括textarea,select和button<br>:button 会选择type=button的input元素和button元素<br>:radio 会选择单选框<br>:checkbox会选择复选框<br>:text会选择文本框，但是不会选择文本域<br>:submit会选择提交按钮<br>:image会选择图片型提交按钮<br>:reset会选择重置按钮<br>$(“td[rowspan!=13] 后面有一个空格，表示层级选择器，如果没有就会出错<br>toggle(500) 表示在显示与隐藏之间来回切换，生效时间是500毫秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注: :submit会把&lt;button&gt;元素选中,&lt;button&gt;元素的type默认值是submit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;.b&quot;).click(function()&#123;</span><br><span class="line">      var value = $(this).val();</span><br><span class="line">      $(&quot;td[rowspan!=13] &quot;+value).toggle(500);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">table&#123;</span><br><span class="line">    border-collapse:collapse;</span><br><span class="line">        table-layout:fixed;</span><br><span class="line">    width:80%;</span><br><span class="line">&#125;</span><br><span class="line">table td&#123;</span><br><span class="line">    border-bottom: 1px solid #ddd;</span><br><span class="line">    padding-bottom: 5px;</span><br><span class="line">    padding-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div button&#123;</span><br><span class="line">    display:block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td rowspan=&quot;13&quot; valign=&quot;top&quot; width=&quot;150px&quot;&gt;</span><br><span class="line">            &lt;div &gt;</span><br><span class="line">                &lt;button value=&quot;:input&quot; class=&quot;b&quot;&gt;切换所有的:input&lt;/button&gt;</span><br><span class="line">                &lt;button value=&quot;:button&quot; class=&quot;b&quot;&gt;切换:button&lt;/button&gt;</span><br><span class="line">                &lt;button value=&quot;:radio&quot; class=&quot;b&quot;&gt;切换:radio&lt;/button&gt;     </span><br><span class="line">                &lt;button value=&quot;:checkbox&quot; class=&quot;b&quot;&gt;切换:checkbox&lt;/button&gt;       </span><br><span class="line">                &lt;button value=&quot;:text&quot; class=&quot;b&quot;&gt;切换:text&lt;/button&gt;       </span><br><span class="line">                &lt;button value=&quot;:password&quot; class=&quot;b&quot;&gt;切换:password&lt;/button&gt;       </span><br><span class="line">                &lt;button value=&quot;:file&quot; class=&quot;b&quot;&gt;切换:file&lt;/button&gt;       </span><br><span class="line">                &lt;button value=&quot;:submit&quot; class=&quot;b&quot;&gt;切换:submit&lt;/button&gt;       </span><br><span class="line">                &lt;button value=&quot;:image&quot; class=&quot;b&quot;&gt;切换:image&lt;/button&gt;     </span><br><span class="line">                &lt;button value=&quot;:reset&quot; class=&quot;b&quot;&gt;切换:reset&lt;/button&gt;         </span><br><span class="line">            &lt;/div&gt;           </span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td width=&quot;120px&quot;&gt;说明&lt;/td&gt;</span><br><span class="line">        &lt;td width=&quot;120px&quot;&gt;表单对象&lt;/td&gt;</span><br><span class="line">        &lt;td width=&quot;&quot;&gt;示例&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td &gt;input按钮&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:button&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;button&quot; value=&quot;input按钮&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;button按钮&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:button&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;button&gt;Button按钮&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;单选框&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:radio&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;radio&quot; &gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;复选框&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:checkbox&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;checkbox&quot;  &gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;文本框&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:text&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;text&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;文本域&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;密码框&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:password&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;password&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;下拉框&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;select&gt;&lt;option&gt;极客教程&lt;/option&gt;&lt;/select&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;文件上传&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:file&lt;/td&gt;</span><br><span class="line">  &lt;td&gt; &lt;input type=&quot;file&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;提交按钮&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:submit&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;submit&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;图片型提交按钮&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:image&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;image&quot; src=&quot;https://geekes.github.io/images/header.jpg&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;重置按钮&lt;/td&gt;</span><br><span class="line">  &lt;td &gt;:reset&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;&lt;input type=&quot;reset&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="表单对象属性"><a href="#表单对象属性" class="headerlink" title="表单对象属性"></a>表单对象属性</h2><p>:enabled会选择可用的输入元素 注:输入元素的默认状态都是可用<br>:disabled会选择不可用的输入元素<br>:checked会选择被选中的单选框和复选框 注: checked在部分浏览器上(火狐,chrome)也可以选中selected的option<br>:selected会选择被选中的option元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;.a&quot;).click(function()&#123;</span><br><span class="line">      var value = $(this).val();</span><br><span class="line">      $(&quot;td[rowspan!=13] &quot;+value).toggle(500);</span><br><span class="line">   &#125;);    </span><br><span class="line">   $(&quot;.b&quot;).click(function()&#123;</span><br><span class="line">      var value = $(this).val();</span><br><span class="line">      var options = $(&quot;td[rowspan!=13] &quot;+value);</span><br><span class="line">      alert(&quot;选中了&quot;+options.length+&quot;条记录！&quot;);</span><br><span class="line">   &#125;);       </span><br><span class="line">&#125;);     </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">table&#123;</span><br><span class="line">    border-collapse:collapse;</span><br><span class="line">        table-layout:fixed;</span><br><span class="line">    width:80%;</span><br><span class="line">&#125;</span><br><span class="line">table td&#123;</span><br><span class="line">    border-bottom: 1px solid #ddd;</span><br><span class="line">    padding-bottom: 5px;</span><br><span class="line">    padding-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line">div button&#123;</span><br><span class="line">    display:block;</span><br><span class="line">&#125;</span><br><span class="line">.border&#123;</span><br><span class="line">   border: 1px blue solid;   </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td rowspan=&quot;13&quot; valign=&quot;top&quot; width=&quot;120&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button value=&quot;:enabled&quot; class=&quot;a&quot;&gt;切换:enable&lt;/button&gt;</span><br><span class="line">    &lt;button value=&quot;:disable&quot; class=&quot;a&quot;&gt;切换:disable&lt;/button&gt;</span><br><span class="line">&lt;button value=&quot;:checked&quot; class=&quot;a&quot;&gt;切换:checked&lt;/button&gt;</span><br><span class="line">&lt;button value=&quot;:selected&quot; class=&quot;b&quot;&gt;:selected数量&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line"> &lt;td width=&quot;120&quot;&gt;说明&lt;/td&gt;</span><br><span class="line"> &lt;td width=&quot;120&quot;&gt;表单对象属性&lt;/td&gt;</span><br><span class="line"> &lt;td width=&quot;100px&quot;&gt;示例&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;enabled按钮&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;:enabled&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;&lt;input type=&quot;button&quot; enabled=&quot;enabled&quot; value=&quot;enabled按钮&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;disabled按钮&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;:disabled&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;&lt;input type=&quot;button&quot; disabled=&quot;disabled&quot; value=&quot;disabled按钮&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"> &lt;td&gt;选中复选框&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;:checked&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; checked=&quot;checked&quot; &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; &gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;选择下拉列表&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;:selected&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line"> &lt;select size=&quot;3&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line">   &lt;option selected=&quot;selected&quot;&gt;JAVA&lt;/option&gt;</span><br><span class="line">   &lt;option&gt;PHP&lt;/option&gt;</span><br><span class="line">    &lt;option selected=&quot;selected&quot;&gt;Android&lt;/option&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="当前元素"><a href="#当前元素" class="headerlink" title="当前元素"></a>当前元素</h2><p>监听函数中使用 $(this),则表示触发该事件的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;js/jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(this).hide();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;button type=&quot;button&quot;&gt;隐藏&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery选择器总结"><a href="#jQuery选择器总结" class="headerlink" title="jQuery选择器总结:"></a>jQuery选择器总结:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#id&quot;, &quot;.class&quot;)  复合选择器</span><br><span class="line">$(div p span)       层级选择器 //div下的p元素中的span元素</span><br><span class="line">$(div&gt;p)            父子选择器 //div下的所有p元素</span><br><span class="line">$(div+p)            相邻元素选择器 //div后面的p元素(仅一个p)</span><br><span class="line">$(div~p)            兄弟选择器  //div后面的所有p元素(同级别)</span><br><span class="line">$(.p:last)          类选择器 加 过滤选择器  第一个和最后一个（first 或者 last）</span><br><span class="line">$(&quot;[href$=&apos;.jpg&apos;]&quot;)  所有带有以 &quot;.jpg&quot; 结尾的属性值的 href 属性</span><br><span class="line">$(&quot;#mytable td:odd&quot;)    层级选择 加 过滤选择器 奇偶（odd 或者 even）</span><br><span class="line">$(&quot;div p:eq(2)&quot;)    索引选择器 div下的第三个p元素（索引是从0开始）</span><br><span class="line">$(&quot;a[href=&apos;www.geekes.cn&apos;]&quot;)  属性选择器</span><br><span class="line">$(&quot;p:contains(test)&quot;)        // 内容过滤选择器，包含text内容的p元素</span><br><span class="line">$(&quot;:emtyp&quot;)        //内容过滤选择器，所有空标签（不包含子标签和内容的标签）parent 相反</span><br><span class="line">$(&quot;:hidden&quot;)       //所有隐藏元素 visible </span><br><span class="line">$(&quot;input:enabled&quot;) //选取所有启用的表单元素</span><br><span class="line">$(&quot;:disabled&quot;)     //所有不可用的元素</span><br><span class="line">$(&quot;input:checked&quot;) //获取所有选中的复选框单选按钮等</span><br><span class="line">$(&quot;select option:selected&quot;) //获取选中的选项元素</span><br></pre></td></tr></table></figure><h1 id="JQuery效果"><a href="#JQuery效果" class="headerlink" title="JQuery效果"></a>JQuery效果</h1><h2 id="jQuery-hide-和show"><a href="#jQuery-hide-和show" class="headerlink" title="jQuery hide()和show()"></a>jQuery hide()和show()</h2><p>使用hide()和show()方法来隐藏和显示HTML元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#hide&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#show&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).show();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;点击隐藏/显示&lt;/div&gt;</span><br><span class="line">&lt;button  type=&quot;button&quot; id=&quot;hide&quot;&gt;隐藏&lt;/button&gt;</span><br><span class="line">&lt;button  type=&quot;button&quot; id=&quot;show&quot;&gt;显示&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).hide(speed,callback);<br>$(selector).show(speed,callback);<br>可选的speed 参数规定隐藏/显示的速度,可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是隐藏或显示完成后所执行的函数名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).hide(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).show(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;点击隐藏/显示&lt;/div&gt;</span><br><span class="line">&lt;div&gt;jquery 极客教程&lt;/div&gt;</span><br><span class="line">&lt;button&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>带有speed 参数的 hide() 方法,并使用回调函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;div&quot;).hide(1000,&quot;linear&quot;,function()&#123;</span><br><span class="line">      alert(&quot;hide()已完成!&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    background-color: #f2f2f2;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;点击隐藏&lt;/div&gt;</span><br><span class="line">&lt;div&gt;jquery 极客教程&lt;/div&gt;</span><br><span class="line">&lt;button&gt;隐藏&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以使用 toggle() 方法来切换 hide() 和 show() 方法<br>显示被隐藏的元素,并隐藏已显示的元素:<br>$(selector).toggle(speed,callback);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;div&quot;).toggle();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;点击隐藏/显示&lt;/div&gt;</span><br><span class="line">&lt;div&gt;jquery 极客教程&lt;/div&gt;</span><br><span class="line">&lt;button&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定隐藏/显示的速度,可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是 toggle() 方法完成后所执行的函数名称</p><h2 id="jQuery-Fading-方法"><a href="#jQuery-Fading-方法" class="headerlink" title="jQuery Fading 方法"></a>jQuery Fading 方法</h2><p>jQuery 拥有四种 fade 方法:</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><h2 id="jQuery-fadeIn-方法"><a href="#jQuery-fadeIn-方法" class="headerlink" title="jQuery fadeIn() 方法"></a>jQuery fadeIn() 方法</h2><p>jQuery fadeIn() 用于淡入已隐藏的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()</span><br><span class="line">  &#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#div1&quot;).fadeIn();</span><br><span class="line">    $(&quot;#div2&quot;).fadeIn(&quot;slow&quot;);</span><br><span class="line">    $(&quot;#div3&quot;).fadeIn(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#div1&#123;</span><br><span class="line">background-color:red;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">display: none;</span><br><span class="line">&#125;    </span><br><span class="line">#div2&#123;</span><br><span class="line">background-color:blue;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">display: none;</span><br><span class="line">&#125;    </span><br><span class="line">#div3&#123;</span><br><span class="line">background-color:green;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">display: none;</span><br><span class="line">&#125;    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;点击淡入&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).fadeIn(speed,callback);<br>可选的 speed 参数规定效果的时长,它可以取以下值:”slow”、”fast” 或毫秒。<br>可选的 callback 参数是 fading 完成后所执行的函数名称</p><h2 id="jQuery-fadeOut-方法"><a href="#jQuery-fadeOut-方法" class="headerlink" title="jQuery fadeOut() 方法"></a>jQuery fadeOut() 方法</h2><p>jQuery fadeOut() 方法用于淡出可见元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()</span><br><span class="line">  &#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#div1&quot;).fadeOut();</span><br><span class="line">    $(&quot;#div2&quot;).fadeOut(&quot;slow&quot;);</span><br><span class="line">    $(&quot;#div3&quot;).fadeOut(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#div1&#123;</span><br><span class="line">background-color:red;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div2&#123;</span><br><span class="line">background-color:blue;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div3&#123;</span><br><span class="line">background-color:green;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;点击淡出&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-fadeToggle-方法"><a href="#jQuery-fadeToggle-方法" class="headerlink" title="jQuery fadeToggle() 方法"></a>jQuery fadeToggle() 方法</h2><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换<br>如果元素已淡出,则 fadeToggle() 会向元素添加淡入效果<br>如果元素已淡入,则 fadeToggle() 会向元素添加淡出效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()</span><br><span class="line">  &#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#div1&quot;).fadeToggle();</span><br><span class="line">    $(&quot;#div2&quot;).fadeToggle(&quot;slow&quot;);</span><br><span class="line">    $(&quot;#div3&quot;).fadeToggle(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#div1&#123;</span><br><span class="line">background-color:red;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div2&#123;</span><br><span class="line">background-color:blue;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div3&#123;</span><br><span class="line">background-color:green;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;点击淡入或淡出&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).fadeToggle(speed,callback);<br>可选的 speed 参数规定效果的时长,它可以取以下值:”slow”、”fast” 或毫秒<br>可选的 callback 参数是 fading 完成后所执行的函数名称</p><h2 id="jQuery-fadeTo-方法"><a href="#jQuery-fadeTo-方法" class="headerlink" title="jQuery fadeTo() 方法"></a>jQuery fadeTo() 方法</h2><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()</span><br><span class="line">  &#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#div1&quot;).fadeTo(&quot;slow&quot;,0.25);</span><br><span class="line">    $(&quot;#div2&quot;).fadeTo(&quot;slow&quot;,0.5);</span><br><span class="line">    $(&quot;#div3&quot;).fadeTo(&quot;slow&quot;,0.75);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#div1&#123;</span><br><span class="line">background-color:red;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div2&#123;</span><br><span class="line">background-color:blue;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">#div3&#123;</span><br><span class="line">background-color:green;    </span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">&#125;    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;点击淡出&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).fadeTo(speed,opacity,callback);<br>必需的 speed 参数规定效果的时长,它可以取以下值：”slow”、”fast” 或毫秒<br>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度(值介于 0 与 1 之间)<br>可选的 callback 参数是该函数完成后所执行的函数名称</p><h1 id="jQuery-滑动方法"><a href="#jQuery-滑动方法" class="headerlink" title="jQuery 滑动方法"></a>jQuery 滑动方法</h1><p>可以在元素上创建滑动效果<br>jQuery 拥有以下滑动方法:</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><h2 id="jQuery-slideDown-方法"><a href="#jQuery-slideDown-方法" class="headerlink" title="jQuery slideDown() 方法"></a>jQuery slideDown() 方法</h2><p>jQuery slideDown() 方法用于向下滑动元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#up&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#down&quot;).slideDown(&quot;slow&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">#up</span><br><span class="line">&#123;</span><br><span class="line">    padding:5px;</span><br><span class="line">    text-align:center;</span><br><span class="line">    background-color:#f2f2f2;</span><br><span class="line">    border:solid 1px #c3c3c3;</span><br><span class="line">&#125;</span><br><span class="line">#down</span><br><span class="line">&#123;</span><br><span class="line">    background-color: #C3C3C3;</span><br><span class="line">    padding:50px;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;up&quot;&gt;滑动面板&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;down&quot;&gt;jquery&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).slideDown(speed,callback);<br>可选的 speed 参数规定效果的时长,它可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是滑动完成后所执行的函数名称</p><h2 id="jQuery-slideUp-方法"><a href="#jQuery-slideUp-方法" class="headerlink" title="jQuery slideUp() 方法"></a>jQuery slideUp() 方法</h2><p>jQuery slideUp() 方法用于向上滑动元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#up&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#down&quot;).slideUp(&quot;slow&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">#up</span><br><span class="line">&#123;</span><br><span class="line">    padding:5px;</span><br><span class="line">    text-align:center;</span><br><span class="line">    background-color:#f2f2f2;</span><br><span class="line">    border:solid 1px #c3c3c3;</span><br><span class="line">&#125;</span><br><span class="line">#down</span><br><span class="line">&#123;</span><br><span class="line">    background-color: #C3C3C3;</span><br><span class="line">    padding:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;up&quot;&gt;滑动面板&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;down&quot;&gt;jquery&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).slideUp(speed,callback);<br>可选的 speed 参数规定效果的时长,它可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是滑动完成后所执行的函数名称</p><h2 id="jQuery-slideToggle-方法"><a href="#jQuery-slideToggle-方法" class="headerlink" title="jQuery slideToggle() 方法"></a>jQuery slideToggle() 方法</h2><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换<br>如果元素向下滑动,则 slideToggle() 可向上滑动<br>如果元素向上滑动,则 slideToggle() 可向下滑动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#up&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#down&quot;).slideToggle(&quot;slow&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt; </span><br><span class="line">#up</span><br><span class="line">&#123;</span><br><span class="line">    padding:5px;</span><br><span class="line">    text-align:center;</span><br><span class="line">    background-color:#f2f2f2;</span><br><span class="line">    border:solid 1px #c3c3c3;</span><br><span class="line">&#125;</span><br><span class="line">#down</span><br><span class="line">&#123;</span><br><span class="line">    background-color: #C3C3C3;</span><br><span class="line">    padding:50px;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;up&quot;&gt;滑动面板&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;down&quot;&gt;jquery&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).slideToggle(speed,callback);<br>可选的 speed 参数规定效果的时长，可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是滑动完成后所执行的函数名称</p><h2 id="jQuery-动画-animate-方法"><a href="#jQuery-动画-animate-方法" class="headerlink" title="jQuery 动画 - animate() 方法"></a>jQuery 动画 - animate() 方法</h2><p>jQuery animate() 方法用于创建自定义动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).animate(&#123;left:&apos;150px&apos;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100px;</span><br><span class="line">    position:absolute;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;开始动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).animate({params},speed,callback);<br>必需的 params 参数定义形成动画的 CSS 属性<br>可选的 speed 参数规定效果的时长,可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是动画完成后所执行的函数名称<br>jQuery animate() - 操作多个属性<br>生成动画的过程中可同时使用多个属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).animate(&#123;</span><br><span class="line">        left:&apos;150px&apos;,</span><br><span class="line">        opacity:&apos;1&apos;,</span><br><span class="line">        height:&apos;150px&apos;,</span><br><span class="line">        width:&apos;150px&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100px;</span><br><span class="line">    position:absolute;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;开始动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>jQuery animate() - 使用相对值<br>也可以定义相对值(该值相对于元素的当前值),需要在值的前面加上 += 或 -=:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).animate(&#123;</span><br><span class="line">        left:&apos;150px&apos;,</span><br><span class="line">        height:&apos;+=150px&apos;,</span><br><span class="line">        width:&apos;+=150px&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100px;</span><br><span class="line">    position:absolute;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;开始动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>jQuery animate() - 使用预定义的值<br>可以把属性的动画值设置为 “show”、”hide” 或 “toggle”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).animate(&#123;</span><br><span class="line">      height:&apos;toggle&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100px;</span><br><span class="line">    position:absolute;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;开始动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>jQuery animate() - 使用队列功能<br>jQuery 提供针对动画的队列功能<br>运用 animate() 调用的”内部”队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    var div=$(&quot;div&quot;);</span><br><span class="line">    div.animate(&#123;height:&apos;300px&apos;,opacity:&apos;0.25&apos;&#125;,&quot;slow&quot;);</span><br><span class="line">    div.animate(&#123;width:&apos;300px&apos;,opacity:&apos;0.75&apos;&#125;,&quot;slow&quot;);</span><br><span class="line">    div.animate(&#123;height:&apos;100px&apos;,opacity:&apos;0.25&apos;&#125;,&quot;slow&quot;);</span><br><span class="line">    div.animate(&#123;width:&apos;100px&apos;,opacity:&apos;0.75&apos;&#125;,&quot;slow&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100px;</span><br><span class="line">    position:absolute;  </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;开始动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-stop-方法"><a href="#jQuery-stop-方法" class="headerlink" title="jQuery stop() 方法"></a>jQuery stop() 方法</h2><p>jQuery stop() 方法用于停止动画或效果<br>stop() 方法适用于所有jQuery效果函数,包括滑动、淡入淡出和自定义动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#up&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#down&quot;).slideDown(3000);</span><br><span class="line">  &#125;);</span><br><span class="line">   $(&quot;#stop&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#down&quot;).stop();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #up,#down&#123;</span><br><span class="line">    background:#f2f2f2;</span><br><span class="line">    padding: 5px;</span><br><span class="line"> text-align: center;</span><br><span class="line">  border: 1px #c2c2c2;</span><br><span class="line">    &#125;</span><br><span class="line">    #down&#123;</span><br><span class="line">padding: 150px;</span><br><span class="line">display: none;        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;stop&quot;&gt;停止动画&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;up&quot;&gt;滑动面板&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;down&quot;&gt;jquery&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>语法:<br>$(selector).stop(stopAll,goToEnd);<br>可选的stopAll参数规定是否应该清除动画队列,默认是false,即仅停止活动的动画,允许任何排入队列的动画向后执行<br>可选的goToEnd参数规定是否立即完成当前动画,默认是false<br>stop() 会清除在被选元素上指定的当前动画<br>把 css()、slideUp() 和 slideDown() 链接在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()</span><br><span class="line">  &#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).css(&quot;color&quot;,&quot;blue&quot;).slideUp(2000).slideDown(2000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;极客教程&lt;/p&gt;</span><br><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery-筛选器"><a href="#jQuery-筛选器" class="headerlink" title="jQuery 筛选器"></a>jQuery 筛选器</h1><h2 id="过滤选择器-1"><a href="#过滤选择器-1" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>has() 选择包含的元素<br>filter() 选择相同的元素<br>not() 选择不相同的元素<br>first() 第一个<br>last()  最后一个<br>eq(num) 取得num</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).first().css(&quot;background-color&quot;,&quot;red&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;#b2&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).last().css(&quot;background-color&quot;,&quot;blue&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;#b3&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).not(&quot;.filter&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">     $(&quot;#b4&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).has().css(&quot;background-color&quot;,&quot;green&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">      $(&quot;#b5&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).eq(4).css(&quot;background-color&quot;,&quot;purple&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">       $(&quot;#b6&quot;).click(function()&#123;</span><br><span class="line">        $(&quot;div&quot;).filter(&quot;.filter&quot;).css(&quot;background-color&quot;,&quot;black&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;b1&quot;&gt;第一个&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b2&quot;&gt;最后一个&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b3&quot;&gt;选择不相同的元素&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b4&quot;&gt;选择包含的元素&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b5&quot;&gt;取得num&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b6&quot;&gt;选择相同的元素&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第一天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;filter&quot;&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第二天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第三天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;filter&quot;&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第四天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第五天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;filter&quot;&gt;</span><br><span class="line">    &lt;span&gt;学习JQuery第六天&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM树遍历"><a href="#DOM树遍历" class="headerlink" title="DOM树遍历"></a>DOM树遍历</h2><p>parent() 父元素<br>parents() 祖先元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">  $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;#currentDiv&quot;).parent().toggleClass(&quot;b&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#b2&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;#currentDiv&quot;).parents().toggleClass(&quot;b&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;</span><br><span class="line">   padding:20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#grandParentDiv&#123;</span><br><span class="line"> background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#parentDiv&#123;</span><br><span class="line"> background-color:green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#currentDiv&#123;</span><br><span class="line"> background-color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.b&#123;</span><br><span class="line">   border: 2px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;b1&quot;&gt;改变parent()的边框&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b2&quot;&gt;改变parents()的边框&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;grandParentDiv&quot; &gt;</span><br><span class="line">  祖先元素</span><br><span class="line">  &lt;div id=&quot;parentDiv&quot;&gt;</span><br><span class="line">  父元素</span><br><span class="line">    &lt;div id=&quot;currentDiv&quot;&gt;当前元素&lt;/div&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>children() 子元素<br>find() 后代元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">  $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;#currentDiv&quot;).children().toggleClass(&quot;b&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#b2&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;#currentDiv&quot;).find(&quot;div&quot;).toggleClass(&quot;b&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">   </span><br><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;</span><br><span class="line">   padding:20px;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">div.grandChildrenDiv&#123;</span><br><span class="line"> background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">div.childrenDiv&#123;</span><br><span class="line"> background-color:green;</span><br><span class="line"> margin:10px;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">div#currentDiv&#123;</span><br><span class="line"> background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">.b&#123;</span><br><span class="line">   border: 2px solid black;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;button id=&quot;b1&quot;&gt;改变children()的边框&lt;/button&gt;</span><br><span class="line">   </span><br><span class="line">&lt;button id=&quot;b2&quot;&gt;改变find()的边框&lt;/button&gt;</span><br><span class="line">   </span><br><span class="line">&lt;div id=&quot;currentDiv&quot; &gt;</span><br><span class="line">  当前元素</span><br><span class="line">  &lt;div class=&quot;childrenDiv&quot;&gt;</span><br><span class="line">  儿子元素1</span><br><span class="line">    &lt;div class=&quot;grandChildrenDiv&quot;&gt;后代元素n&lt;/div&gt; </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;childrenDiv&quot;&gt;</span><br><span class="line">  儿子元素2</span><br><span class="line">    &lt;div class=&quot;grandChildrenDiv&quot;&gt;后代元素n&lt;/div&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>siblings() 同胞元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">  $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">     $(&quot;#currentDiv&quot;).siblings().toggleClass(&quot;b&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;</span><br><span class="line">   padding:20px;</span><br><span class="line">   background-color:pink;</span><br><span class="line">   margin:10px;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">#parentDiv&#123;</span><br><span class="line"> background-color:green;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">#currentDiv&#123;</span><br><span class="line"> background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">.b&#123;</span><br><span class="line">   border: 2px solid black;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;   </span><br><span class="line">&lt;button id=&quot;b1&quot;&gt;同级加上边框&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">&lt;div id=&quot;parentDiv&quot; &gt;</span><br><span class="line">  父元素</span><br><span class="line">  &lt;div id=&quot;currentDiv&quot;&gt;</span><br><span class="line">    当前元素</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    同级元素</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    同级元素</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery-常用方法"><a href="#jQuery-常用方法" class="headerlink" title="jQuery 常用方法"></a>jQuery 常用方法</h1><p>.html() 取出或设置html内容<br>.text() 取出或设置text内容<br>.attr() 取出或设置某个属性的值<br>.val() 取出某个表单元素的值</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">   $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">      alert($(&quot;#input1&quot;).val());</span><br><span class="line">   &#125;);</span><br><span class="line">     $(&quot;#b2&quot;).click(function()&#123;</span><br><span class="line">      alert($(&quot;#d1&quot;).html());</span><br><span class="line">   &#125;);</span><br><span class="line">    $(&quot;#b3&quot;).click(function()&#123;</span><br><span class="line">      alert($(&quot;#d1&quot;).text());</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;b1&quot;&gt;取值&lt;/button&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;input1&quot; value=&quot;默认值&quot;&gt;</span><br><span class="line">&lt;button id=&quot;b2&quot;&gt;获取元素的内容&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;b3&quot;&gt;获取元素的文本内容&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;d1&quot;&gt;</span><br><span class="line">极客教程</span><br><span class="line">&lt;span&gt;</span><br><span class="line">学习JQuery</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#test1&quot;).text(&quot;Hello world!&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#test2&quot;).html(&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#test3&quot;).val(&quot;JQuery&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#test4&quot;).attr(&#123;</span><br><span class="line">      &quot;title&quot;:&quot;jquery教程&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      title = $(&quot;#test4&quot;).attr(&apos;title&apos;);</span><br><span class="line">      $(&quot;#test4&quot;).html(title);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;test1&quot;&gt;第一个段落&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;test2&quot;&gt;另外一个段落&lt;/p&gt;</span><br><span class="line">&lt;p&gt;输入框: &lt;input type=&quot;text&quot; id=&quot;test3&quot; value=&quot;极客教程&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;#&quot; id=&quot;test4&quot;&gt;极客教程&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;btn1&quot;&gt;设置文本&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btn2&quot;&gt;设置 HTML&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btn3&quot;&gt;设置值&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btn4&quot;&gt;设置attr&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery-属性"><a href="#jQuery-属性" class="headerlink" title="jQuery 属性"></a>jQuery 属性</h1><h1 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h1><p>.blur() 表单元素失去焦点。<br>.change() 表单元素的值发生变化<br>.click() 鼠标单击<br>.dblclick() 鼠标双击<br>.focus() 表单元素获得焦点<br>.focusin() 子元素获得焦点<br>.focusout() 子元素失去焦点<br>.hover() 同时为mouseenter和mouseleave事件指定处理函数<br>.keydown() 按下键盘（长时间按键，只返回一个事件）<br>.keypress() 按下键盘（长时间按键，将返回多个事件）<br>.keyup() 松开键盘<br>.load() 元素加载完毕<br>.mousedown() 按下鼠标<br>.mouseenter() 鼠标进入（进入子元素不触发）<br>.mouseleave() 鼠标离开（离开子元素不触发）<br>.mousemove() 鼠标在元素内部移动<br>.mouseout() 鼠标离开（离开子元素也触发）<br>.mouseover() 鼠标进入（进入子元素也触发）<br>.mouseup() 松开鼠标<br>.ready() DOM加载完成<br>.resize() 浏览器窗口的大小发生改变<br>.scroll() 滚动条的位置发生变化<br>.select() 用户选中文本框中的内容<br>.submit() 用户递交表单<br>.toggle() 根据鼠标点击的次数，依次运行多个函数<br>.unload() 用户离开页面</p><h1 id="JQuery-数组"><a href="#JQuery-数组" class="headerlink" title="JQuery 数组"></a>JQuery 数组</h1><p>$.each()  遍历<br>$.trim() 去除字符串两端的空格<br>$.inArray() 是否存在$.inArray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">console.log($.trim(&apos;    学习jQuery   &apos;));</span><br><span class="line">   // 遍历数组</span><br><span class="line">$.each([ &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos; ], function(idx, val) &#123;</span><br><span class="line">    console.log(&apos;element &apos; + idx + &apos;is &apos; + val);</span><br><span class="line">&#125;);</span><br><span class="line">   //遍历对象</span><br><span class="line">$.each(&#123; foo : &apos;bar&apos;, baz : &apos;bim&apos; &#125;, function(k, v) &#123;</span><br><span class="line">    console.log(k + &apos; : &apos; + v);</span><br><span class="line">&#125;);</span><br><span class="line">//返回值在数组中的索引,如果值不在数组中,则返回-1</span><br><span class="line">var myArray = [ 1, 2, 3, 5 ];</span><br><span class="line">if ($.inArray(3, myArray) !== -1) &#123;</span><br><span class="line">  console.log(&apos;found it!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h1><p>jQuery提供了Ajax支持，可以消除痛苦的浏览器差异。它提供了一个全功能的$.ajax()方法，简单方便的方法，例如$.get()，$.getScript()，$.getJSON()，$.post()，和$().load()<br>尽管名称为”Ajax”，但大多数jQuery应用程序实际上并不使用XML; 相反，它们以纯HTML或JSON（JavaScript Object Notation）的形式传输数据<br>通常，Ajax不能跨域工作。例外是提供JSONP（带有填充的JSON）支持的服务，它允许有限的跨域功能<br>正确使用与Ajax相关的jQuery方法需要首先理解一些关键概念。</p><h2 id="GET-vs-Post"><a href="#GET-vs-Post" class="headerlink" title="GET vs. Post"></a>GET vs. Post</h2><p>用于向服务器发送请求的两种最常见的“方法”是GET和POST<br>GET方法应该用于非破坏性操作 - 即，您只是从服务器“获取”数据而不是更改服务器上的数据的操作。例如，对搜索服务的查询可能是GET请求。浏览器可能会缓存GET请求，如果您不期望它，可能会导致不可预测的行为。GET请求通常在查询字符串中发送所有数据<br>POST方法应该用于破坏性操作 - 即，您在服务器上更改数据的操作。例如，保存博客帖子的用户应该是POST请求。POST请求通常不会被浏览器缓存; 查询字符串可以是URL的一部分，但数据往往作为发布数据单独发送</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>jQuery通常需要一些关于您希望从Ajax请求中获取的数据类型的指令; 在某些情况下，数据类型由方法名称指定，在其他情况下，它作为配置对象的一部分提供。有几种选择：</p><ul><li>text   用于运输简单的文本</li><li>HTML   用于传输要放置在页面上的HTML块</li><li>script 用于向页面添加新脚本</li><li>JSON   用于传输JSON格式的数据，包括字符串，数组和对象</li><li>JSONP  用于从另一个域传输JSON数据</li><li>XML    用于在自定义XML架构中传输数据<br>在大多数情况下，我强烈支持使用JSON格式，因为它提供了最大的灵活性。它对于同时发送HTML和数据特别有用<br>Ajax的异步性让很多新的jQuery用户措手不及。由于Ajax调用默认是异步的，因此响应不会立即可用。只能使用回调来处理响应。因此，以下代码将不起作用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var response;</span><br><span class="line">$.get(&apos;foo.php&apos;, function(r) &#123; response = r; &#125;);</span><br><span class="line">console.log(response); // undefined!</span><br></pre></td></tr></table></figure></li></ul><p>相反，需要将回调函数传递给请求; 当请求成功时，此回调将运行，此时可以访问它返回的数据（如果有）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(&apos;foo.php&apos;, function(response) &#123; console.log(response); &#125;);</span><br></pre></td></tr></table></figure><p>##同源策略和JSONP<br>Ajax请求仅限于与发出请求的页面相同的协议（http或https），相同的端口和相同的域,此限制不适用于通过jQuery的Ajax方法加载的脚本<br>另一个例外是针对另一个域上的JSONP服务的请求。在JSONP的情况下，服务提供者同意使用可以使用script标记加载到页面中的脚本来响应您的请求，从而避免同源限制; 该脚本将包含您请求的数据，包含在您提供的回调函数中</p><h2 id="Ajax和Firebug"><a href="#Ajax和Firebug" class="headerlink" title="Ajax和Firebug"></a>Ajax和Firebug</h2><p>Firebug（或Chrome或Safari中的Webkit Inspector）是处理Ajax请求的宝贵工具,可以在Firebug的Console选项卡中（以及在Webkit Inspector的Resources&gt; XHR面板中）看到Ajax请求，并且您可以单击请求以展开它并查看详细信息，例如请求标头，响应标头，响应内容等等。如果Ajax请求没有达到预期的效果，那么这是第一个寻找错误信息的地方<br>jQuery的核心$.ajax方法是一种创建Ajax请求的强大而直接的方法,它需要一个配置对象，其中包含jQuery完成请求所需的所有指令,该$.ajax方法特别有价值，因为它提供了指定成功和失败回调的能力。它能够获取可以单独定义的配置对象，这使得编写可重用代码变得更加容易</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    //  //请求的URL</span><br><span class="line">    url : &apos;post.php&apos;,</span><br><span class="line">    // 要发送的数据</span><br><span class="line">    //将被转换为查询字符串</span><br><span class="line">    data : &#123; id : 123 &#125;,</span><br><span class="line">    // //这是POST还是GET请求</span><br><span class="line">    type : &apos;GET&apos;,</span><br><span class="line">    // 数据类型</span><br><span class="line">    dataType : &apos;json&apos;,</span><br><span class="line">    // 请求成功时运行的代码</span><br><span class="line">    // 响应传递给函数</span><br><span class="line">    success : function(json) &#123;</span><br><span class="line">        $(&apos;&lt;h1/&gt;&apos;).text(json.title).appendTo(&apos;body&apos;);</span><br><span class="line">        $(&apos;&lt;div class=&quot;content&quot;/&gt;&apos;)</span><br><span class="line">            .html(json.html).appendTo(&apos;body&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求失败时运行的代码</span><br><span class="line">    // 原始请求和状态代码</span><br><span class="line">    // 传递给函数</span><br><span class="line">    error : function(xhr, status) &#123;</span><br><span class="line">        alert(&apos;Sorry, there was a problem!&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    //无论成功与否，都要运行的代码</span><br><span class="line">    complete : function(xhr, status) &#123;</span><br><span class="line">        alert(&apos;The request is complete!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意<br>关于dataType设置的说明：如果服务器发回的格式与您指定的格式不同，则代码可能会失败，原因并不总是很清楚，因为HTTP响应代码不会显示错误。处理Ajax请求时，请确保您的服务器正在发回您要求的数据类型，并验证Content-type标头对于数据类型是否准确。例如，对于JSON数据，Content-type标头应该是application/json</p></blockquote><h2 id="ajax-选项"><a href="#ajax-选项" class="headerlink" title="$.ajax 选项"></a>$.ajax 选项</h2><p>$ .ajax方法有很多很多选项，这以下是经常使用的几个：</p><ul><li>async<br>设置为false是否应同步发送请求。默认为true。请注意，如果将此选项设置为false，则在收到响应之前，您的请求将阻止执行其他代码</li><li>cache<br>是否使用缓存响应（如果可用）,默认true为除“script”和“jsonp”之外的所有dataTypes。设置为false时，URL将只附加一个cachebusting参数</li><li>complete<br>无论成功与否，请求完成时运行的回调函数。该函数接收原始请求对象和请求的文本状态</li><li>context<br>回调函数应该运行的范围（即this回调函数内部意味着什么）,默认情况下，this回调函数内部引用最初传递给的对象$.ajax</li><li>data<br>要发送到服务器的数据。这可以是对象或查询字符串，例如foo=bar&amp;baz=bim</li><li>dataType<br>您希望从服务器返回的数据类型。默认情况下，如果未指定dataType，jQuery将查看响应的MIME类型</li><li>error<br>如果请求导致错误，则运行回调函数。该函数接收原始请求对象和请求的文本状态</li><li>jsonp<br>在发出JSONP请求时要在查询字符串中发送的回调名称。默认为“回调”</li><li>success<br>如果请求成功则运行的回调函数。该函数接收响应数据（如果dataType为JSON，则转换为JavaScript对象），以及请求和原始请求对象的文本状态</li><li>timeout<br>在考虑请求失败之前等待的时间（以毫秒为单位）</li><li>type<br>请求的类型，“POST”或“GET”。默认为“GET”。可以使用其他请求类型，例如“PUT”和“DELETE”，但并非所有浏览器都支持</li><li>url<br>请求的URL<br>该url选项是$.ajax配置对象唯一必需的属性; 所有其他属性都是可选的<br>便利方法<br>如果不需要广泛的可配置性$.ajax，并且不关心处理错误，那么jQuery提供的Ajax便利功能可能非常有用，可以简化实现Ajax请求的方法。这些方法只是核心$.ajax方法的“包装” ，只是预先设置了$.ajax方法的一些选项<h2 id="jQuery提供的便捷方法是："><a href="#jQuery提供的便捷方法是：" class="headerlink" title="jQuery提供的便捷方法是："></a>jQuery提供的便捷方法是：</h2></li><li>$.get<br>对提供的URL执行GET请求</li><li>$.post<br>对提供的URL执行POST请求</li><li>$ .getScript<br>向页面添加脚本</li><li>$ .getJSON<br>执行GET请求，并期望返回JSON<br>在每种情况下，方法按顺序采用以下参数：</li><li>url<br>请求的URL</li><li>data<br>要发送到服务器的数据。可选的。这可以是对象或查询字符串，例如foo=bar&amp;baz=bim<br>注意<br>此选项无效$.getScript</li><li>success callback<br>如果请求成功则运行的回调函数。可选的。该函数接收响应数据（如果数据类型为JSON，则转换为JavaScript对象），以及请求和原始请求对象的文本状态</li><li>data type<br>您希望从服务器返回的数据类型,可选的<br>注意<br>此选项仅适用于尚未在其名称中指定数据类型的方法<br>使用jQuery的Ajax便捷方法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 获取text或HTML</span><br><span class="line">$.get(&apos;/users.php&apos;, &#123; userId : 1234 &#125;, function(resp) &#123;</span><br><span class="line">    console.log(resp);</span><br><span class="line">&#125;);</span><br><span class="line">//向页面添加脚本，然后运行其中定义的函数</span><br><span class="line">$.getScript(&apos;/static/js/myScript.js&apos;, function() &#123;</span><br><span class="line">    functionFromMyScript();</span><br><span class="line">&#125;);</span><br><span class="line">//从服务器获取JSON格式的数据</span><br><span class="line">$.getJSON(&apos;/details.php&apos;, function(resp) &#123;</span><br><span class="line">    $.each(resp, function(k, v) &#123;</span><br><span class="line">        console.log(k + &apos; : &apos; + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>该$.fn.load方法在jQuery的Ajax方法中是独一无二的，因为它在选择时被调用,该$.fn.load方法从URL获取HTML，并使用返回的HTML填充所选元素。除了为方法提供URL之外，您还可以选择提供选择器; jQuery将仅从返回的HTML中获取匹配的内容<br>$.fn.load<br>该$.fn.load方法在jQuery的Ajax方法中是独一无二的，因为它在选择时被调用,该$.fn.load方法从URL获取HTML，并使用返回的HTML填充所选元素,除了为方法提供URL之外，还可以选择提供选择器; jQuery将仅从返回的HTML中获取匹配的内容<br>使用$ .fn.load填充元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#newContent&apos;).load(&apos;/foo.html&apos;);</span><br></pre></td></tr></table></figure><p>使用$ .fn.load基于选择器填充元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#newContent&apos;).load(&apos;/foo.html #myDiv h1:first&apos;, function(html) &#123;</span><br><span class="line">  alert(&apos;Content updated!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Ajax和Forms"><a href="#Ajax和Forms" class="headerlink" title="Ajax和Forms"></a>Ajax和Forms</h2><p>jQuery Form Plugin允许您轻松且不引人注意地升级HTML表单以使用 AJAX。主要方法， ajaxForm并ajaxSubmit从表单元素收集信息，以确定如何管理提交过程,这两种方法都支持多种选项，使您可以完全控制数据的提交方式, 使用AJAX提交表单并不比这更容易<br>在页面中添加表单。只是一个普通的表格，不需要特殊的标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;myForm&quot; action=&quot;comment.php&quot; method=&quot;post&quot;&gt; </span><br><span class="line">    Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt; </span><br><span class="line">    Comment: &lt;textarea name=&quot;comment&quot;&gt;&lt;/textarea&gt; </span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit Comment&quot; /&gt; </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>包括jQuery和Form Plugin外部脚本文件以及在DOM准备好时初始化表单的简短脚本：</p><h1 id="编写jQuery插件"><a href="#编写jQuery插件" class="headerlink" title="编写jQuery插件"></a>编写jQuery插件</h1><p>编写jQuery插件的一些要求<br>1.在jQuery名称空间中仅声明一个名称<br>2.接受一个选项参数来控制插件的行为<br>3.提供对默认插件设置的公共访问权限<br>4.提供对次要功能的公共访问（如果适用）<br>5.保持私有功能私有<br>6.支持元数据插件</p>]]></content>
      
      
      <categories>
          
          <category> Jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vue-cli axios配置跨域代理访问数据</title>
      <link href="/2019/09/18/%E4%BD%BF%E7%94%A8vue-cli-axios%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/09/18/%E4%BD%BF%E7%94%A8vue-cli-axios%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML入门指南</title>
      <link href="/2019/09/17/HTML%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/09/17/HTML%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML (HyperText Markup Language) 不是一门编程语言,而是一种用来告知浏览器如何组织页面的标记语言,主要构成网页组成的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>声明文档类型,规定了HTML页面必须遵从的良好规则,能自动检测错误和其他有用的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个元素设置文档使用utf-8字符集编码,utf-8字符集包含了人类大部分的文字。基本上他能识别你放上去的所有文本内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这个元素包裹了整个完整的页面,是一个根元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>这个元素是一个容器,它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述,CSS样式，字符集声明等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>设置页面标题，出现在浏览器标签上,当你标记/收藏页面时它可用来描述页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>包含了你访问页面时所有显示在页面上的内容,文本,图片,音频等等</p><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><p>标签可以拥有多个属性;属性之间不分先后顺序;省略该属性则取默认值</p><h1 id="标题标签头"><a href="#标题标签头" class="headerlink" title="标题标签头"></a>标题标签头</h1><p>[区标题，文档标题，网页名称]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML提供了6个等级的标题,即&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;</span><br></pre></td></tr></table></figure><p>[标题标签语义：作为标题使用，并且依据重要性递减]</p><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p> 默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;文本内容&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">存放每个页面独有的内容,每个页面上只能用一次&lt;main&gt;,且直接位于&lt;body&gt;中,最好不要把它嵌套进其它元素</span><br><span class="line">&lt;article&gt;</span><br><span class="line">包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）</span><br><span class="line">&lt;section&gt;</span><br><span class="line">与&lt;article&gt; 类似，但 &lt;section&gt; 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 标题 作为开头；也可以把一篇 &lt;article&gt; 分成若干部分并分别置于不同的 &lt;section&gt; 中，也可以把一个区段 &lt;section&gt;分成若干部分并分别置于不同的 &lt;article&gt; 中，取决于上下文</span><br><span class="line">&lt;aside&gt;</span><br><span class="line">包含一些间接信息（术语条目、作者简介、相关链接等等）</span><br><span class="line">&lt;header&gt;</span><br><span class="line">是简介形式的内容。如果它是 &lt;body&gt; 的子元素，那么就是网站的全局页眉。如果它是&lt;article&gt;或&lt;section&gt; 的子元素，那么它是这些部分特有的页眉（此&lt;header&gt; 非彼标题）</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">包含页面主导航功能。其中不应包含二级链接等内容</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">包含了页面的页脚部分</span><br></pre></td></tr></table></figure><h1 id="frameset"><a href="#frameset" class="headerlink" title="frameset"></a>frameset</h1><p>框架的集合标签<br>属性有：<br>rows：按照上下排列框架内容<br>cols：按照左右排列框架内容<br>取值可以是像素px，可以是百分比,还可以是*<br>frameset和body只能出现一个<br>frame：表示框架集合中的框架<br>属性有:<br>noresize:它是一个内置属性,其本身就是一个值,当写上之后表示不能重置大小<br>scrolling:是否使用滚动条。默认是auto<br>frameset可以嵌套使用</p><h1 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h1><p>  横跨网页水平线的标签。<br>  水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。<br>  这些水平线可以通过插入图片实现，也可以简单地通过标签来完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr/&gt;单标签</span><br></pre></td></tr></table></figure><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><p>  一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行<br>  如果希望某段文本强制换行显示，就需要使用换行标签。<br>  【和段落标签的区别：段落标签在网页显示的时候两个段落之间的间隔比较大，要调节的话要用CSS调节，换行标签的两个内容是紧挨着的】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;单标签</span><br></pre></td></tr></table></figure><h1 id="div-span标签"><a href="#div-span标签" class="headerlink" title="div span标签"></a>div span标签</h1><p>  是没有语义的区别：div会独占一行，而span不会独占一行<br>iv是一个容器级的标签，而span是一个文本级的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;这是头部&lt;div&gt; [类似回车]</span><br><span class="line">&lt;span&gt;今日价格&lt;span&gt; [类似空格]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt;</span><br></pre></td></tr></table></figure><p>表示块引用,并且在cite属性里用URL来指向引用的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;q&gt;</span><br></pre></td></tr></table></figure><p>表示行内引用,并且在cite属性里用URL来指向引用的资源<br>cite<br>属性内容不会被浏览器显示、屏幕阅读器阅读,需使用JavaScript或CSS,浏览器才会显示cite的内容,如果你想要确保引用的来源在页面上是可显示的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;abbr&gt;</span><br></pre></td></tr></table></figure><p>常被用来包裹一个缩略语或缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;address&gt;</span><br></pre></td></tr></table></figure><p>用于标记联系方式的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sup&gt;、&lt;sub&gt;</span><br></pre></td></tr></table></figure><p>元素可表示上标和下标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;</span><br></pre></td></tr></table></figure><p>用于标记计算机通用代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对保留的空格（通常是代码块）——如果您在文本中使用缩进或多余的空白，浏览器将忽略它，您将不会在呈现的页面上看到它,但是，如果您将文本包含在&lt;pre&gt;&lt;/pre&gt;,标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;var&gt;</span><br><span class="line">用于标记具体变量名</span><br><span class="line">&lt;kbd&gt;</span><br><span class="line">用于标记输入电脑的键盘（或其他类型）输入</span><br><span class="line">&lt;samp&gt;</span><br><span class="line">用于标记计算机程序的输出</span><br></pre></td></tr></table></figure><h1 id="文本格式标签-b、i、s、u"><a href="#文本格式标签-b、i、s、u" class="headerlink" title="文本格式标签:b、i、s、u"></a>文本格式标签:b、i、s、u</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;加粗&lt;/b&gt;、&lt;i&gt;倾斜&lt;/i&gt;、&lt;s&gt;删除线&lt;/s&gt;、&lt;u&gt;下划线&lt;/u&gt;只有使用,没有强调的意思,strong、em、del、ins 语义更强烈</span><br></pre></td></tr></table></figure><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（空格＆nbsp、大于号＆gt、小于号＆lt、冒号&amp;quot、单引号&amp;apos、&amp; &amp;amp</span><br><span class="line">、版权号&amp;copy、</span><br><span class="line">商标&amp;trade、 注释标签&lt;！ -   - &gt;</span><br></pre></td></tr></table></figure><p>src路径、alt图像不能显示时的替换文本、title鼠标悬停时的内容、width/height宽高、border边框宽度</p><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href target&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="href-地址"><a href="#href-地址" class="headerlink" title="href=地址"></a>href=地址</h1><p>用于指定链接目标的url地址,当为标签应用href属性时,就有了超链接的功能</p><p> #空链接,外部链接,内部链接,链接网页中的各种元素</p><h1 id="target-页面打开方式-self和-blank"><a href="#target-页面打开方式-self和-blank" class="headerlink" title="target=页面打开方式_self和_blank"></a>target=页面打开方式_self和_blank</h1><p> 用于指定链接页面的打开方式,其取值有_self和_blank两种,其中_self为默认值，_blank为在新窗口中打开方式</p><h1 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h1><p>  步骤1：使用<a href="#id">链接文本</a><br>  步骤2：使用相应id名标注要跳转的目标</p><h1 id="base标签：可以设置整体链接的打开状态"><a href="#base标签：可以设置整体链接的打开状态" class="headerlink" title="base标签：可以设置整体链接的打开状态"></a>base标签：可以设置整体链接的打开状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base target=&apos;_blank&apos;&gt;把所有链接都设置成在新窗口中打开</span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h1 id="列表-ul、ol"><a href="#列表-ul、ol" class="headerlink" title="列表 ul、ol"></a>列表 ul、ol</h1><h1 id="无序列表-ul-gt-li"><a href="#无序列表-ul-gt-li" class="headerlink" title="无序列表 ul&gt;li"></a>无序列表 ul&gt;li</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的,可以在&lt;li&gt;&lt;/li&gt;标签中输入其他标签</span><br><span class="line">&lt;li&gt;&lt;/ li&gt;之间相当于一个容器，可以容纳所有元素 </span><br><span class="line">无序列表会带有自己样式属性</span><br></pre></td></tr></table></figure><h1 id="有序列表-ol-gt-li"><a href="#有序列表-ol-gt-li" class="headerlink" title="有序列表 ol&gt;li"></a>有序列表 ol&gt;li</h1><p>  有序列表会自动生成序号。</p><h1 id="自定义列表dl-gt-dt行-gt-dd单元格-列"><a href="#自定义列表dl-gt-dt行-gt-dd单元格-列" class="headerlink" title="自定义列表dl&gt;dt行&gt;dd单元格/列"></a>自定义列表dl&gt;dt行&gt;dd单元格/列</h1><p>  自定义列表常用于对术语或名词进行解释和描述，列表项前没有任何项目符号</p><h1 id="表格table-gt-tr行-gt-td单元格-列"><a href="#表格table-gt-tr行-gt-td单元格-列" class="headerlink" title="表格table&gt;tr行&gt;td单元格/列"></a>表格table&gt;tr行&gt;td单元格/列</h1><pre><code>&lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;标签,可以容纳所有的元素</code></pre><h1 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h1><p>  border cellspadding cellspacing三参为0<br>  (不带单位，默认像素)<br>  border(边框)、<br>  cellspacing(单元格与边框之间)、<br>  cellspading(单元格内容与边框之间)、<br>  width(宽)、height(高)、<br>  align(水平对齐方式)(一般默认left)<br>  align放在table(表格在页面居中)、tr(本行所有单元格内容居中)、td(本行内容居中)有不同效果；一般不写在html,会用css来调整样式。</p><h1 id="表头标签th：文本加粗、居中"><a href="#表头标签th：文本加粗、居中" class="headerlink" title="表头标签th：文本加粗、居中"></a>表头标签th：文本加粗、居中</h1><p>  用表头标签<th></th>替代相应的单元格标签<td></td>即可</p><h1 id="表格标题：caption"><a href="#表格标题：caption" class="headerlink" title="表格标题：caption"></a>表格标题：caption</h1><p>  必须紧随 table 标签之后<br>  只存在表格里面<br>  只能对每个表格定义一个标题<br>  通常这个标题会被居中于表格之上</p><h1 id="表格结构thead、tbody"><a href="#表格结构thead、tbody" class="headerlink" title="表格结构thead、tbody"></a>表格结构thead、tbody</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部</span><br><span class="line">必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息</span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体</span><br><span class="line">位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容</span><br></pre></td></tr></table></figure><h1 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td rowspan=&apos;3&apos;/colspan=&apos;4&apos;&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>公式：删除的个数 = 合并的个数 - 1</p><h1 id="跨行合并-rowspan"><a href="#跨行合并-rowspan" class="headerlink" title="跨行合并 rowspan"></a>跨行合并 rowspan</h1><h1 id="跨列合并-colspan"><a href="#跨列合并-colspan" class="headerlink" title="跨列合并 colspan"></a>跨列合并 colspan</h1><h1 id="合并的顺序：先上后下，先左后右"><a href="#合并的顺序：先上后下，先左后右" class="headerlink" title="合并的顺序：先上后下，先左后右"></a>合并的顺序：先上后下，先左后右</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先确定是跨行还是跨列合并？</span><br><span class="line">根据先上后下，先左后右的原则找到目标单元格；</span><br><span class="line">删除单元格；</span><br></pre></td></tr></table></figure><h1 id="表单标签-控件"><a href="#表单标签-控件" class="headerlink" title="表单标签/控件"></a>表单标签/控件</h1><p>表单目的是为了收集用户信息<br>在HTML中，一个完整的表单通常由表单控件（也称表单元素）、提示信息和表单域3个部分构成<br>表单控件：​包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等<br>提示信息：​一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作<br>表单域：​他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法<br>如果不定义表单域，表单中的数据就无法传送到后台服务器</p><h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><p>   type属性：指定不同控件的类型<br>   text：单行文本输入框<br>   password：密码输入框<br>   radio：单选按钮；如果是一组，则一定要命名相同的name<br>   checkbox：复选框；有无相同的name不影响选择<br>   button：普通按钮<br>   reset：重置按钮<br>   submit：提交按钮<br>   image：图像形式的提交按钮<br>   file：文件域，选择文件上传<br>name 控件的名称、value 控件的默认文本值<br>size:正整数，控件在页面中的显示宽度、maxlength:正整数，允许输入的最多字符数<br>checked：定义控件默认被选中的项<br>label标签：获得焦点(有for属性)<br>作用：用于绑定表单元素,当点击label标签时,被绑定的表单元素就会获得输入焦点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;用户名：&lt;input type=&apos;text&apos;&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>点击用户名也可以进入后面输入框<br>当label标签中包含两个及以上的输入框时,用for属性规定label与哪个表单元素绑定<br>  <label for="‘id名称’"></label></p><h1 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea(文本域)"></a>textarea(文本域)</h1><p>text文本框只能写一行<br>有cols=’每行中的字符数’；rows=’显示的行数’ 属性，但是一般不用，用css来改动</p><h1 id="select-gt-option下拉菜单"><a href="#select-gt-option下拉菜单" class="headerlink" title="select&gt;option下拉菜单"></a>select&gt;option下拉菜单</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;</span><br></pre></td></tr></table></figure><p>在option 中定义selected =” selected “时，当前项即为默认选中项</p><h1 id="form表单域action、method、name"><a href="#form表单域action、method、name" class="headerlink" title="form表单域action、method、name"></a>form表单域action、method、name</h1><p>action属性用于指定接收并处理表单数据的服务器程序的url地址。<br>method 设置表单数据的提交方式，get/post,post和get不同，是匿名提交的。<br>name 用于指定表单的名称,以区分同一个页面中的多个表单</p><h1 id="WEB标准"><a href="#WEB标准" class="headerlink" title="WEB标准"></a>WEB标准</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构（Structure)：html语言：XHTML[可扩展超文本标识语言]和XML[可扩展标记语言]</span><br><span class="line">表现（Preasentation）:css</span><br><span class="line">行为（Behavior）：JS[DOM+ES]</span><br></pre></td></tr></table></figure><p>其中一些小的具体要求：<br>结构：标签小写、闭合、不能随意嵌套<br>CSS+JS：精良使用外链，不用行内<br>优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">易于维护</span><br><span class="line">页面响应快</span><br><span class="line">可访问性高</span><br><span class="line">提高设备兼容性</span><br><span class="line">易被解析（搜索引擎）</span><br></pre></td></tr></table></figure><h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; - IE：Trident内核(多称：IE内核)</span><br><span class="line">&gt; - Chrome：Webkit内核 ==&gt;  Blink内核</span><br><span class="line">&gt; - Firefox：Gecko内核(多称：IE内核)</span><br><span class="line">&gt; - Safari：Webkit内核</span><br><span class="line">&gt; - Opear：Preato====&gt;Webkit内核  ====&gt;  Blink内核</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2019/09/17/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/09/17/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="创建一个Vue实例"><a href="#创建一个Vue实例" class="headerlink" title="创建一个Vue实例"></a>创建一个Vue实例</h1><p>每个Vue应用都是通过用Vue函数创建一个新的Vue实例开始的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  // 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>虽然没有完全遵循MVVM模型,但是Vue 的设计也受到了它的启发。在文档中经常会使用vm(ViewModel 的缩写) 这个变量名表示Vue实例<br>当创建一个Vue实例时,你可以传入一个选项对象<br>一个Vue应用由一个通过new Vue创建的根Vue 实例,以及可选的嵌套的、可复用的组件树组成。一个todo 应用的组件树可以是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根实例</span><br><span class="line">└─ TodoList</span><br><span class="line">   ├─ TodoItem</span><br><span class="line">   │  ├─ DeleteTodoButton</span><br><span class="line">   │  └─ EditTodoButton</span><br><span class="line">   └─ TodoListFooter</span><br><span class="line">      ├─ ClearTodosButton</span><br><span class="line">      └─ TodoListStatistics</span><br></pre></td></tr></table></figure><h1 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h1><p>当一个Vue实例被创建时,它将data对象中的所有的属性加入到Vue的响应式系统中当这些属性的值发生改变时,视图将会产生”响应”,即匹配更新为新的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 数据对象</span><br><span class="line">var data = &#123; a: 2 &#125;</span><br><span class="line"></span><br><span class="line">// 该对象被加入到一个 Vue 实例中</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 获得这个实例上的属性</span><br><span class="line">// 返回源数据中对应的字段</span><br><span class="line">vm.a == data.a // =&gt; true</span><br><span class="line"></span><br><span class="line">// 设置属性也会影响到原始数据</span><br><span class="line">vm.a = 3</span><br><span class="line">data.a // =&gt; 4</span><br><span class="line">//返回数据</span><br><span class="line">data.a = 4</span><br><span class="line">vm.a // =&gt; 4</span><br></pre></td></tr></table></figure><p>当这些数据改变时,视图会进行重渲染。只有当实例被创建时data中存在的属性才是响应式的 也就是说添加一个新的属性,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = &apos;vue&apos;</span><br></pre></td></tr></table></figure><p>那么对b的改动将不会触发任何视图的更新,在晚些时候需要一个属性 但是一开始它为空或不存在，仅需要设置一些初始值。比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: &apos;&apos;,</span><br><span class="line">  visitCount: 0,</span><br><span class="line">  hideCompletedTodos: false,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门教程-内置指令</title>
      <link href="/2019/09/16/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/09/16/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/14.PNG" alt><br>Vue.js (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 与其它大型框架不同的是，Vue.js 被设计为可以自底向上逐层应用。 Vue .js的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue也完全能够为复杂的单页应用提供驱动。 VUE 的方式 1. 首先导入 vue.js 要用到的库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;js/vue.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">同样准备一个div元素，其id是app</span><br><span class="line">在js中准备json数据&apos;Hello Vue.js!&apos;</span><br><span class="line">在视图div中，就可以通过如下方式把数据取出来了</span><br></pre></td></tr></table></figure><p>使用CDN方法 以下推荐国外比较稳定的两个CDN,目前还是建议下载到本地<br>Staticfile CDN（国内）：https：//cdn.staticfile.org/vue/2.2.2/vue.min.js<br>unpkg：https：//unpkg.com/vue/dist/vue.js<br>cdnjs：https：//cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js、</p><h1 id="编写第一个Hello-Vue-js代码"><a href="#编写第一个Hello-Vue-js代码" class="headerlink" title="编写第一个Hello Vue.js代码:"></a>编写第一个Hello Vue.js代码:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">//准备数据</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//通过vue.min.js把数据和对应的视图关联起来</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue.js!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-if-amp-v-else-amp-v-show指令"><a href="#v-if-amp-v-else-amp-v-show指令" class="headerlink" title="v-if &amp; v-else &amp; v-show指令"></a>v-if &amp; v-else &amp; v-show指令</h1><h2 id="v-if的使用"><a href="#v-if的使用" class="headerlink" title="v-if的使用"></a>v-if的使用</h2><p>条件判断使用v-if指令:<br>通过toggle函数切换show的值。通过v-if语句,当show是true的时候.显示当前元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;条件语句&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &lt;button v-on:click=&quot;toggle&quot;&gt;隐藏或显示&lt;/button&gt;</span><br><span class="line"> &lt;div v-if=&quot;show&quot;&gt;学习Vue&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show:true</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      toggle: function()&#123;</span><br><span class="line">          this.show=!this.show;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="v-else的使用"><a href="#v-else的使用" class="headerlink" title="v-else的使用"></a>v-else的使用</h2><p>可以用 v-else 指令给 v-if 添加一个 “else” 块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;条件语句&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;toggle&quot;&gt;学习&lt;/button&gt;</span><br><span class="line"> &lt;div v-if=&quot;show&quot;&gt;学习Vue&lt;/div&gt;</span><br><span class="line"> &lt;div v-else&gt;入门到放弃&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show:false</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      toggle: function()&#123;</span><br><span class="line"></span><br><span class="line">    this.show = Math.random()&lt;0.1            </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h1><h1 id="v-text-amp-v-html指令"><a href="#v-text-amp-v-html指令" class="headerlink" title="v-text &amp; v-html指令"></a>v-text &amp; v-html指令</h1><h1 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h1><h1 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h1><h1 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h1><h1 id="v-pre-amp-v-cloak-amp-v-once-指令"><a href="#v-pre-amp-v-cloak-amp-v-once-指令" class="headerlink" title="v-pre &amp; v-cloak &amp; v-once 指令"></a>v-pre &amp; v-cloak &amp; v-once 指令</h1><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex入门</title>
      <link href="/2019/09/16/Vuex%E5%85%A5%E9%97%A8/"/>
      <url>/2019/09/16/Vuex%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex?"></a>什么是Vuex?</h1><p>Vuex是Vue.js应用程序的状态管理模式+库。它充当应用程序中所有组件的集中存储，其规则确保状态只能以可预测的方式进行变更。<br><img src="/images/8.png" alt="Vuex核心"><br>上图中绿色虚线包裹起来的部分就是Vuex的核心, state中保存的就是公共状态, 改变state的唯一方式就是通过mutations进行更改</p><h1 id="什么情况下应该使用Vuex？"><a href="#什么情况下应该使用Vuex？" class="headerlink" title="什么情况下应该使用Vuex？"></a>什么情况下应该使用Vuex？</h1><p>试想这样的场景, 比如一个Vue的根实例下面有一个根组件名为App.vue, 它下面有两个子组件A.vue和B.vue, App.vue想要与A.vue或者B.vue通讯可以通过props传值的方式, 但是如果A.vue和B.vue之间的通讯就很麻烦了, 他们需要共有的父组件通过自定义事件进行实现, A组件想要和B组件通讯往往是这样的:<br><img src="/images/9.png" alt="组件通信"></p><h1 id="Vuex默认五种基本的对象"><a href="#Vuex默认五种基本的对象" class="headerlink" title="Vuex默认五种基本的对象"></a>Vuex默认五种基本的对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state：存储状态（变量</span><br><span class="line">getters：对数据获取之前的再次编译,可以理解为state的计算属性,在组件中使用 $sotre.getters.fun()</span><br><span class="line">mutations：修改状态，并且是同步的,在组件中使用$store.commit(&apos;&apos;,params)。这个和组件中的自定义事件类似</span><br><span class="line">actions：异步操作,在组件中使用是$store.dispath(&apos;&apos;)</span><br><span class="line">modules：store的子模块,为了开发大型项目,方便状态管理而使用的</span><br></pre></td></tr></table></figure><h1 id="如何引入Vuex"><a href="#如何引入Vuex" class="headerlink" title="如何引入Vuex?"></a>如何引入Vuex?</h1><p>引用vuex的方式有两种,npm与yarn,选其中一种,以免出错。<br>npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>Yarn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><p>新建一个vuex文件夹(这个不是必须的)并在文件夹下新建store.js文件，文件中引入我们的vue和vuex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br></pre></td></tr></table></figure><p>在main.js添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念?"></a>Vuex的核心概念?</h1><p>使用vue-cli初始化了一个demo,准备以代码的形式来说明Vuex的核心概念,这个demo分别有两个组件ProductListOne.vue和ProductListTwo.vue, 在App.vue的datat中保存着共有的商品列表, 代码和初始化的效果如下图所示:<br><img src="/images/10.PNG" alt="初始化效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//App.vue中的初始化代码</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;product-list-one v-bind:products=&quot;products&quot;&gt;&lt;/product-list-one&gt;</span><br><span class="line">    &lt;product-list-two v-bind:products=&quot;products&quot;&gt;&lt;/product-list-two&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ProductListOne from &apos;./components/ProductListOne.vue&apos;</span><br><span class="line">import ProductListTwo from &apos;./components/ProductListTwo.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    &apos;product-list-one&apos;:ProductListOne,</span><br><span class="line">    &apos;product-list-two&apos;:ProductListTwo</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      products:[</span><br><span class="line">      &#123; id: 1, name: &apos;红米4A&apos;,price: 799&#125;,</span><br><span class="line">      &#123; id: 2, name: &apos;红米5A&apos;, price: 899&#125;,</span><br><span class="line">      &#123; id: 3, name: &apos;红米6A&apos;, price: 999&#125;,</span><br><span class="line">      &#123; id: 4, name: &apos;红米20k&apos;, price: 2399&#125;,</span><br><span class="line">      &#123; id: 5, name: &apos;小米9&apos;, price: 3299&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//ProductListOne.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;product-list-one&quot;&gt;</span><br><span class="line">&lt;h1&gt;One&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li v-for=&quot;product in products&quot;&gt;</span><br><span class="line"> &lt;span class=&quot;id&quot;&gt;&#123;&#123;product.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;name&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;price&quot;&gt;￥&#123;&#123;product.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> props: [&apos;products&apos;],</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#product-list-one&#123;</span><br><span class="line">    background: #c3c3c3;</span><br><span class="line">    box-shadow: 1px 2px 3px rgba(0,0,0,0.1);</span><br><span class="line">    padding: 10px 10px;</span><br><span class="line">&#125;</span><br><span class="line">#product-list-one ul&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#product-list-one li&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    background: rgba(255,255,255,0.5);</span><br><span class="line">&#125;</span><br><span class="line">.price&#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;product-list-two&quot;&gt;</span><br><span class="line">&lt;h1&gt;Two&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li v-for=&quot;product in products&quot;&gt;</span><br><span class="line"> &lt;span class=&quot;id&quot;&gt;&#123;&#123;product.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;name&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;price&quot;&gt;￥&#123;&#123;product.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> props: [&apos;products&apos;],</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#product-list-two&#123;</span><br><span class="line">    background: #f0f0f0;</span><br><span class="line">    box-shadow: 1px 2px 3px rgba(0,0,0,0.2);</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">&#125;</span><br><span class="line">#product-list-two ul&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">&#125;</span><br><span class="line">#product-list-two li&#123;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">    padding:5px;</span><br><span class="line">    background: rgba(255,255,255,0.7);</span><br><span class="line">&#125;</span><br><span class="line">.price&#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    color: red;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="核心概念1-State"><a href="#核心概念1-State" class="headerlink" title="核心概念1: State"></a>核心概念1: State</h1><p>state就是Vuex中的公共的状态, 我是将state看作是所有组件的data, 用于保存所有组件的公共数据<br>此时我们就可以把App.vue中的两个组件共同使用的data抽离出来, 放到state中,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123; </span><br><span class="line">    products: [</span><br><span class="line">      &#123; id: 1, name: &apos;红米4A&apos;,price: 799&#125;,</span><br><span class="line">      &#123; id: 2, name: &apos;红米5A&apos;, price: 899&#125;,</span><br><span class="line">      &#123; id: 3, name: &apos;红米6A&apos;, price: 999&#125;,</span><br><span class="line">      &#123; id: 4, name: &apos;红米20k&apos;, price: 2399&#125;,</span><br><span class="line">      &#123; id: 5, name: &apos;小米9&apos;, price: 3299&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时,ProductListOne.vue和ProductListTwo.vue也需要做相应的更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//ProductListOne.vue</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            products : this.$store.state.products //获取store中state的数据</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            products: this.$store.state.products //获取store中state的数据</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的页面如下图所示, 可以看到, 将公共数据抽离出来后, 页面没有发生变化<br><img src="/images/10.PNG" alt="初始化效果"></p><h1 id="核心概念2-Getters"><a href="#核心概念2-Getters" class="headerlink" title="核心概念2: Getters"></a>核心概念2: Getters</h1><p>将getters属性理解为所有组件的computed属性, 也就是计算属性. vuex的官方文档也是说到可以将getter理解为store的计算属性, getters的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>此时,可以在main.js中添加一个getters属性, 其中的saleProducts对象将state中的价格减少一半(除以2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      products:[</span><br><span class="line">      &#123; id: 1, name: &apos;红米4A&apos;,price: 799&#125;,</span><br><span class="line">      &#123; id: 2, name: &apos;红米5A&apos;, price: 899&#125;,</span><br><span class="line">      &#123; id: 3, name: &apos;红米6A&apos;, price: 999&#125;,</span><br><span class="line">      &#123; id: 4, name: &apos;红米20k&apos;, price: 2399&#125;,</span><br><span class="line">      &#123; id: 5, name: &apos;小米9&apos;, price: 3299&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;,  //添加getters方法</span><br><span class="line">   getters:&#123;</span><br><span class="line">   setProducts:(state) =&gt;&#123;</span><br><span class="line">   let setProducts = state.products.map(product =&gt;&#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     id: product.id,</span><br><span class="line">     name: product.name,</span><br><span class="line">          price: product.price / 2</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   return setProducts;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将productListOne.vue中的products的值更换为this.$store.getters.setProducts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        products: this.$store.getters.setProducts</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>现在的页面中,Product List One中的每项商品的价格都减少了一半<br><img src="/images/11.PNG" alt="初始化效果"></p><h1 id="核心概念3-Mutations"><a href="#核心概念3-Mutations" class="headerlink" title="核心概念3: Mutations"></a>核心概念3: Mutations</h1><p>将mutaions理解为store中的methods,mutations对象中保存着更改数据的回调函数,该函数名官方规定叫type,第一个参数是state,第二参数是pays也就是自定义的参数<br>下面,我们在main.js中添加mutations属性,其中newsPrice这个回调函数用于将商品的价格减少pays这么多,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      products:[</span><br><span class="line">      &#123; id: 1, name: &apos;红米4A&apos;,price: 799&#125;,</span><br><span class="line">      &#123; id: 2, name: &apos;红米5A&apos;, price: 899&#125;,</span><br><span class="line">      &#123; id: 3, name: &apos;红米6A&apos;, price: 999&#125;,</span><br><span class="line">      &#123; id: 4, name: &apos;红米20k&apos;, price: 2399&#125;,</span><br><span class="line">      &#123; id: 5, name: &apos;小米9&apos;, price: 3299&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;,</span><br><span class="line">   getters:&#123;</span><br><span class="line">   setProducts:(state) =&gt;&#123;</span><br><span class="line">   let setProducts = state.products.map(product =&gt;&#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     id: product.id,</span><br><span class="line">     name: product.name,</span><br><span class="line">          price: product.price / 2</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   return setProducts;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;, //添加mutations方法</span><br><span class="line">   mutations:&#123;</span><br><span class="line">   newsPrice(state,pays)&#123;</span><br><span class="line">   let newPrice = state.products.forEach(product =&gt;&#123;</span><br><span class="line">   product.price += pays</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在ProductListTwo.vue中添加一个按钮,为其添加一个点击事件,给点击事件触发newsPrice方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;product-list-two&quot;&gt;</span><br><span class="line">&lt;h1&gt;Two&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li v-for=&quot;product in products&quot;&gt;</span><br><span class="line"> &lt;span class=&quot;id&quot;&gt;&#123;&#123;product.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;name&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;price&quot;&gt;￥&#123;&#123;product.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">      &lt;button @click=&quot;newsPrice&quot;&gt;提升价格&lt;/button&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在ProductListTwo.vue中注册newsPrice方法,在该方法中commit mutations中的newsPrice这个回调函数<br>注意:调用mutaions中回调函数,只能使用store.commit(type, pays)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">export default&#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        products: this.$store.state.products </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">        newsPrice()&#123;</span><br><span class="line">        this.$store.commit(&apos;newsPrice&apos;,1); //提交newsPrice,pays为1</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>添加按钮,可以发现, ProductList Two中的价格添加了1,当然你可以自定义pays,以此自定义添加对应的价格<br>(ProductListOne中的价格没有发生变化,原因是getter 监听的是map方法产生的新对象)<br><img src="/images/12.PNG" alt></p><h1 id="核心概念4-Actions"><a href="#核心概念4-Actions" class="headerlink" title="核心概念4: Actions"></a>核心概念4: Actions</h1><p>actions类似于mutations,不同在于：<br>actions提交的是mutations而不是直接变更状态<br>actions中可以包含异步操作, mutations中绝对不允许出现异步<br>actions中的回调函数的第一个参数是context,是一个与store实例具有相同属性和方法的对象<br>此时,我们在store中添加actions属性,其中newsPriceAsync采用setTimeout来模拟异步操作,延迟2s执行该方法用于异步改变我们刚才在mutaions中定义的newsPrice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">      products:[</span><br><span class="line">      &#123; id: 1, name: &apos;红米4A&apos;,price: 799&#125;,</span><br><span class="line">      &#123; id: 2, name: &apos;红米5A&apos;, price: 899&#125;,</span><br><span class="line">      &#123; id: 3, name: &apos;红米6A&apos;, price: 999&#125;,</span><br><span class="line">      &#123; id: 4, name: &apos;红米20k&apos;, price: 2399&#125;,</span><br><span class="line">      &#123; id: 5, name: &apos;小米9&apos;, price: 3299&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;,</span><br><span class="line">   getters:&#123;</span><br><span class="line">   setProducts:(state) =&gt;&#123;</span><br><span class="line">   let setProducts = state.products.map(product =&gt;&#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     id: product.id,</span><br><span class="line">     name: product.name,</span><br><span class="line">          price: product.price / 2</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   return setProducts;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   mutations:&#123;</span><br><span class="line">   newsPrice(state,pays)&#123;</span><br><span class="line">   let newPrice = state.products.forEach(product =&gt;&#123;</span><br><span class="line">   product.price += pays</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   actions:&#123;</span><br><span class="line">   newsPriceAsync(context,pays) &#123;</span><br><span class="line">      setTimeout( () =&gt; &#123;</span><br><span class="line">        context.commit(&apos;newsPrice&apos;,pays); //context提交</span><br><span class="line">      &#125;, 2000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在ProductListTwo.vue中添加一个按钮,为其添加一个点击事件,给点击事件触发newsPriceAsync方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;product-list-two&quot;&gt;</span><br><span class="line">&lt;h1&gt;Two&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li v-for=&quot;product in products&quot;&gt;</span><br><span class="line"> &lt;span class=&quot;id&quot;&gt;&#123;&#123;product.id&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;name&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;price&quot;&gt;￥&#123;&#123;product.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">      &lt;button @click=&quot;newsPrice&quot;&gt;提升价格&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;newsPriceAsync&quot;&gt;异步提升价格&lt;/button&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在ProductListTwo.vue中注册newssPriceAsync方法,在该方法中dispatch actions中的newsPriceAsync这个回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//ProductListTwo.vue</span><br><span class="line">export default&#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        products: this.$store.state.products </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">        newsPrice()&#123;</span><br><span class="line">        this.$store.commit(&apos;newsPrice&apos;,1);</span><br><span class="line">        &#125;,</span><br><span class="line">        newsPriceAsync()&#123;</span><br><span class="line">    this.$store.dispatch(&apos;newsPriceAsync&apos;,5);//分发actions中的newsPriceAsync这个异步函数 </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>添加按钮,可以发现,ProductListTwo中的价格延迟2s后减少了5<br><img src="/images/13.PNG" alt></p><h1 id="核心概念5-Modules"><a href="#核心概念5-Modules" class="headerlink" title="核心概念5: Modules"></a>核心概念5: Modules</h1><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将store 分割成模块（module）。每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack搭建服务器</title>
      <link href="/2019/09/15/Webpack%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/09/15/Webpack%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>把package.json文件的”scripts”括号内容改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack&quot;</span><br></pre></td></tr></table></figure><p>可以用命令运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run build</span><br></pre></td></tr></table></figure><p><img src="/images/7.PNG" alt><br>在浏览器中打开index.html,输出结果如下:<br><img src="/images/6.PNG" alt></p><p>Webpack搭建服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>把package.json文件的”scripts”括号添加内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;:&quot;webpack-dev-server --entry ./src/js/app.js --output-filename ./dist/bundle.js&quot;,</span><br></pre></td></tr></table></figure><p>用命令重新运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run build</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm start</span><br></pre></td></tr></table></figure><p>访问8080端口,在浏览器中打开localhost:8080，输入结果如下<br><img src="/images/6.PNG" alt><br>配置babel,es6语法转化es5语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm  install babel-core babel-loader babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure><p>更改webpack.config.js内容 es6语法转化es5语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;test:/\.css$/,loader:&quot;style-loader!css-loader&quot;&#125;,</span><br><span class="line"> &#123;test:/\.js$/,loader:&quot;babel-loader&quot;,</span><br><span class="line"> exclude: /node_modules/,   //排除node_modules</span><br><span class="line"> query:&#123;     //查询预编译的内容</span><br><span class="line"> presets:[&quot;es2015&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>用命令重新运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run build</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm start</span><br></pre></td></tr></table></figure><p>访问8080端口,在浏览器中打开localhost:8080，输入结果如下<br><img src="/images/6.PNG" alt></p><h1 id="如何将js文件进行模块化"><a href="#如何将js文件进行模块化" class="headerlink" title="如何将js文件进行模块化"></a>如何将js文件进行模块化</h1><p>module.exports require()<br>自定义文件,引用时需要使用./<br>npm下载的文件,不需要./</p><h1 id="如何使用第三方"><a href="#如何使用第三方" class="headerlink" title="如何使用第三方"></a>如何使用第三方</h1><p> 1.npm服务器下载第三方<br> 2.require()第三方</p><h1 id="如何将静态文件模块化"><a href="#如何将静态文件模块化" class="headerlink" title="如何将静态文件模块化"></a>如何将静态文件模块化</h1><p> 1.创建css文件<br> 2.下载对应加载器<br> 3.修饰css文件 !css-loader</p><h1 id="如何配置webpack-config-js"><a href="#如何配置webpack-config-js" class="headerlink" title="如何配置webpack.config.js"></a>如何配置webpack.config.js</h1><p> 1.配置出口文件<br> 2.配置入口文件<br> 3.依赖模块、加载器</p><h1 id="如何使用package-json启动项目"><a href="#如何使用package-json启动项目" class="headerlink" title="如何使用package.json启动项目"></a>如何使用package.json启动项目</h1><p>配置”build”: “webpack”</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack运用第三方库</title>
      <link href="/2019/09/15/Webpack%E8%BF%90%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2019/09/15/Webpack%E8%BF%90%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>运用jquery库<br>目录webpack-my-app下cmd输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  jquery --save</span><br></pre></td></tr></table></figure><p>引用第三方库,在node_modules内可以看到jquery库<br>在app.js引用juery库,取出modules的name的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let modules = require(&apos;./module.js&apos;);</span><br><span class="line">let $ = require(&quot;jquery&quot;);</span><br><span class="line"></span><br><span class="line">$(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; +modules[0].name+ &quot;&lt;/h1&gt;&quot;);</span><br><span class="line"></span><br><span class="line">console.log(modules[1].name);</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure><p>jquery的each方法遍历,取出modules的name的key值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let modules = require(&apos;./module.js&apos;);</span><br><span class="line">let $ = require(&quot;jquery&quot;);</span><br><span class="line"></span><br><span class="line">$.each(modules,function(key,value) &#123;</span><br><span class="line">$(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; +modules[key].name+ &quot;&lt;/h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(modules[1].name);</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">赵四</span><br><span class="line">王五</span><br></pre></td></tr></table></figure><p>运用css模块库<br>目录webpack-my-app下cmd输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><p>在app.js引用css-loader style-loader,加载style.css的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let modules = require(&apos;./module.js&apos;);</span><br><span class="line">let $ = require(&quot;jquery&quot;);</span><br><span class="line">require(&quot;!style-loader!css-loader!./style.css&quot;); //引用css模块</span><br><span class="line"></span><br><span class="line">$.each(modules,function(key,value) &#123;</span><br><span class="line">$(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; +modules[key].name+ &quot;&lt;/h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(modules[1].name);</span><br></pre></td></tr></table></figure><p>style.css的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">background:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,输出结果如下:<br><img src="/images/6.PNG" alt><br>在目录下添加webpack.config.js文件,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">//入口文件</span><br><span class="line">entry:&apos;./app.js&apos;,</span><br><span class="line">//出口文件</span><br><span class="line">output:&#123;</span><br><span class="line">path: __dirname,</span><br><span class="line">filename:&quot;bundle.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line">//需要依赖的插件或者是装载器</span><br><span class="line">module:&#123;</span><br><span class="line">   loaders:[</span><br><span class="line">   &#123;test:/\.css$/,loader:&quot;style-loader!css-loader&quot;&#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改app.js内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let modules = require(&apos;./module.js&apos;);</span><br><span class="line">let $ = require(&quot;jquery&quot;);</span><br><span class="line">require(&quot;./style.css&quot;);</span><br><span class="line">$.each(modules,function(key,value) &#123;</span><br><span class="line">$(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; +modules[key].name+ &quot;&lt;/h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(modules[1].name);</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,输出结果如下:<br><img src="/images/6.PNG" alt><br>模拟真实项目创建src目录 在src目录创建css目录和js目录<br>把app.js、module.js放在js目录,style.css放在css目录,bundle.js删除<br>更改webpack.config.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">//入口文件</span><br><span class="line">entry:&apos;./src/js/app.js&apos;,</span><br><span class="line">//出口文件</span><br><span class="line">output:&#123;</span><br><span class="line">path: __dirname+&quot;/dist&quot;,</span><br><span class="line">filename:&quot;bundle.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line">//需要依赖的插件或者是装载器</span><br><span class="line">module:&#123;</span><br><span class="line">   loaders:[</span><br><span class="line">   &#123;test:/\.css$/,loader:&quot;style-loader!css-loader&quot;&#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改app.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let modules = require(&apos;./module.js&apos;);</span><br><span class="line">let $ = require(&quot;jquery&quot;);</span><br><span class="line">require(&quot;../css/style.css&quot;);</span><br><span class="line">$.each(modules,function(key,value) &#123;</span><br><span class="line">$(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; +modules[key].name+ &quot;&lt;/h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(modules[1].name);</span><br></pre></td></tr></table></figure><p>目录webpack-my-app下cmd输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><p><img src="/images/7.PNG" alt><br>在浏览器中打开index.html,输出结果如下:<br><img src="/images/6.PNG" alt></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack入门教程</title>
      <link href="/2019/09/15/Webpack%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/15/Webpack%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Webpack是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<br><img src="/images/1.png" alt><br>Webpack可以将多种静态资源js、css、less 转换成一个静态文件,减少了页面的请求。<br>安装 webpack<br>安装的时候,不要使用npm,否则在 windows上会失败,请使用cnpm<br>cnpm是一个国内的镜像,接下来安装 webpack,使用全局安装方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g webpack@1.13.2</span><br></pre></td></tr></table></figure><p>所示安装结束后，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><p>如图所示以下版本：webpack 1.13.2<br><img src="/images/2.png" alt><br>创建项目(项目目录名称不要用 webpack,会对webpack工具的使用产生冲突)<br>接下来我们创建一个目录webpack-my-app<br>在目录webpack-my-app下cmd输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure><p>一路按回车,最后提示是否OK!填yes<br><img src="/images/3.PNG" alt><br>出现package.json文件<br>package.json文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-my-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;yixuan&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在目录下添加index.html文件,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在目录下添加app.js 文件,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;hello webpack&quot;);</span><br></pre></td></tr></table></figure><p>使用webpack命令打包<br>在项目目录下运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack app.js bundle.js</span><br></pre></td></tr></table></figure><p><img src="/images/4.PNG" alt><br>在浏览器中打开index.html,输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello webpack</span><br></pre></td></tr></table></figure><p>接下来添加一个模块module.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &apos;hello webpack&apos;;</span><br></pre></td></tr></table></figure><p>app.js添加模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(require(&apos;./module.js&apos;)); //添加模块</span><br></pre></td></tr></table></figure><p>重新打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack app.js bundle.js</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,控制台输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello webpack</span><br></pre></td></tr></table></figure><p>更改模块module.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> function modules()&#123;</span><br><span class="line">return &quot;hello webpack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = modules();</span><br></pre></td></tr></table></figure><p><img src="/images/5.PNG" alt><br>在浏览器中打开index.html,控制台输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello webpack</span><br></pre></td></tr></table></figure><p>更改模块module.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let modules =[</span><br><span class="line">  &#123;name:&quot;张三&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;,</span><br><span class="line">  &#123;name:&quot;赵四&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;,</span><br><span class="line">  &#123;name:&quot;王五&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;</span><br><span class="line">];</span><br><span class="line">module.exports = modules;</span><br></pre></td></tr></table></figure><p>在浏览器中打开index.html,控制台输出结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;name:&quot;张三&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;</span><br><span class="line">&#123;name:&quot;赵四&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;</span><br><span class="line">&#123;name:&quot;王五&quot;,age:&quot;18&quot;,sex:&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/2019/09/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/09/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>切换目录</p><h1 id="cd-usr"><a href="#cd-usr" class="headerlink" title="cd /usr"></a>cd /usr</h1><p> 切换到/usr目录下 注：Linux的文件系统和Windows不一样<br>查看目录下的文件</p><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p>ls -lh<br> ls 用来遍历当前目录下所有的文件和目录 ls -lh 遍历详细信息，如权限，所属用户，创建日期，大小等等信息<br>查看当前所处目录</p><h1 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h1><p> 使用pwd命令来显示当前所处与的目录<br>创建目录</p><p>m###### kdir -p /test/abc<br> 创建目录 /test/abc -p的意思是如果abc的父目录不存在，就会帮助创建其父目录<br>创建文件</p><p>#touch test.java<br> 创建test.java文件<br>删除文件</p><h1 id="rm-f-test-java"><a href="#rm-f-test-java" class="headerlink" title="rm -f test.java"></a>rm -f test.java</h1><p> 使用rm命令删除文件。 -f是强制删除的意思<br>删除目录</p><h1 id="rm-rf-test-abc"><a href="#rm-rf-test-abc" class="headerlink" title="rm -rf /test/abc"></a>rm -rf /test/abc</h1><p> rm 命令也可以用来删除目录 -r表示删除目录 f表示强制<br>查看文件内容<br>查看文件的命令有多种，这里用tail</p><h1 id="tail-50f-etc-passwd"><a href="#tail-50f-etc-passwd" class="headerlink" title="tail -50f /etc/passwd"></a>tail -50f /etc/passwd</h1><p> 查看 /ect/passwd 文件的内容， -50 表示查看最后50行 f表示滚动查看，当这个文件发生变化的时候，会自动展示最新的内容。 这种方式特别适合查看日志文件。 在后续的tomcat日志文件那里就会用这种方式。 退出方式： ctrl+c</p><h1 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h1><p>使用Tab键来进行命令补全,作用是补全文件名或者路径</p><h1 id="Ctrl-c"><a href="#Ctrl-c" class="headerlink" title="Ctrl+c"></a>Ctrl+c</h1><p>当你在 Linux 命令行中无意输入了一个不知道的命令，或者错误地使用了一个命令，导致在终端里出现了你无法预料的情况,使用Ctrl+c键来强行终止当前程序(并不会使终端退出)</p><h1 id="按键作用"><a href="#按键作用" class="headerlink" title="按键作用"></a>按键作用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+d键盘输入结束或退出终端</span><br><span class="line">Ctrl+s暂停当前程序，暂停后按下任意键恢复运行</span><br><span class="line">Ctrl+z将当前程序放到后台运行，恢复到前台为命令fg</span><br><span class="line">Ctrl+a将光标移至输入行头，相当于Home键</span><br><span class="line">Ctrl+e将光标移至输入行末，相当于End键</span><br><span class="line">Ctrl+k删除从光标所在位置到行末</span><br><span class="line">Alt+Backspace向前删除一个单词</span><br><span class="line">Shift+PgUp将终端显示向上滚动</span><br><span class="line">Shift+PgDn将终端显示向下滚动</span><br><span class="line">Shell通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。</span><br><span class="line">终端里面输入的通配符是由 Shell 处理的，不是由所涉及的命令语句处理的，它只会出现在命令的“参数值”里（不能出现在命令名称里， 命令不记得，那就用Tab补全）。当 Shell 在“参数值”中遇到了通配符时，Shell 会将其当作路径或文件名在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换（路径扩展）；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。通配符实际上就是一种 Shell 实现的路径扩展功能。在通配符被处理后， Shell 会先完成该命令的重组，然后继续处理重组后的命令，直至执行该命令</span><br><span class="line">Shell 常用通配符：</span><br><span class="line"> 字符含义</span><br><span class="line">*匹配 0 或多个字符</span><br><span class="line">?匹配任意一个字符</span><br><span class="line">[list]匹配 list 中的任意单一字符</span><br><span class="line">[^list]匹配 除list 中的任意单一字符以外的字符</span><br><span class="line">[c1-c2]匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</span><br><span class="line">&#123;string1,string2,...&#125;匹配 string1 或 string2 (或更多)其一字符串</span><br><span class="line">&#123;c1..c2&#125;匹配 c1-c2 中全部字符 如&#123;1..10&#125;</span><br></pre></td></tr></table></figure><h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ls      列出目录</span><br><span class="line">ls -al     使用格式化列出隐藏文件</span><br><span class="line">cd dir      进入目录dir</span><br><span class="line">cd       进入home目录</span><br><span class="line">pwd        显示当前目录</span><br><span class="line">mkdir dir     创建目录dir</span><br><span class="line">rm file      删除文件file</span><br><span class="line">rm -r  dir     删除目录dir</span><br><span class="line">rm -f file     强制删除file</span><br><span class="line">rm - rf dir     强制目录dir</span><br><span class="line">cp file1 file2     将file1复制file2</span><br><span class="line">cp -r dir1 dir2     将dir1复制dir2;如果dir2不存在则创建它</span><br><span class="line">mv file1 file2    将file1重命名或移动到file2;如果file2是已存在目录将file1移动到目录file2中</span><br><span class="line">ln -s fie link   创建file的符号连接link</span><br><span class="line">touch file    创建file的文件</span><br><span class="line">cat &gt; file    将标准输入添加到file</span><br><span class="line">more file    查看file的内容</span><br><span class="line">tail -f file   从后10行开始查看file的内容</span><br><span class="line">man command    显示command的说明手册</span><br><span class="line">ps    显示当前的活动进程</span><br><span class="line">top   显示所有正在运行的进程</span><br><span class="line">kill pid    杀掉进程id pid</span><br><span class="line">killall proc    杀掉所有名为proc的进程</span><br><span class="line">chmod octal file    更改file的权限</span><br><span class="line">grep pattern files   搜索files中匹配pattern的内容</span><br><span class="line">df    显示磁盘占用情况</span><br><span class="line">du    显示目录空间占用情况</span><br><span class="line">tar xzf file.tar.gz    使用Gzip解压tar文件</span><br><span class="line">tar xjf file.tar.bz2   使用Bzip2解压tar文件</span><br><span class="line">ping host  ping host   并输出结果</span><br><span class="line">wget file    下载file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2019/09/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/09/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><p> 初始化仓库，如果初始化成功，执行了 git init命令的目录下就会生成 .git 目录。这个 .git 目录里存储着管理当前目录内容所需的仓库数据。</p><h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h1><p> 查看仓库的状态，工作树和仓库在被操作的过程中，状态会不断发生变化。在 Git 操作过程中时常用 git status命令查看当前状态，可谓基本中的基本。<br> 当文件太多时，进入某个文件夹，使用git status . 可以只查看这个文件夹中的git状态。</p><h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><p>向暂存区中添加文件，如果只是用 Git 仓库的工作树创建了文件，那么该文件并不会被记入 Git 仓库的版本管理对象当中。要想让文件成为 Git 仓库的管理对象，就需要用 git add命令将其加入暂存区（Stage 或者 Index）中。暂存区是提交之前的一个临时区域。 </p><h1 id="git-add-1"><a href="#git-add-1" class="headerlink" title="git add"></a>git add</h1><p> xx命令可以将xx文件或目录添加到暂存区</p><h1 id="git-add-A"><a href="#git-add-A" class="headerlink" title="git add -A ."></a>git add -A .</h1><p>来一次添加所有改变的文件。注意 -A 选项后面还有一个句点. git add -A表示添加所有内容</p><h1 id="git-add-2"><a href="#git-add-2" class="headerlink" title="git add ."></a>git add .</h1><p>表示添加新文件和编辑过的文件不包括删除的文件</p><h1 id="git-add-u"><a href="#git-add-u" class="headerlink" title="git add -u"></a>git add -u</h1><p>表示添加编辑或者删除的文件，不包括新添加的文件。</p><h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><p>保存仓库的历史记录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式 git commit -m description，例 git commit -m &quot;提交描述&quot;。windows下，请注意使用双引号，否则可能出现错误：error: pathspec &apos;commit&apos;&apos; did not match any file(s) known to git.</span><br><span class="line">如果想要记述得更加详细，请不加 -m，直接执行 git commit命令。执行后编辑器就会启动。在编辑器中记述提交信息的格式如下： </span><br><span class="line">第一行：用一行文字简述提交的更改内容</span><br><span class="line">第二行：空行</span><br><span class="line">第三行以后：记述更改的原因和详细内容</span><br><span class="line">将提交信息按格式记述完毕后，请保存并关闭编辑器，以 #（井号）标为注释的行不必删除。随后，刚才记述的提交信息就会被提交。</span><br><span class="line">中止提交 如果在编辑器启动后想中止提交，请将提交信息留空并直接关闭编辑器，随后提交就会被中止。</span><br><span class="line">只要按照上面的格式输入，今后便可以通过确认日志的命令或工具看到这些记录。</span><br><span class="line">在以 #（井号）标为注释的 Changes to be committed（要提交的更改）栏中，可以查看本次提交中包含的文件。</span><br><span class="line">git 提交出现这个错误：fatal: Unable to create ‘project_path/.git/index.lock’: File exists. </span><br><span class="line">解决方案：需要删除.git\index.lock，在cmder中无法删除，可以使用git bash。</span><br></pre></td></tr></table></figure><h1 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只显示提交信息的第一行 可以在 git log命令后加上 --pretty=short</span><br><span class="line">只显示指定目录、文件的日志 只要在 git log命令后加上目录名，便会只显示该目录下的日志。如果加的是文件名，就会只显示与该文件相关的日 志。</span><br><span class="line">显示文件的改动 如果想查看提交所带来的改动，可以加上 -p 参数，文件的前后差别就会显示在提交信息之后。</span><br><span class="line">查看更改前后的差别 git diff命令可以查看工作树、暂存区之间的差别。在没把文件加入暂存区时，使用git diff会显示暂存区和工作树之间的差别 </span><br><span class="line">及没把修改文件加入暂存区前，使用git diff进行比对，如果已经把修改的文件加入暂存区了，使用git diff是无法比对的。</span><br><span class="line">查看工作树和最新提交的差别 git diff HEAD查看本次提交与上次提交之间有什么差别, HEAD 是指向当前分支中最新一次提交的指针。 </span><br><span class="line">即指git add添加到暂存区的文件和上次提交(工作树)文件的差别</span><br><span class="line">不妨养成这样一个好习惯：在执行 git commit命令之前先执行git diff HEAD命令，查看本次提交与上次提交之间有什么差别，等确认完毕后再进行 提交。</span><br><span class="line">比对文件更改前后差别，没添加暂存区时使用git diff，添加暂存区后使用git diff head</span><br><span class="line">比较本地分支和远程分支的差别 git log 本地分支名.. 远程主机名/远程分支名，可以加-p参数比较具体修改</span><br></pre></td></tr></table></figure><h1 id="git-diff命令总结："><a href="#git-diff命令总结：" class="headerlink" title="git diff命令总结："></a>git diff命令总结：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">working tree：就是你所工作在的目录，每当你在代码中进行了修改，working tree的状态就改变了。</span><br><span class="line">index file：是索引文件，它是连接working tree和commit的桥梁，每当我们使用git-add命令来登记后，index file的内容就改变了，此时index file就和working tree同步了。</span><br><span class="line">commit：是最后的阶段，只有commit了，我们的代码才真正进入了git仓库。我们使用git commit就是将index file里的内容提交到commit中</span><br><span class="line">git diff：是查看working tree与index file的差别的。</span><br><span class="line">git diff --cached：是查看index file与commit的差别的。</span><br><span class="line">git diff HEAD：是查看working tree和commit的差别的。（你一定没有忘记，HEAD代表的是最近的一次commit的信息）</span><br><span class="line">查看简单的diff结果，可以加上–stat参数：git diff --stat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
